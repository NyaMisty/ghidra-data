       
       
             
             
#pragma pack(push,_CRT_PACKING)
  typedef __builtin_va_list __gnuc_va_list;
  typedef __gnuc_va_list va_list;
#pragma pack(pop)
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  /*__asm__*/
}
const char *__mingw_get_crt_info (void);
#pragma pack(push,_CRT_PACKING)
__extension__ typedef unsigned long long size_t;
__extension__ typedef long long ssize_t;
typedef size_t rsize_t;
__extension__ typedef long long intptr_t;
__extension__ typedef unsigned long long uintptr_t;
__extension__ typedef long long ptrdiff_t;
typedef unsigned short wchar_t;
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
typedef int errno_t;
typedef long __time32_t;
__extension__ typedef long long __time64_t;
typedef __time64_t time_t;
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;
typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;
typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;
typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;
#pragma pack(pop)
#pragma pack(push,_CRT_PACKING)
  struct _EXCEPTION_POINTERS;
  struct _EXCEPTION_RECORD;
  struct _CONTEXT;
  unsigned long __attribute__((__cdecl__)) _exception_code(void);
  void *__attribute__((__cdecl__)) _exception_info(void);
  int __attribute__((__cdecl__)) _abnormal_termination(void);
  typedef void (__attribute__((__cdecl__)) * _PHNDLR)(int);
  struct _XCPT_ACTION {
    unsigned long XcptNum;
    int SigNum;
    _PHNDLR XcptAction;
  };
  extern struct _XCPT_ACTION _XcptActTab[];
  extern int _XcptActTabCount;
  extern int _XcptActTabSize;
  extern int _First_FPE_Indx;
  extern int _Num_FPE;
  int __attribute__((__cdecl__)) __CppXcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);
  int __attribute__((__cdecl__)) _XcptFilter(unsigned long _ExceptionNum,struct _EXCEPTION_POINTERS * _ExceptionPtr);
  typedef int (*PEXCEPTION_HANDLER)(struct _EXCEPTION_RECORD*, void*, struct _CONTEXT*, void*);
#pragma pack(pop)
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);
int __attribute__((__cdecl__)) isblank(int _C);
  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);
  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcsym_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);
int __attribute__((__cdecl__)) iswblank(wint_t _C);
__extension__ typedef unsigned long long POINTER_64_INT;
  typedef signed char INT8,*PINT8;
  typedef signed short INT16,*PINT16;
  typedef signed int INT32,*PINT32;
  __extension__ typedef signed long long INT64,*PINT64;
  typedef unsigned char UINT8,*PUINT8;
  typedef unsigned short UINT16,*PUINT16;
  typedef unsigned int UINT32,*PUINT32;
  __extension__ typedef unsigned long long UINT64,*PUINT64;
  typedef signed int LONG32,*PLONG32;
  typedef unsigned int ULONG32,*PULONG32;
  typedef unsigned int DWORD32,*PDWORD32;
  __extension__ typedef long long INT_PTR,*PINT_PTR;
  __extension__ typedef unsigned long long UINT_PTR,*PUINT_PTR;
  __extension__ typedef long long LONG_PTR,*PLONG_PTR;
  __extension__ typedef unsigned long long ULONG_PTR,*PULONG_PTR;
  __extension__ typedef long long SHANDLE_PTR;
  __extension__ typedef unsigned long long HANDLE_PTR;
  typedef unsigned int UHALF_PTR,*PUHALF_PTR;
  typedef int HALF_PTR,*PHALF_PTR;
  static __inline unsigned long HandleToULong (const void *h) { return ((unsigned long) (ULONG_PTR) h); }
  static __inline long HandleToLong (const void *h) { return ((long) (LONG_PTR) h); }
  static __inline void *ULongToHandle (const unsigned long h) { return ((void *) (UINT_PTR) h); }
  static __inline void *LongToHandle (const long h) { return ((void *) (INT_PTR) h); }
  static __inline unsigned long PtrToUlong (const void *p) { return ((unsigned long) (ULONG_PTR) p); }
  static __inline unsigned int PtrToUint (const void *p) { return ((unsigned int) (UINT_PTR) p); }
  static __inline unsigned short PtrToUshort (const void *p) { return ((unsigned short) (unsigned long) (ULONG_PTR) p); }
  static __inline long PtrToLong (const void *p) { return ((long) (LONG_PTR) p); }
  static __inline int PtrToInt (const void *p) { return ((int) (INT_PTR) p); }
  static __inline short PtrToShort (const void *p) { return ((short) (long) (LONG_PTR) p); }
  static __inline void *IntToPtr (const int i) { return ((void *) (INT_PTR)i); }
  static __inline void *UIntToPtr (const unsigned int ui) { return ((void *) (UINT_PTR)ui); }
  static __inline void *LongToPtr (const long l) { return ((void *) (LONG_PTR)l); }
  static __inline void *ULongToPtr (const unsigned long ul) { return ((void *) (ULONG_PTR)ul); }
  static __inline void *Ptr32ToPtr (const void * p) { return ((void *) (ULONG_PTR) (unsigned long) (ULONG_PTR) p); }
  static __inline void *Handle32ToHandle (const void * h) { return ((void *) (LONG_PTR) (long) (ULONG_PTR) h); }
  static __inline void * PtrToPtr32 (const void *p) { return ((void *) (ULONG_PTR) (unsigned long) (ULONG_PTR) p); }
  __extension__ typedef ULONG_PTR SIZE_T,*PSIZE_T;
  __extension__ typedef LONG_PTR SSIZE_T,*PSSIZE_T;
  __extension__ typedef ULONG_PTR DWORD_PTR,*PDWORD_PTR;
  __extension__ typedef long long LONG64,*PLONG64;
  __extension__ typedef unsigned long long ULONG64,*PULONG64;
  __extension__ typedef unsigned long long DWORD64,*PDWORD64;
  __extension__ typedef ULONG_PTR KAFFINITY;
  __extension__ typedef KAFFINITY *PKAFFINITY;
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);
  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;
  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
  char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
  char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;
       
  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);
       
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);
  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
  wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strset_s(char *_Dst,size_t _DstSize,int _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcpy_s(char *_Dst, rsize_t _SizeInBytes, const char *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncpy_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncpy_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) strtok_s(char *_Str,const char *_Delim,char **_Context);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcat_s(char *_Dst, rsize_t _SizeInBytes, const char * _Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t *_Dst, rsize_t _SizeInWords, const wchar_t *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t *_Src);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncpy_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncpy_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val, size_t _Count,_locale_t _Locale);
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) size_t __attribute__((__cdecl__)) wcsnlen_s(const wchar_t * _src, size_t _count) {
    return _src ? wcsnlen(_src, _count) : 0;
  }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
typedef void *PVOID;
typedef void * PVOID64;
typedef PVOID HANDLE;
typedef HANDLE *PHANDLE;
typedef char CHAR;
typedef short SHORT;
typedef long LONG;
typedef int INT;
typedef double DOUBLE;
typedef unsigned char UCHAR, *PUCHAR;
typedef unsigned short USHORT, *PUSHORT;
typedef unsigned long ULONG, *PULONG;
typedef const UCHAR *PCUCHAR;
typedef const USHORT *PCUSHORT;
typedef const ULONG *PCULONG;
typedef UCHAR FCHAR;
typedef USHORT FSHORT;
typedef ULONG FLONG;
typedef UCHAR BOOLEAN, *PBOOLEAN;
typedef ULONG LOGICAL;
typedef ULONG *PLOGICAL;
typedef SHORT *PSHORT;
typedef LONG *PLONG;
typedef LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
typedef signed char SCHAR;
typedef SCHAR *PSCHAR;
typedef int WINBOOL;
       
typedef int BOOL;
typedef WINBOOL *PBOOL;
typedef WINBOOL *LPBOOL;
       
typedef LONG HRESULT;
__extension__ typedef long long LONGLONG, *PLONGLONG;
__extension__ typedef unsigned long long ULONGLONG, *PULONGLONG;
typedef ULONGLONG DWORDLONG, *PDWORDLONG;
typedef LONGLONG USN;
typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef CHAR *PSZ;
typedef const char *PCSZ;
typedef wchar_t WCHAR;
typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;
typedef char CCHAR, *PCCHAR;
typedef short CSHORT, *PCSHORT;
typedef ULONG CLONG, *PCLONG;
typedef ULONG LCID;
typedef PULONG PLCID;
typedef USHORT LANGID;
typedef struct _QUAD {
  __extension__ union {
    __extension__ long long UseThisFieldToCopy;
    double DoNotUseThisField;
  } ;
} QUAD, *PQUAD, UQUAD, *PUQUAD;
typedef union _LARGE_INTEGER {
  __extension__ struct {
    ULONG LowPart;
    LONG HighPart;
  } ;
  struct {
    ULONG LowPart;
    LONG HighPart;
  } u;
  LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;
typedef union _ULARGE_INTEGER {
  __extension__ struct {
    ULONG LowPart;
    ULONG HighPart;
  } ;
  struct {
    ULONG LowPart;
    ULONG HighPart;
  } u;
  ULONGLONG QuadPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;
typedef struct _LUID {
  ULONG LowPart;
  LONG HighPart;
} LUID, *PLUID;
typedef LARGE_INTEGER PHYSICAL_ADDRESS, *PPHYSICAL_ADDRESS;
typedef struct _UNICODE_STRING {
  USHORT Length;
  USHORT MaximumLength;
  PWSTR Buffer;
} UNICODE_STRING, *PUNICODE_STRING;
typedef const UNICODE_STRING* PCUNICODE_STRING;
typedef struct _CSTRING {
  USHORT Length;
  USHORT MaximumLength;
  const CHAR *Buffer;
} CSTRING, *PCSTRING;
typedef struct _STRING {
  USHORT Length;
  USHORT MaximumLength;
  PCHAR Buffer;
} STRING, *PSTRING;
typedef STRING ANSI_STRING;
typedef PSTRING PANSI_STRING;
typedef STRING OEM_STRING;
typedef PSTRING POEM_STRING;
typedef const STRING* PCOEM_STRING;
typedef STRING CANSI_STRING;
typedef PSTRING PCANSI_STRING;
typedef struct _STRING32 {
  USHORT Length;
  USHORT MaximumLength;
  ULONG Buffer;
} STRING32, *PSTRING32,
  UNICODE_STRING32, *PUNICODE_STRING32,
  ANSI_STRING32, *PANSI_STRING32;
typedef struct _STRING64 {
  USHORT Length;
  USHORT MaximumLength;
  ULONGLONG Buffer;
} STRING64, *PSTRING64,
  UNICODE_STRING64, *PUNICODE_STRING64,
  ANSI_STRING64, *PANSI_STRING64;
typedef struct _OBJECT_ATTRIBUTES {
  ULONG Length;
  HANDLE RootDirectory;
  PUNICODE_STRING ObjectName;
  ULONG Attributes;
  PVOID SecurityDescriptor;
  PVOID SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;
typedef const OBJECT_ATTRIBUTES *PCOBJECT_ATTRIBUTES;
typedef enum _NT_PRODUCT_TYPE {
  NtProductWinNt = 1,
  NtProductLanManNt,
  NtProductServer
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;
typedef enum _EVENT_TYPE {
  NotificationEvent,
  SynchronizationEvent
} EVENT_TYPE;
typedef enum _TIMER_TYPE {
  NotificationTimer,
  SynchronizationTimer
} TIMER_TYPE;
typedef enum _WAIT_TYPE {
  WaitAll,
  WaitAny
} WAIT_TYPE;
typedef struct _LIST_ENTRY {
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;
typedef struct LIST_ENTRY32 {
  ULONG Flink;
  ULONG Blink;
} LIST_ENTRY32, *PLIST_ENTRY32;
typedef struct LIST_ENTRY64 {
  ULONGLONG Flink;
  ULONGLONG Blink;
} LIST_ENTRY64, *PLIST_ENTRY64;
typedef struct _SINGLE_LIST_ENTRY {
  struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
typedef struct _PROCESSOR_NUMBER {
  USHORT Group;
  UCHAR Number;
  UCHAR Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;
struct _CONTEXT;
struct _EXCEPTION_RECORD;
typedef int
( *PEXCEPTION_ROUTINE)(
  struct _EXCEPTION_RECORD *ExceptionRecord,
  PVOID EstablisherFrame,
  struct _CONTEXT *ContextRecord,
  PVOID DispatcherContext);
typedef struct _GROUP_AFFINITY {
  KAFFINITY Mask;
  USHORT Group;
  USHORT Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
       
typedef struct _GUID {
  unsigned long Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char Data4[8];
} GUID;
typedef GUID *LPGUID;
typedef const GUID *LPCGUID;
typedef GUID IID;
typedef IID *LPIID;
typedef GUID CLSID;
typedef CLSID *LPCLSID;
typedef GUID FMTID;
typedef FMTID *LPFMTID;
typedef GUID UOW, *PUOW;
typedef GUID *PGUID;
       
typedef enum _DPFLTR_TYPE {
  DPFLTR_SYSTEM_ID = 0,
  DPFLTR_SMSS_ID = 1,
  DPFLTR_SETUP_ID = 2,
  DPFLTR_NTFS_ID = 3,
  DPFLTR_FSTUB_ID = 4,
  DPFLTR_CRASHDUMP_ID = 5,
  DPFLTR_CDAUDIO_ID = 6,
  DPFLTR_CDROM_ID = 7,
  DPFLTR_CLASSPNP_ID = 8,
  DPFLTR_DISK_ID = 9,
  DPFLTR_REDBOOK_ID = 10,
  DPFLTR_STORPROP_ID = 11,
  DPFLTR_SCSIPORT_ID = 12,
  DPFLTR_SCSIMINIPORT_ID = 13,
  DPFLTR_CONFIG_ID = 14,
  DPFLTR_I8042PRT_ID = 15,
  DPFLTR_SERMOUSE_ID = 16,
  DPFLTR_LSERMOUS_ID = 17,
  DPFLTR_KBDHID_ID = 18,
  DPFLTR_MOUHID_ID = 19,
  DPFLTR_KBDCLASS_ID = 20,
  DPFLTR_MOUCLASS_ID = 21,
  DPFLTR_TWOTRACK_ID = 22,
  DPFLTR_WMILIB_ID = 23,
  DPFLTR_ACPI_ID = 24,
  DPFLTR_AMLI_ID = 25,
  DPFLTR_HALIA64_ID = 26,
  DPFLTR_VIDEO_ID = 27,
  DPFLTR_SVCHOST_ID = 28,
  DPFLTR_VIDEOPRT_ID = 29,
  DPFLTR_TCPIP_ID = 30,
  DPFLTR_DMSYNTH_ID = 31,
  DPFLTR_NTOSPNP_ID = 32,
  DPFLTR_FASTFAT_ID = 33,
  DPFLTR_SAMSS_ID = 34,
  DPFLTR_PNPMGR_ID = 35,
  DPFLTR_NETAPI_ID = 36,
  DPFLTR_SCSERVER_ID = 37,
  DPFLTR_SCCLIENT_ID = 38,
  DPFLTR_SERIAL_ID = 39,
  DPFLTR_SERENUM_ID = 40,
  DPFLTR_UHCD_ID = 41,
  DPFLTR_RPCPROXY_ID = 42,
  DPFLTR_AUTOCHK_ID = 43,
  DPFLTR_DCOMSS_ID = 44,
  DPFLTR_UNIMODEM_ID = 45,
  DPFLTR_SIS_ID = 46,
  DPFLTR_FLTMGR_ID = 47,
  DPFLTR_WMICORE_ID = 48,
  DPFLTR_BURNENG_ID = 49,
  DPFLTR_IMAPI_ID = 50,
  DPFLTR_SXS_ID = 51,
  DPFLTR_FUSION_ID = 52,
  DPFLTR_IDLETASK_ID = 53,
  DPFLTR_SOFTPCI_ID = 54,
  DPFLTR_TAPE_ID = 55,
  DPFLTR_MCHGR_ID = 56,
  DPFLTR_IDEP_ID = 57,
  DPFLTR_PCIIDE_ID = 58,
  DPFLTR_FLOPPY_ID = 59,
  DPFLTR_FDC_ID = 60,
  DPFLTR_TERMSRV_ID = 61,
  DPFLTR_W32TIME_ID = 62,
  DPFLTR_PREFETCHER_ID = 63,
  DPFLTR_RSFILTER_ID = 64,
  DPFLTR_FCPORT_ID = 65,
  DPFLTR_PCI_ID = 66,
  DPFLTR_DMIO_ID = 67,
  DPFLTR_DMCONFIG_ID = 68,
  DPFLTR_DMADMIN_ID = 69,
  DPFLTR_WSOCKTRANSPORT_ID = 70,
  DPFLTR_VSS_ID = 71,
  DPFLTR_PNPMEM_ID = 72,
  DPFLTR_PROCESSOR_ID = 73,
  DPFLTR_DMSERVER_ID = 74,
  DPFLTR_SR_ID = 75,
  DPFLTR_INFINIBAND_ID = 76,
  DPFLTR_IHVDRIVER_ID = 77,
  DPFLTR_IHVVIDEO_ID = 78,
  DPFLTR_IHVAUDIO_ID = 79,
  DPFLTR_IHVNETWORK_ID = 80,
  DPFLTR_IHVSTREAMING_ID = 81,
  DPFLTR_IHVBUS_ID = 82,
  DPFLTR_HPS_ID = 83,
  DPFLTR_RTLTHREADPOOL_ID = 84,
  DPFLTR_LDR_ID = 85,
  DPFLTR_TCPIP6_ID = 86,
  DPFLTR_ISAPNP_ID = 87,
  DPFLTR_SHPC_ID = 88,
  DPFLTR_STORPORT_ID = 89,
  DPFLTR_STORMINIPORT_ID = 90,
  DPFLTR_PRINTSPOOLER_ID = 91,
  DPFLTR_VSSDYNDISK_ID = 92,
  DPFLTR_VERIFIER_ID = 93,
  DPFLTR_VDS_ID = 94,
  DPFLTR_VDSBAS_ID = 95,
  DPFLTR_VDSDYN_ID = 96,
  DPFLTR_VDSDYNDR_ID = 97,
  DPFLTR_VDSLDR_ID = 98,
  DPFLTR_VDSUTIL_ID = 99,
  DPFLTR_DFRGIFC_ID = 100,
  DPFLTR_DEFAULT_ID = 101,
  DPFLTR_MM_ID = 102,
  DPFLTR_DFSC_ID = 103,
  DPFLTR_WOW64_ID = 104,
  DPFLTR_ALPC_ID = 105,
  DPFLTR_WDI_ID = 106,
  DPFLTR_PERFLIB_ID = 107,
  DPFLTR_KTM_ID = 108,
  DPFLTR_IOSTRESS_ID = 109,
  DPFLTR_HEAP_ID = 110,
  DPFLTR_WHEA_ID = 111,
  DPFLTR_USERGDI_ID = 112,
  DPFLTR_MMCSS_ID = 113,
  DPFLTR_TPM_ID = 114,
  DPFLTR_THREADORDER_ID = 115,
  DPFLTR_ENVIRON_ID = 116,
  DPFLTR_EMS_ID = 117,
  DPFLTR_WDT_ID = 118,
  DPFLTR_FVEVOL_ID = 119,
  DPFLTR_NDIS_ID = 120,
  DPFLTR_NVCTRACE_ID = 121,
  DPFLTR_LUAFV_ID = 122,
  DPFLTR_APPCOMPAT_ID = 123,
  DPFLTR_USBSTOR_ID = 124,
  DPFLTR_SBP2PORT_ID = 125,
  DPFLTR_COVERAGE_ID = 126,
  DPFLTR_CACHEMGR_ID = 127,
  DPFLTR_MOUNTMGR_ID = 128,
  DPFLTR_CFR_ID = 129,
  DPFLTR_TXF_ID = 130,
  DPFLTR_KSECDD_ID = 131,
  DPFLTR_FLTREGRESS_ID = 132,
  DPFLTR_MPIO_ID = 133,
  DPFLTR_MSDSM_ID = 134,
  DPFLTR_UDFS_ID = 135,
  DPFLTR_PSHED_ID = 136,
  DPFLTR_STORVSP_ID = 137,
  DPFLTR_LSASS_ID = 138,
  DPFLTR_SSPICLI_ID = 139,
  DPFLTR_CNG_ID = 140,
  DPFLTR_EXFAT_ID = 141,
  DPFLTR_FILETRACE_ID = 142,
  DPFLTR_XSAVE_ID = 143,
  DPFLTR_SE_ID = 144,
  DPFLTR_DRIVEEXTENDER_ID = 145,
  DPFLTR_ENDOFTABLE_ID
} DPFLTR_TYPE;
#pragma pack(push,_CRT_PACKING)
  typedef __attribute__ ((__aligned__ (16))) struct _SETJMP_FLOAT128 {
    __extension__ unsigned long long Part[2];
  } SETJMP_FLOAT128;
  typedef SETJMP_FLOAT128 _JBTYPE;
  typedef struct _JUMP_BUFFER {
    __extension__ unsigned long long Frame;
    __extension__ unsigned long long Rbx;
    __extension__ unsigned long long Rsp;
    __extension__ unsigned long long Rbp;
    __extension__ unsigned long long Rsi;
    __extension__ unsigned long long Rdi;
    __extension__ unsigned long long R12;
    __extension__ unsigned long long R13;
    __extension__ unsigned long long R14;
    __extension__ unsigned long long R15;
    __extension__ unsigned long long Rip;
    __extension__ unsigned long long Spare;
    SETJMP_FLOAT128 Xmm6;
    SETJMP_FLOAT128 Xmm7;
    SETJMP_FLOAT128 Xmm8;
    SETJMP_FLOAT128 Xmm9;
    SETJMP_FLOAT128 Xmm10;
    SETJMP_FLOAT128 Xmm11;
    SETJMP_FLOAT128 Xmm12;
    SETJMP_FLOAT128 Xmm13;
    SETJMP_FLOAT128 Xmm14;
    SETJMP_FLOAT128 Xmm15;
  } _JUMP_BUFFER;
  typedef _JBTYPE jmp_buf[16];
void * __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) mingw_getsp (void);
  int __attribute__((__cdecl__)) __attribute__ ((__nothrow__,__returns_twice__)) _setjmp(jmp_buf _Buf, void *_Ctx);
  int __attribute__((__cdecl__)) __attribute__ ((__nothrow__,__returns_twice__)) _setjmp3(jmp_buf _Buf, void *_Ctx);
  __attribute__((noreturn)) __attribute__ ((__nothrow__)) void __attribute__((__cdecl__)) ms_longjmp(jmp_buf _Buf,int _Value) ;
  __attribute__((noreturn)) __attribute__ ((__nothrow__)) void __attribute__((__cdecl__)) longjmp(jmp_buf _Buf,int _Value);
#pragma pack(pop)
  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);
  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);
  __attribute__ ((__dllimport__)) extern unsigned long __attribute__((__cdecl__)) __threadid(void);
  __attribute__ ((__dllimport__)) extern uintptr_t __attribute__((__cdecl__)) __threadhandle(void);
unsigned long _lrotl(unsigned long __X, int __C);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long _lrotl(unsigned long __X, int __C)
{
  return (__X << __C) | (__X >> ((sizeof(long) * 8) - __C));
}
unsigned long _lrotr(unsigned long __X, int __C);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long _lrotr(unsigned long __X, int __C)
{
  return (__X >> __C) | (__X << ((sizeof(long) * 8) - __C));
}
void __faststorefence(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __faststorefence(void) {
    __builtin_ia32_sfence();
}
__extension__ void __stosq(unsigned long long *, unsigned long long, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosq(unsigned long long *Dest, unsigned long long Data, size_t Count) { /*__asm__*/ }
__extension__ unsigned char _interlockedbittestandset64(long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandset64(long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char _interlockedbittestandreset64(long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandreset64(long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char _interlockedbittestandcomplement64(long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandcomplement64(long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char InterlockedBitTestAndSet64(volatile long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndSet64(volatile long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char InterlockedBitTestAndReset64(volatile long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndReset64(volatile long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char InterlockedBitTestAndComplement64(volatile long long *a, long long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndComplement64(volatile long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ long long _InterlockedAnd64(long long volatile *, long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedAnd64(volatile long long *Destination, long long Value) { return __sync_fetch_and_and(Destination, Value); }
__extension__ long long _InterlockedOr64(long long volatile *, long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedOr64(volatile long long *Destination, long long Value) { return __sync_fetch_and_or(Destination, Value); }
__extension__ long long _InterlockedXor64(long long volatile *, long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedXor64(volatile long long *Destination, long long Value) { return __sync_fetch_and_xor(Destination, Value); }
__extension__ long long _InterlockedIncrement64(long long volatile *Addend);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedIncrement64(long long volatile *Addend) {
    return __sync_add_and_fetch(Addend, 1);
}
__extension__ long long _InterlockedDecrement64(long long volatile *Addend);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedDecrement64(long long volatile *Addend) {
    return __sync_sub_and_fetch(Addend, 1);
}
__extension__ long long _InterlockedExchange64(long long volatile *Target, long long Value);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedExchange64(long long volatile *Target, long long Value) {
    return __sync_lock_test_and_set(Target, Value);
}
__extension__ long long _InterlockedExchangeAdd64(long long volatile *Addend, long long Value);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedExchangeAdd64(long long volatile *Addend, long long Value) {
    return __sync_fetch_and_add(Addend, Value);
}
unsigned char __readgsbyte(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char __readgsbyte(unsigned long Offset) { unsigned char ret; /*__asm__*/ return ret; }
unsigned short __readgsword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned short __readgsword(unsigned long Offset) { unsigned short ret; /*__asm__*/ return ret; }
unsigned long __readgsdword(unsigned long Offset);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long __readgsdword(unsigned long Offset) { unsigned long ret; /*__asm__*/ return ret; }
__extension__ unsigned long long __readgsqword(unsigned long Offset);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readgsqword(unsigned long Offset) { unsigned long long ret; /*__asm__*/ return ret; }
void __writegsbyte(unsigned long Offset,unsigned char Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsbyte(unsigned long Offset, unsigned char Data) { /*__asm__*/ }
void __writegsword(unsigned long Offset,unsigned short Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsword(unsigned long Offset, unsigned short Data) { /*__asm__*/ }
void __writegsdword(unsigned long Offset,unsigned long Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsdword(unsigned long Offset, unsigned long Data) { /*__asm__*/ }
__extension__ void __writegsqword(unsigned long Offset,unsigned long long Data);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writegsqword(unsigned long Offset, unsigned long long Data) { /*__asm__*/ }
__extension__ unsigned char _BitScanForward64(unsigned long *Index, unsigned long long Mask);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanForward64(unsigned long *Index, unsigned long long Mask) { unsigned long long n; /*__asm__*/ *Index = n; return Mask!=0; }
__extension__ unsigned char _BitScanReverse64(unsigned long *Index, unsigned long long Mask);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanReverse64(unsigned long *Index, unsigned long long Mask) { unsigned long long n; /*__asm__*/ *Index = n; return Mask!=0; }
__extension__ unsigned char _bittest64(long long const *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittest64(const long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char _bittestandset64(long long *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandset64(long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char _bittestandreset64(long long *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandreset64(long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned char _bittestandcomplement64(long long *a, long long b);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandcomplement64(long long *Base, long long Offset) { unsigned char old; /*__asm__*/ return old; }
__extension__ unsigned long long __readcr0(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readcr0(void) { unsigned long long value; /*__asm__*/ return value; }
__extension__ unsigned long long __readcr2(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readcr2(void) { unsigned long long value; /*__asm__*/ return value; }
__extension__ unsigned long long __readcr3(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readcr3(void) { unsigned long long value; /*__asm__*/ return value; }
__extension__ unsigned long long __readcr4(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readcr4(void) { unsigned long long value; /*__asm__*/ return value; }
__extension__ unsigned long long __readcr8(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readcr8(void) { unsigned long long value; /*__asm__*/ return value; }
__extension__ void __writecr0(unsigned long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writecr0(unsigned long long Data) { /*__asm__*/ }
__extension__ void __writecr3(unsigned long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writecr3(unsigned long long Data) { /*__asm__*/ }
__extension__ void __writecr4(unsigned long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writecr4(unsigned long long Data) { /*__asm__*/ }
__extension__ void __writecr8(unsigned long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writecr8(unsigned long long Data) { /*__asm__*/ }
__extension__ void __movsq(unsigned long long *Dest, unsigned long long const *Source, size_t Count);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsq(unsigned long long *Destination, unsigned long long const *Source, size_t Count) { /*__asm__*/ }
unsigned long long _umul128(unsigned long long, unsigned long long, unsigned long long *);
long long _mul128(long long, long long, long long *);
unsigned long long __shiftleft128(unsigned long long LowPart, unsigned long long HighPart, unsigned char Shift);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __shiftleft128 (unsigned long long LowPart, unsigned long long HighPart, unsigned char Shift)
{
   unsigned long long ret;
   __asm__ ("shld {%[Shift],%[LowPart],%[HighPart]|%[HighPart], %[LowPart], %[Shift]}"
      : [ret] "=r" (ret)
      : [LowPart] "r" (LowPart), [HighPart] "0" (HighPart), [Shift] "Jc" (Shift)
      : "cc");
   return ret;
}
unsigned long long __shiftright128 (unsigned long long LowPart, unsigned long long HighPart, unsigned char Shift);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __shiftright128 (unsigned long long LowPart, unsigned long long HighPart, unsigned char Shift)
{
   unsigned long long ret;
   __asm__ ("shrd {%[Shift],%[HighPart],%[LowPart]|%[LowPart], %[HighPart], %[Shift]}"
      : [ret] "=r" (ret)
      : [LowPart] "0" (LowPart), [HighPart] "r" (HighPart), [Shift] "Jc" (Shift)
      : "cc");
   return ret;
}
long _InterlockedAnd(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedAnd(volatile long *Destination, long Value) { return __sync_fetch_and_and(Destination, Value); }
long _InterlockedOr(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedOr(volatile long *Destination, long Value) { return __sync_fetch_and_or(Destination, Value); }
long _InterlockedXor(long volatile *, long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedXor(volatile long *Destination, long Value) { return __sync_fetch_and_xor(Destination, Value); }
short _InterlockedIncrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedIncrement16(short volatile *Addend) {
    return __sync_add_and_fetch(Addend, 1);
}
short _InterlockedDecrement16(short volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedDecrement16(short volatile *Addend) {
    return __sync_sub_and_fetch(Addend, 1);
}
short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
short _InterlockedCompareExchange16(short volatile *Destination, short ExChange, short Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
long _InterlockedExchangeAdd(long volatile *Addend, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchangeAdd(long volatile *Addend, long Value) {
    return __sync_fetch_and_add(Addend, Value);
}
long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedCompareExchange(long volatile *Destination, long ExChange, long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
long _InterlockedIncrement(long volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedIncrement(long volatile *Addend) {
   return __sync_add_and_fetch(Addend, 1);
}
long _InterlockedDecrement(long volatile *Addend);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedDecrement(long volatile *Addend) {
   return __sync_sub_and_fetch(Addend, 1);
}
long _InterlockedExchange(long volatile *Target, long Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long _InterlockedExchange(long volatile *Target, long Value) {
    return __sync_lock_test_and_set(Target, Value);
}
__extension__ long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand);
__extension__ extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
long long _InterlockedCompareExchange64(long long volatile *Destination, long long ExChange, long long Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
void *_InterlockedCompareExchangePointer(void * volatile *Destination, void *ExChange, void *Comperand);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedCompareExchangePointer(void *volatile *Destination, void *ExChange, void *Comperand) {
    return __sync_val_compare_and_swap(Destination, Comperand, ExChange);
}
void *_InterlockedExchangePointer(void *volatile *Target,void *Value);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void *_InterlockedExchangePointer(void *volatile *Target,void *Value) {
    return __sync_lock_test_and_set(Target, Value);
}
void __int2c(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __int2c(void) {
    /*__asm__*/
}
void __stosb(unsigned char *, unsigned char, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosb(unsigned char *Dest, unsigned char Data, size_t Count) { /*__asm__*/ }
void __stosw(unsigned short *, unsigned short, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosw(unsigned short *Dest, unsigned short Data, size_t Count) { /*__asm__*/ }
void __stosd(unsigned long *, unsigned long, size_t);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __stosd(unsigned long *Dest, unsigned long Data, size_t Count) { /*__asm__*/ }
unsigned char _interlockedbittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandset(long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char _interlockedbittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandreset(long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char _interlockedbittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _interlockedbittestandcomplement(long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char InterlockedBitTestAndSet(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndSet(volatile long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char InterlockedBitTestAndReset(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndReset(volatile long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char InterlockedBitTestAndComplement(volatile long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char InterlockedBitTestAndComplement(volatile long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanForward(unsigned long *Index, unsigned long Mask) { unsigned long n; /*__asm__*/ *Index = n; return Mask!=0; }
unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _BitScanReverse(unsigned long *Index, unsigned long Mask) { unsigned long n; /*__asm__*/ *Index = n; return Mask!=0; }
unsigned char _bittest(long const *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittest(const long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char _bittestandset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandset(long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char _bittestandreset(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandreset(long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char _bittestandcomplement(long *a, long b);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char _bittestandcomplement(long *Base, long Offset) { unsigned char old; /*__asm__*/ return old; }
unsigned char __inbyte(unsigned short Port);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned char __inbyte(unsigned short Port) { unsigned char value; /*__asm__*/ return value; }
unsigned short __inword(unsigned short Port);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned short __inword(unsigned short Port) { unsigned short value; /*__asm__*/ return value; }
unsigned long __indword(unsigned short Port);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long __indword(unsigned short Port) { unsigned long value; /*__asm__*/ return value; }
void __outbyte(unsigned short Port, unsigned char Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __outbyte(unsigned short Port, unsigned char Data) { /*__asm__*/ }
void __outword(unsigned short Port, unsigned short Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __outword(unsigned short Port, unsigned short Data) { /*__asm__*/ }
void __outdword(unsigned short Port, unsigned long Data);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __outdword(unsigned short Port, unsigned long Data) { /*__asm__*/ }
void __inbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __inbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count) { /*__asm__*/ }
void __inwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __inwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count) { /*__asm__*/ }
void __indwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __indwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count) { /*__asm__*/ }
void __outbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __outbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count) { /*__asm__*/ }
void __outwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __outwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count) { /*__asm__*/ }
void __outdwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __outdwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count) { /*__asm__*/ }
void __cpuid(int CPUInfo[4], int InfoType);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __cpuid(int CPUInfo[4], int InfoType) {
   __asm__ __volatile__ (
      "cpuid"
      : "=a" (CPUInfo [0]), "=b" (CPUInfo [1]), "=c" (CPUInfo [2]), "=d" (CPUInfo [3])
      : "a" (InfoType));
}
__extension__ unsigned long long __readmsr(unsigned long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
unsigned long long __readmsr(unsigned long msr)
{
   unsigned long long val1, val2;
   __asm__ __volatile__(
      "rdmsr"
      : "=a" (val1), "=d" (val2)
      : "c" (msr));
   return ((unsigned long long) val1) | (((unsigned long long)val2) << 32);
}
__extension__ void __writemsr(unsigned long, unsigned long long);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __writemsr(unsigned long msr, unsigned long long Value)
{
   unsigned long val1 = Value, val2 = Value >> 32;
   __asm__ __volatile__ (
      "wrmsr"
      :
      : "c" (msr), "a" (val1), "d" (val2));
}
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsb(unsigned char *Destination, unsigned char const *Source, size_t Count) { /*__asm__*/ }
void __movsw(unsigned short *Dest, unsigned short const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsw(unsigned short *Destination, unsigned short const *Source, size_t Count) { /*__asm__*/ }
void __movsd(unsigned long *Dest, unsigned long const *Source, size_t Count);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void __movsd(unsigned long *Destination, unsigned long const *Source, size_t Count) { /*__asm__*/ }
  extern unsigned int __builtin_ia32_crc32qi (unsigned int, unsigned char);
  extern unsigned int __builtin_ia32_crc32hi (unsigned int, unsigned short);
  extern unsigned int __builtin_ia32_crc32si (unsigned int, unsigned int);
#pragma pack(push,_CRT_PACKING)
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;
  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;
#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()
  typedef struct {
    double x;
  } _CRT_DOUBLE;
  typedef struct {
    float f;
  } _CRT_FLOAT;
       
  typedef struct {
    long double x;
  } _LONGDOUBLE;
       
#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
  extern int * __imp___mb_cur_max;
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);
  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);
  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);
  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);
  extern __attribute__ ((__dllimport__)) char *_sys_errlist[1];
  extern __attribute__ ((__dllimport__)) int _sys_nerr;
  extern int * __imp___argc;
  extern char *** __imp___argv;
  extern wchar_t *** __imp___wargv;
  extern char *** __imp__environ;
  extern wchar_t *** __imp__wenviron;
  extern char ** __imp__pgmptr;
  extern wchar_t ** __imp__wpgmptr;
  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);
  extern int * __imp__fmode;
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);
  extern unsigned int * __imp__osplatform;
  extern unsigned int * __imp__osver;
  extern unsigned int * __imp__winver;
  extern unsigned int * __imp__winmajor;
  extern unsigned int * __imp__winminor;
  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));
       
  void __attribute__((__cdecl__)) __attribute__((noreturn)) abort(void);
       
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);
  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);
  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }
  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));
  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);
  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);
  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
  double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ nptr, char ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );
  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  int __attribute__((__cdecl__)) system(const char *_Command);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;
  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);
  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       
  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;
  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;
  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);
  typedef struct { __extension__ long long quot, rem; } lldiv_t;
  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);
  __extension__ long long __attribute__((__cdecl__)) llabs(long long);
  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);
  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);
#pragma pack(pop)
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _putenv_s(const char *_Name,const char *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
 
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
 
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) qsort_s(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(void *,const void *,const void *),void *_Context);
#pragma pack(push,_CRT_PACKING)
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;
  extern unsigned int _amblksiz;
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }
    }
  }
#pragma pack(pop)
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsfd (int __X)
{
  return __builtin_ctz (__X);
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsrd (int __X)
{
  return __builtin_ia32_bsrsi (__X);
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bswapd (int __X)
{
  return __builtin_bswap32 (__X);
}
#pragma GCC push_options
#pragma GCC target("sse4.2")
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32b (unsigned int __C, unsigned char __V)
{
  return __builtin_ia32_crc32qi (__C, __V);
}
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32w (unsigned int __C, unsigned short __V)
{
  return __builtin_ia32_crc32hi (__C, __V);
}
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32d (unsigned int __C, unsigned int __V)
{
  return __builtin_ia32_crc32si (__C, __V);
}
#pragma GCC pop_options
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__popcntd (unsigned int __X)
{
  return __builtin_popcount (__X);
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdpmc (int __S)
{
  return __builtin_ia32_rdpmc (__S);
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdtsc (void)
{
  return __builtin_ia32_rdtsc ();
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rdtscp (unsigned int *__A)
{
  return __builtin_ia32_rdtscp (__A);
}
extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rolb (unsigned char __X, int __C)
{
  return __builtin_ia32_rolqi (__X, __C);
}
extern __inline unsigned short
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rolw (unsigned short __X, int __C)
{
  return __builtin_ia32_rolhi (__X, __C);
}
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rold (unsigned int __X, int __C)
{
  return (__X << __C) | (__X >> (32 - __C));
}
extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rorb (unsigned char __X, int __C)
{
  return __builtin_ia32_rorqi (__X, __C);
}
extern __inline unsigned short
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rorw (unsigned short __X, int __C)
{
  return __builtin_ia32_rorhi (__X, __C);
}
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rord (unsigned int __X, int __C)
{
  return (__X >> __C) | (__X << (32 - __C));
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__pause (void)
{
  __builtin_ia32_pause ();
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsfq (long long __X)
{
  return __builtin_ctzll (__X);
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bsrq (long long __X)
{
  return __builtin_ia32_bsrdi (__X);
}
extern __inline long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__bswapq (long long __X)
{
  return __builtin_bswap64 (__X);
}
#pragma GCC push_options
#pragma GCC target("sse4.2")
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__crc32q (unsigned long long __C, unsigned long long __V)
{
  return __builtin_ia32_crc32di (__C, __V);
}
#pragma GCC pop_options
extern __inline long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__popcntq (unsigned long long __X)
{
  return __builtin_popcountll (__X);
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rolq (unsigned long long __X, int __C)
{
  return (__X << __C) | (__X >> (64 - __C));
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__rorq (unsigned long long __X, int __C)
{
  return (__X >> __C) | (__X << (64 - __C));
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__readeflags (void)
{
  return __builtin_ia32_readeflags_u64 ();
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
__writeeflags (unsigned long long X)
{
  __builtin_ia32_writeeflags_u64 (X);
}
typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));
typedef int __v2si __attribute__ ((__vector_size__ (8)));
typedef short __v4hi __attribute__ ((__vector_size__ (8)));
typedef char __v8qi __attribute__ ((__vector_size__ (8)));
typedef long long __v1di __attribute__ ((__vector_size__ (8)));
typedef float __v2sf __attribute__ ((__vector_size__ (8)));
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("rtm")
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xbegin (void)
{
  return __builtin_ia32_xbegin ();
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xend (void)
{
  __builtin_ia32_xend ();
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("rtm")
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xtest (void)
{
  return __builtin_ia32_xtest ();
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("rdrnd")
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdrand16_step (unsigned short *__P)
{
  return __builtin_ia32_rdrand16_step (__P);
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdrand32_step (unsigned int *__P)
{
  return __builtin_ia32_rdrand32_step (__P);
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("fsgsbase")
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readfsbase_u32 (void)
{
  return __builtin_ia32_rdfsbase32 ();
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readfsbase_u64 (void)
{
  return __builtin_ia32_rdfsbase64 ();
}
extern __inline unsigned int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readgsbase_u32 (void)
{
  return __builtin_ia32_rdgsbase32 ();
}
extern __inline unsigned long long
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_readgsbase_u64 (void)
{
  return __builtin_ia32_rdgsbase64 ();
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writefsbase_u32 (unsigned int __B)
{
  __builtin_ia32_wrfsbase32 (__B);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writefsbase_u64 (unsigned long long __B)
{
  __builtin_ia32_wrfsbase64 (__B);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writegsbase_u32 (unsigned int __B)
{
  __builtin_ia32_wrgsbase32 (__B);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_writegsbase_u64 (unsigned long long __B)
{
  __builtin_ia32_wrgsbase64 (__B);
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("rdrnd")
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdrand64_step (unsigned long long *__P)
{
  return __builtin_ia32_rdrand64_step (__P);
}
#pragma GCC pop_options
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("fma4")
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("lwp")
extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__llwpcb (void *pcbAddress)
{
  __builtin_ia32_llwpcb (pcbAddress);
}
extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__slwpcb (void)
{
  return __builtin_ia32_slwpcb ();
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("tbm")
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcfill_u32 (unsigned int __X)
{
  return __X & (__X + 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blci_u32 (unsigned int __X)
{
  return __X | ~(__X + 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcic_u32 (unsigned int __X)
{
  return ~__X & (__X + 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcmsk_u32 (unsigned int __X)
{
  return __X ^ (__X + 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcs_u32 (unsigned int __X)
{
  return __X | (__X + 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsfill_u32 (unsigned int __X)
{
  return __X | (__X - 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsic_u32 (unsigned int __X)
{
  return ~__X | (__X - 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__t1mskc_u32 (unsigned int __X)
{
  return ~__X | (__X + 1);
}
extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzmsk_u32 (unsigned int __X)
{
  return ~__X & (__X - 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcfill_u64 (unsigned long long __X)
{
  return __X & (__X + 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blci_u64 (unsigned long long __X)
{
  return __X | ~(__X + 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcic_u64 (unsigned long long __X)
{
  return ~__X & (__X + 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcmsk_u64 (unsigned long long __X)
{
  return __X ^ (__X + 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blcs_u64 (unsigned long long __X)
{
  return __X | (__X + 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsfill_u64 (unsigned long long __X)
{
  return __X | (__X - 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__blsic_u64 (unsigned long long __X)
{
  return ~__X | (__X - 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__t1mskc_u64 (unsigned long long __X)
{
  return ~__X | (__X + 1);
}
extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
__tzmsk_u64 (unsigned long long __X)
{
  return ~__X & (__X - 1);
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("rdseed")
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdseed16_step (unsigned short *p)
{
    return __builtin_ia32_rdseed_hi_step (p);
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdseed32_step (unsigned int *p)
{
    return __builtin_ia32_rdseed_si_step (p);
}
extern __inline int
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_rdseed64_step (unsigned long long *p)
{
    return __builtin_ia32_rdseed_di_step (p);
}
#pragma GCC pop_options
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxsave (void *__P)
{
  return __builtin_ia32_fxsave (__P);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxrstor (void *__P)
{
  return __builtin_ia32_fxrstor (__P);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxsave64 (void *__P)
{
    return __builtin_ia32_fxsave64 (__P);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_fxrstor64 (void *__P)
{
    return __builtin_ia32_fxrstor64 (__P);
}
#pragma GCC push_options
#pragma GCC target("xsave")
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsave (void *__P, long long __M)
{
  return __builtin_ia32_xsave (__P, __M);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xrstor (void *__P, long long __M)
{
  return __builtin_ia32_xrstor (__P, __M);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsave64 (void *__P, long long __M)
{
  return __builtin_ia32_xsave64 (__P, __M);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xrstor64 (void *__P, long long __M)
{
  return __builtin_ia32_xrstor64 (__P, __M);
}
#pragma GCC pop_options
#pragma GCC push_options
#pragma GCC target("xsaveopt")
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsaveopt (void *__P, long long __M)
{
  return __builtin_ia32_xsaveopt (__P, __M);
}
extern __inline void
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_xsaveopt64 (void *__P, long long __M)
{
  return __builtin_ia32_xsaveopt64 (__P, __M);
}
#pragma GCC pop_options
extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_addcarryx_u32 (unsigned char __CF, unsigned int __X,
  unsigned int __Y, unsigned int *__P)
{
    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);
}
extern __inline unsigned char
__attribute__((__gnu_inline__, __always_inline__, __artificial__))
_addcarryx_u64 (unsigned char __CF, unsigned long __X,
  unsigned long __Y, unsigned long long *__P)
{
    return __builtin_ia32_addcarryx_u64 (__CF, __X, __Y, __P);
}
    int __attribute__((__cdecl__)) abs(int);
    double ceil(double);
    long __attribute__((__cdecl__)) labs(long);
   
    int __attribute__((__cdecl__)) memcmp(const void *,const void *,size_t);
    void *__attribute__((__cdecl__)) memcpy(void * __restrict__ ,const void * __restrict__ ,size_t);
    void *__attribute__((__cdecl__)) memset(void *,int,size_t);
    char *__attribute__((__cdecl__)) strcat(char *,const char *);
    int __attribute__((__cdecl__)) strcmp(const char *,const char *);
    char *__attribute__((__cdecl__)) strcpy(char * __restrict__ ,const char * __restrict__ );
    size_t __attribute__((__cdecl__)) strlen(const char *);
   
   
    wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ ,const wchar_t * __restrict__ );
    int __attribute__((__cdecl__)) wcscmp(const wchar_t *,const wchar_t *);
    wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ ,const wchar_t * __restrict__ );
    size_t __attribute__((__cdecl__)) wcslen(const wchar_t *);
 
   
   
    unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short value);
    unsigned long __attribute__((__cdecl__)) _byteswap_ulong(unsigned long value);
    __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long value);
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    void __attribute__((__cdecl__)) __debugbreak(void);
    void __attribute__((__cdecl__)) _disable(void);
   
   
    __extension__ long long __emul(int,int);
    __extension__ unsigned long long __emulu(unsigned int,unsigned int);
    void __attribute__((__cdecl__)) _enable(void);
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    __extension__ long long _InterlockedCompare64Exchange128(long long volatile *Destination,long long ExchangeHigh,long long ExchangeLow,long long Comparand);
    __extension__ long long _InterlockedCompare64Exchange128_acq(long long volatile *Destination,long long ExchangeHigh,long long ExchangeLow,long long Comparand);
    __extension__ long long _InterlockedCompare64Exchange128_rel(long long volatile *Destination,long long ExchangeHigh,long long ExchangeLow,long long Comparand);
   
   
   
   
   
   
   
   
   
    char _InterlockedOr8(char volatile *,char);
    short _InterlockedOr16(short volatile *,short);
   
   
   
   
   
   
   
   
    char _InterlockedXor8(char volatile *,char);
    short _InterlockedXor16(short volatile *,short);
   
   
   
   
   
   
   
   
    char _InterlockedAnd8(char volatile *,char);
    short _InterlockedAnd16(short volatile *,short);
   
   
   
   
   
   
   
   
   
    int __attribute__((__cdecl__)) _inp(unsigned short);
    int __attribute__((__cdecl__)) inp(unsigned short);
    unsigned long __attribute__((__cdecl__)) _inpd(unsigned short);
    unsigned long __attribute__((__cdecl__)) inpd(unsigned short);
    unsigned short __attribute__((__cdecl__)) _inpw(unsigned short);
    unsigned short __attribute__((__cdecl__)) inpw(unsigned short);
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    __extension__ unsigned long long __ll_lshift(unsigned long long,int);
    __extension__ long long __ll_rshift(long long,int);
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    int __attribute__((__cdecl__)) _outp(unsigned short,int);
    int __attribute__((__cdecl__)) outp(unsigned short,int);
    unsigned long __attribute__((__cdecl__)) _outpd(unsigned short,unsigned long);
    unsigned long __attribute__((__cdecl__)) outpd(unsigned short,unsigned long);
    unsigned short __attribute__((__cdecl__)) _outpw(unsigned short,unsigned short);
    unsigned short __attribute__((__cdecl__)) outpw(unsigned short,unsigned short);
   
   
   
   
   
   
   
   
   
    void *_ReturnAddress(void);
   
   
   
       
    unsigned int __attribute__((__cdecl__)) _rotl(unsigned int,int);
       
       
    unsigned int __attribute__((__cdecl__)) _rotr(unsigned int,int);
       
    __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long,int);
    __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long,int);
   
   
    int __attribute__((__cdecl__)) __attribute__ ((__nothrow__,__returns_twice__)) _setjmp(jmp_buf,void *);
   
    int __attribute__((__cdecl__)) __attribute__ ((__nothrow__,__returns_twice__)) _setjmpex(jmp_buf,void *);
   
   
   
   
   
   
   
   
   
    char *__attribute__((__cdecl__)) _strset(char *,int);
    char *__attribute__((__cdecl__)) strset(char *,int);
   
   
   
   
   
   
   
    __extension__ unsigned long long __ull_rshift(unsigned long long,int);
   
   
   
   
   
   
   
   
   
    void *_AddressOfReturnAddress(void);
   
   
   
   
   
   
   
    __extension__ long long __mulh(long long,long long);
    __extension__ unsigned long long __umulh(unsigned long long,unsigned long long);
    void __wbinvd(void);
    void __invlpg(void*);
    unsigned int __getcallerseflags();
    __extension__ void _mm_stream_si64x(long long *,long long);
    void __cpuid(int a[4],int b);
    __extension__ unsigned long long __readpmc(unsigned long a);
    unsigned long __segmentlimit(unsigned long a);
    __extension__ long long __attribute__((__cdecl__)) _abs64(long long);
    __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *,wchar_t);
    unsigned char _rotr8(unsigned char value,unsigned char shift);
    unsigned short _rotr16(unsigned short value,unsigned char shift);
    unsigned char _rotl8(unsigned char value,unsigned char shift);
    unsigned short _rotl16(unsigned short value,unsigned char shift);
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    void __nvreg_save_fence(void);
    void __nvreg_restore_fence(void);
    short _InterlockedCompareExchange16_np(short volatile *Destination,short Exchange,short Comparand);
    long _InterlockedCompareExchange_np (long *,long,long);
    __extension__ long long _InterlockedCompareExchange64_np(long long *,long long,long long);
    void *_InterlockedCompareExchangePointer_np (void **,void *,void *);
    __extension__ long long _InterlockedCompare64Exchange128_np(long long *Destination,long long ExchangeHigh,long long ExchangeLow,long long Comparand);
    __extension__ long long _InterlockedCompare64Exchange128_acq_np(long long *Destination,long long ExchangeHigh,long long ExchangeLow,long long Comparand);
    __extension__ long long _InterlockedCompare64Exchange128_rel_np(long long *Destination,long long ExchangeHigh,long long ExchangeLow,long long Comparand);
    long _InterlockedAnd_np(long *,long);
    char _InterlockedAnd8_np(char *,char);
    short _InterlockedAnd16_np(short *,short);
    __extension__ long long _InterlockedAnd64_np(long long *,long long);
    long _InterlockedOr_np(long *,long);
    char _InterlockedOr8_np(char *,char);
    short _InterlockedOr16_np(short *,short);
    __extension__ long long _InterlockedOr64_np(long long *,long long);
    long _InterlockedXor_np(long *,long);
    char _InterlockedXor8_np(char *,char);
    short _InterlockedXor16_np(short *,short);
    __extension__ long long _InterlockedXor64_np(long long *,long long);
struct _IRP;
struct _MDL;
struct _KAPC;
struct _KDPC;
struct _FILE_OBJECT;
struct _DMA_ADAPTER;
struct _DEVICE_OBJECT;
struct _DRIVER_OBJECT;
struct _IO_STATUS_BLOCK;
struct _DEVICE_DESCRIPTION;
struct _SCATTER_GATHER_LIST;
struct _DRIVE_LAYOUT_INFORMATION;
struct _COMPRESSED_DATA_INFO;
struct _IO_RESOURCE_DESCRIPTOR;
typedef struct _OBJECT_TYPE *POBJECT_TYPE;
typedef struct _HAL_DISPATCH_TABLE *PHAL_DISPATCH_TABLE;
typedef struct _HAL_PRIVATE_DISPATCH_TABLE *PHAL_PRIVATE_DISPATCH_TABLE;
typedef struct _CALLBACK_OBJECT *PCALLBACK_OBJECT;
typedef struct _EPROCESS *PEPROCESS;
typedef struct _ETHREAD *PETHREAD;
typedef struct _IO_TIMER *PIO_TIMER;
typedef struct _KINTERRUPT *PKINTERRUPT;
typedef struct _KPROCESS *PKPROCESS;
typedef struct _KTHREAD *PKTHREAD, *PRKTHREAD;
typedef struct _CONTEXT *PCONTEXT;
typedef struct _DMA_ADAPTER *PADAPTER_OBJECT;
//
// Intrinsics (note: taken from our winnt.h)
// FIXME: 64-bit
//
//#endif
typedef struct _RTL_BITMAP {
  ULONG SizeOfBitMap;
  PULONG Buffer;
} RTL_BITMAP, *PRTL_BITMAP;
typedef struct _RTL_BITMAP_RUN {
  ULONG StartingIndex;
  ULONG NumberOfBits;
} RTL_BITMAP_RUN, *PRTL_BITMAP_RUN;
typedef NTSTATUS
( *PRTL_QUERY_REGISTRY_ROUTINE)(
  PWSTR ValueName,
  ULONG ValueType,
  PVOID ValueData,
  ULONG ValueLength,
  PVOID Context,
  PVOID EntryContext);
typedef struct _RTL_QUERY_REGISTRY_TABLE {
  PRTL_QUERY_REGISTRY_ROUTINE QueryRoutine;
  ULONG Flags;
  PCWSTR Name;
  PVOID EntryContext;
  ULONG DefaultType;
  PVOID DefaultData;
  ULONG DefaultLength;
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE;
typedef struct _TIME_FIELDS {
  CSHORT Year;
  CSHORT Month;
  CSHORT Day;
  CSHORT Hour;
  CSHORT Minute;
  CSHORT Second;
  CSHORT Milliseconds;
  CSHORT Weekday;
} TIME_FIELDS, *PTIME_FIELDS;
typedef struct __attribute__ ((__aligned__ (16))) _SLIST_ENTRY {
  struct _SLIST_ENTRY *Next;
} SLIST_ENTRY, *PSLIST_ENTRY;
typedef struct _SLIST_ENTRY32 {
  ULONG Next;
} SLIST_ENTRY32, *PSLIST_ENTRY32;
typedef union __attribute__ ((__aligned__ (16))) _SLIST_HEADER {
  __extension__ struct {
    ULONGLONG Alignment;
    ULONGLONG Region;
  } ;
  struct {
    ULONGLONG Depth:16;
    ULONGLONG Sequence:9;
    ULONGLONG NextEntry:39;
    ULONGLONG HeaderType:1;
    ULONGLONG Init:1;
    ULONGLONG Reserved:59;
    ULONGLONG Region:3;
  } Header8;
  struct {
    ULONGLONG Depth:16;
    ULONGLONG Sequence:48;
    ULONGLONG HeaderType:1;
    ULONGLONG Init:1;
    ULONGLONG Reserved:2;
    ULONGLONG NextEntry:60;
  } Header16;
  struct {
    ULONGLONG Depth:16;
    ULONGLONG Sequence:48;
    ULONGLONG HeaderType:1;
    ULONGLONG Reserved:3;
    ULONGLONG NextEntry:60;
  } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;
typedef union _SLIST_HEADER32 {
  ULONGLONG Alignment;
  __extension__ struct {
    SLIST_ENTRY32 Next;
    USHORT Depth;
    USHORT Sequence;
  } ;
} SLIST_HEADER32, *PSLIST_HEADER32;
extern BOOLEAN __attribute__((dllimport)) NlsMbCodePageTag;
extern BOOLEAN __attribute__((dllimport)) NlsMbOemCodePageTag;
typedef BOOLEAN
(*PFN_RTL_IS_NTDDI_VERSION_AVAILABLE)(
  ULONG Version);
typedef BOOLEAN
(*PFN_RTL_IS_SERVICE_PACK_VERSION_INSTALLED)(
  ULONG Version);
typedef UCHAR KIRQL, *PKIRQL;
typedef CCHAR KPROCESSOR_MODE;
typedef LONG KPRIORITY;
typedef enum _MODE {
  KernelMode,
  UserMode,
  MaximumMode
} MODE;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
  RelationProcessorCore,
  RelationNumaNode,
  RelationCache,
  RelationProcessorPackage,
  RelationGroup,
  RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;
typedef enum _PROCESSOR_CACHE_TYPE {
  CacheUnified,
  CacheInstruction,
  CacheData,
  CacheTrace
} PROCESSOR_CACHE_TYPE;
typedef struct _CACHE_DESCRIPTOR {
  UCHAR Level;
  UCHAR Associativity;
  USHORT LineSize;
  ULONG Size;
  PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
  ULONG_PTR ProcessorMask;
  LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  __extension__ union {
    struct {
      UCHAR Flags;
    } ProcessorCore;
    struct {
      ULONG NodeNumber;
    } NumaNode;
    CACHE_DESCRIPTOR Cache;
    ULONGLONG Reserved[2];
  } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef struct _PROCESSOR_RELATIONSHIP {
  UCHAR Flags;
  UCHAR Reserved[21];
  USHORT GroupCount;
  GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;
typedef struct _NUMA_NODE_RELATIONSHIP {
  ULONG NodeNumber;
  UCHAR Reserved[20];
  GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;
typedef struct _CACHE_RELATIONSHIP {
  UCHAR Level;
  UCHAR Associativity;
  USHORT LineSize;
  ULONG CacheSize;
  PROCESSOR_CACHE_TYPE Type;
  UCHAR Reserved[20];
  GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;
typedef struct _PROCESSOR_GROUP_INFO {
  UCHAR MaximumProcessorCount;
  UCHAR ActiveProcessorCount;
  UCHAR Reserved[38];
  KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;
typedef struct _GROUP_RELATIONSHIP {
  USHORT MaximumGroupCount;
  USHORT ActiveGroupCount;
  UCHAR Reserved[20];
  PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
  LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  ULONG Size;
  __extension__ union {
    PROCESSOR_RELATIONSHIP Processor;
    NUMA_NODE_RELATIONSHIP NumaNode;
    CACHE_RELATIONSHIP Cache;
    GROUP_RELATIONSHIP Group;
  } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;;
typedef struct _EXCEPTION_RECORD {
  NTSTATUS ExceptionCode;
  ULONG ExceptionFlags;
  struct _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  ULONG NumberParameters;
  ULONG_PTR ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD32 {
  NTSTATUS ExceptionCode;
  ULONG ExceptionFlags;
  ULONG ExceptionRecord;
  ULONG ExceptionAddress;
  ULONG NumberParameters;
  ULONG ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 {
  NTSTATUS ExceptionCode;
  ULONG ExceptionFlags;
  ULONG64 ExceptionRecord;
  ULONG64 ExceptionAddress;
  ULONG NumberParameters;
  ULONG __unusedAlignment;
  ULONG64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;
typedef struct _EXCEPTION_POINTERS {
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef enum _KBUGCHECK_CALLBACK_REASON {
  KbCallbackInvalid,
  KbCallbackReserved1,
  KbCallbackSecondaryDumpData,
  KbCallbackDumpIo,
  KbCallbackAddPages
} KBUGCHECK_CALLBACK_REASON;
struct _KBUGCHECK_REASON_CALLBACK_RECORD;
typedef void
( KBUGCHECK_REASON_CALLBACK_ROUTINE)(
  KBUGCHECK_CALLBACK_REASON Reason,
  struct _KBUGCHECK_REASON_CALLBACK_RECORD *Record,
  PVOID ReasonSpecificData,
  ULONG ReasonSpecificDataLength);
typedef KBUGCHECK_REASON_CALLBACK_ROUTINE *PKBUGCHECK_REASON_CALLBACK_ROUTINE;
typedef struct _KBUGCHECK_ADD_PAGES {
  PVOID Context;
  ULONG Flags;
  ULONG BugCheckCode;
  ULONG_PTR Address;
  ULONG_PTR Count;
} KBUGCHECK_ADD_PAGES, *PKBUGCHECK_ADD_PAGES;
typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA {
  PVOID InBuffer;
  ULONG InBufferLength;
  ULONG MaximumAllowed;
  GUID Guid;
  PVOID OutBuffer;
  ULONG OutBufferLength;
} KBUGCHECK_SECONDARY_DUMP_DATA, *PKBUGCHECK_SECONDARY_DUMP_DATA;
typedef enum _KBUGCHECK_DUMP_IO_TYPE {
  KbDumpIoInvalid,
  KbDumpIoHeader,
  KbDumpIoBody,
  KbDumpIoSecondaryData,
  KbDumpIoComplete
} KBUGCHECK_DUMP_IO_TYPE;
typedef struct _KBUGCHECK_DUMP_IO {
  ULONG64 Offset;
  PVOID Buffer;
  ULONG BufferLength;
  KBUGCHECK_DUMP_IO_TYPE Type;
} KBUGCHECK_DUMP_IO, *PKBUGCHECK_DUMP_IO;
typedef struct _KBUGCHECK_REASON_CALLBACK_RECORD {
  LIST_ENTRY Entry;
  PKBUGCHECK_REASON_CALLBACK_ROUTINE CallbackRoutine;
  PUCHAR Component;
  ULONG_PTR Checksum;
  KBUGCHECK_CALLBACK_REASON Reason;
  UCHAR State;
} KBUGCHECK_REASON_CALLBACK_RECORD, *PKBUGCHECK_REASON_CALLBACK_RECORD;
typedef enum _KBUGCHECK_BUFFER_DUMP_STATE {
  BufferEmpty,
  BufferInserted,
  BufferStarted,
  BufferFinished,
  BufferIncomplete
} KBUGCHECK_BUFFER_DUMP_STATE;
typedef void
( KBUGCHECK_CALLBACK_ROUTINE)(
  PVOID Buffer,
  ULONG Length);
typedef KBUGCHECK_CALLBACK_ROUTINE *PKBUGCHECK_CALLBACK_ROUTINE;
typedef struct _KBUGCHECK_CALLBACK_RECORD {
  LIST_ENTRY Entry;
  PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine;
  PVOID Buffer;
  ULONG Length;
  PUCHAR Component;
  ULONG_PTR Checksum;
  UCHAR State;
} KBUGCHECK_CALLBACK_RECORD, *PKBUGCHECK_CALLBACK_RECORD;
typedef BOOLEAN
( NMI_CALLBACK)(
  PVOID Context,
  BOOLEAN Handled);
typedef NMI_CALLBACK *PNMI_CALLBACK;
typedef enum _KE_PROCESSOR_CHANGE_NOTIFY_STATE {
  KeProcessorAddStartNotify = 0,
  KeProcessorAddCompleteNotify,
  KeProcessorAddFailureNotify
} KE_PROCESSOR_CHANGE_NOTIFY_STATE;
typedef struct _KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT {
  KE_PROCESSOR_CHANGE_NOTIFY_STATE State;
  ULONG NtNumber;
  NTSTATUS Status;
} KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT, *PKE_PROCESSOR_CHANGE_NOTIFY_CONTEXT;
typedef void
( PROCESSOR_CALLBACK_FUNCTION)(
  PVOID CallbackContext,
  PKE_PROCESSOR_CHANGE_NOTIFY_CONTEXT ChangeContext,
  PNTSTATUS OperationStatus);
typedef PROCESSOR_CALLBACK_FUNCTION *PPROCESSOR_CALLBACK_FUNCTION;
typedef enum _KINTERRUPT_POLARITY {
  InterruptPolarityUnknown,
  InterruptActiveHigh,
  InterruptActiveLow
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;
typedef enum _KPROFILE_SOURCE {
  ProfileTime,
  ProfileAlignmentFixup,
  ProfileTotalIssues,
  ProfilePipelineDry,
  ProfileLoadInstructions,
  ProfilePipelineFrozen,
  ProfileBranchInstructions,
  ProfileTotalNonissues,
  ProfileDcacheMisses,
  ProfileIcacheMisses,
  ProfileCacheMisses,
  ProfileBranchMispredictions,
  ProfileStoreInstructions,
  ProfileFpInstructions,
  ProfileIntegerInstructions,
  Profile2Issue,
  Profile3Issue,
  Profile4Issue,
  ProfileSpecialInstructions,
  ProfileTotalCycles,
  ProfileIcacheIssues,
  ProfileDcacheAccesses,
  ProfileMemoryBarrierCycles,
  ProfileLoadLinkedIssues,
  ProfileMaximum
} KPROFILE_SOURCE;
typedef enum _KWAIT_REASON {
  Executive,
  FreePage,
  PageIn,
  PoolAllocation,
  DelayExecution,
  Suspended,
  UserRequest,
  WrExecutive,
  WrFreePage,
  WrPageIn,
  WrPoolAllocation,
  WrDelayExecution,
  WrSuspended,
  WrUserRequest,
  WrEventPair,
  WrQueue,
  WrLpcReceive,
  WrLpcReply,
  WrVirtualMemory,
  WrPageOut,
  WrRendezvous,
  WrKeyedEvent,
  WrTerminated,
  WrProcessInSwap,
  WrCpuRateControl,
  WrCalloutStack,
  WrKernel,
  WrResource,
  WrPushLock,
  WrMutex,
  WrQuantumEnd,
  WrDispatchInt,
  WrPreempted,
  WrYieldExecution,
  WrFastMutex,
  WrGuardedMutex,
  WrRundown,
  MaximumWaitReason
} KWAIT_REASON;
typedef struct _KWAIT_BLOCK {
  LIST_ENTRY WaitListEntry;
  struct _KTHREAD *Thread;
  PVOID Object;
  struct _KWAIT_BLOCK *NextWaitBlock;
  USHORT WaitKey;
  UCHAR WaitType;
  volatile UCHAR BlockState;
  LONG SpareLong;
} KWAIT_BLOCK, *PKWAIT_BLOCK, *PRKWAIT_BLOCK;
typedef enum _KINTERRUPT_MODE {
  LevelSensitive,
  Latched
} KINTERRUPT_MODE;
typedef void
( KSTART_ROUTINE)(
  PVOID StartContext);
typedef KSTART_ROUTINE *PKSTART_ROUTINE;
typedef void
( *PKINTERRUPT_ROUTINE)(
  void);
typedef BOOLEAN
( KSERVICE_ROUTINE)(
  struct _KINTERRUPT *Interrupt,
  PVOID ServiceContext);
typedef KSERVICE_ROUTINE *PKSERVICE_ROUTINE;
typedef BOOLEAN
( KMESSAGE_SERVICE_ROUTINE)(
  struct _KINTERRUPT *Interrupt,
  PVOID ServiceContext,
  ULONG MessageID);
typedef KMESSAGE_SERVICE_ROUTINE *PKMESSAGE_SERVICE_ROUTINE;
typedef enum _KD_OPTION {
  KD_OPTION_SET_BLOCK_ENABLE,
} KD_OPTION;
typedef void
( *PKNORMAL_ROUTINE)(
  PVOID NormalContext ,
  PVOID SystemArgument1 ,
  PVOID SystemArgument2 );
typedef void
( *PKRUNDOWN_ROUTINE)(
  struct _KAPC *Apc);
typedef void
( *PKKERNEL_ROUTINE)(
  struct _KAPC *Apc,
  PKNORMAL_ROUTINE *NormalRoutine ,
  PVOID *NormalContext ,
  PVOID *SystemArgument1 ,
  PVOID *SystemArgument2 );
typedef struct _KAPC {
  UCHAR Type;
  UCHAR SpareByte0;
  UCHAR Size;
  UCHAR SpareByte1;
  ULONG SpareLong0;
  struct _KTHREAD *Thread;
  LIST_ENTRY ApcListEntry;
  PKKERNEL_ROUTINE KernelRoutine;
  PKRUNDOWN_ROUTINE RundownRoutine;
  PKNORMAL_ROUTINE NormalRoutine;
  PVOID NormalContext;
  PVOID SystemArgument1;
  PVOID SystemArgument2;
  CCHAR ApcStateIndex;
  KPROCESSOR_MODE ApcMode;
  BOOLEAN Inserted;
} KAPC, *PKAPC, * PRKAPC;
typedef struct _KDEVICE_QUEUE_ENTRY {
  LIST_ENTRY DeviceListEntry;
  ULONG SortKey;
  BOOLEAN Inserted;
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY,
* PRKDEVICE_QUEUE_ENTRY;
typedef PVOID PKIPI_CONTEXT;
typedef void
( *PKIPI_WORKER)(
  PKIPI_CONTEXT PacketContext,
  PVOID Parameter1 ,
  PVOID Parameter2 ,
  PVOID Parameter3 );
typedef struct _KIPI_COUNTS {
  ULONG Freeze;
  ULONG Packet;
  ULONG DPC;
  ULONG APC;
  ULONG FlushSingleTb;
  ULONG FlushMultipleTb;
  ULONG FlushEntireTb;
  ULONG GenericCall;
  ULONG ChangeColor;
  ULONG SweepDcache;
  ULONG SweepIcache;
  ULONG SweepIcacheRange;
  ULONG FlushIoBuffers;
  ULONG GratuitousDPC;
} KIPI_COUNTS, *PKIPI_COUNTS;
typedef ULONG_PTR
( KIPI_BROADCAST_WORKER)(
  ULONG_PTR Argument);
typedef KIPI_BROADCAST_WORKER *PKIPI_BROADCAST_WORKER;
typedef ULONG_PTR KSPIN_LOCK, *PKSPIN_LOCK;
typedef struct _KSPIN_LOCK_QUEUE {
  struct _KSPIN_LOCK_QUEUE *volatile Next;
  PKSPIN_LOCK volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE;
typedef struct _KLOCK_QUEUE_HANDLE {
  KSPIN_LOCK_QUEUE LockQueue;
  KIRQL OldIrql;
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE;
typedef ULONG64 KSPIN_LOCK_QUEUE_NUMBER;
typedef void
( KDEFERRED_ROUTINE)(
  struct _KDPC *Dpc,
  PVOID DeferredContext ,
  PVOID SystemArgument1 ,
  PVOID SystemArgument2 );
typedef KDEFERRED_ROUTINE *PKDEFERRED_ROUTINE;
typedef enum _KDPC_IMPORTANCE {
  LowImportance,
  MediumImportance,
  HighImportance,
  MediumHighImportance
} KDPC_IMPORTANCE;
typedef struct _KDPC {
  UCHAR Type;
  UCHAR Importance;
  volatile USHORT Number;
  LIST_ENTRY DpcListEntry;
  PKDEFERRED_ROUTINE DeferredRoutine;
  PVOID DeferredContext;
  PVOID SystemArgument1;
  PVOID SystemArgument2;
  volatile PVOID DpcData;
} KDPC, *PKDPC, * PRKDPC;
typedef struct _KDPC_WATCHDOG_INFORMATION {
  ULONG DpcTimeLimit;
  ULONG DpcTimeCount;
  ULONG DpcWatchdogLimit;
  ULONG DpcWatchdogCount;
  ULONG Reserved;
} KDPC_WATCHDOG_INFORMATION, *PKDPC_WATCHDOG_INFORMATION;
typedef struct _KDEVICE_QUEUE {
  CSHORT Type;
  CSHORT Size;
  LIST_ENTRY DeviceListHead;
  KSPIN_LOCK Lock;
  __extension__ union {
    BOOLEAN Busy;
    __extension__ struct {
      LONG64 Reserved:8;
      LONG64 Hint:56;
    } ;
  } ;
} KDEVICE_QUEUE, *PKDEVICE_QUEUE, * PRKDEVICE_QUEUE;
typedef struct _DISPATCHER_HEADER {
  __extension__ union {
    __extension__ struct {
      UCHAR Type;
      __extension__ union {
        __extension__ union {
          UCHAR TimerControlFlags;
          __extension__ struct {
            UCHAR Absolute:1;
            UCHAR Coalescable:1;
            UCHAR KeepShifting:1;
            UCHAR EncodedTolerableDelay:5;
          } ;
        } ;
        UCHAR Abandoned;
        UCHAR NpxIrql;
        BOOLEAN Signalling;
      } ;
      __extension__ union {
        __extension__ union {
          UCHAR ThreadControlFlags;
          __extension__ struct {
            UCHAR CpuThrottled:1;
            UCHAR CycleProfiling:1;
            UCHAR CounterProfiling:1;
            UCHAR Reserved:5;
          } ;
        } ;
        UCHAR Size;
        UCHAR Hand;
      } ;
      __extension__ union {
        UCHAR Inserted;
        __extension__ union {
          BOOLEAN DebugActive;
          __extension__ struct {
            BOOLEAN ActiveDR7:1;
            BOOLEAN Instrumented:1;
            BOOLEAN Reserved2:4;
            BOOLEAN UmsScheduled:1;
            BOOLEAN UmsPrimary:1;
          } ;
        } ;
        BOOLEAN DpcActive;
      } ;
    } ;
    volatile LONG Lock;
  } ;
  LONG SignalState;
  LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER;
typedef struct _KEVENT {
  DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT, * PRKEVENT;
typedef struct _KSEMAPHORE {
  DISPATCHER_HEADER Header;
  LONG Limit;
} KSEMAPHORE, *PKSEMAPHORE, * PRKSEMAPHORE;
typedef struct _KGATE {
  DISPATCHER_HEADER Header;
} KGATE, *PKGATE, * PRKGATE;
typedef struct _KGUARDED_MUTEX {
  volatile LONG Count;
  PKTHREAD Owner;
  ULONG Contention;
  KGATE Gate;
  __extension__ union {
    __extension__ struct {
      SHORT KernelApcDisable;
      SHORT SpecialApcDisable;
    } ;
    ULONG CombinedApcDisable;
  } ;
} KGUARDED_MUTEX, *PKGUARDED_MUTEX;
typedef struct _KMUTANT {
  DISPATCHER_HEADER Header;
  LIST_ENTRY MutantListEntry;
  struct _KTHREAD * OwnerThread;
  BOOLEAN Abandoned;
  UCHAR ApcDisable;
} KMUTANT, *PKMUTANT, * PRKMUTANT, KMUTEX, *PKMUTEX, * PRKMUTEX;
typedef struct _KTIMER {
  DISPATCHER_HEADER Header;
  ULARGE_INTEGER DueTime;
  LIST_ENTRY TimerListEntry;
  struct _KDPC *Dpc;
  ULONG Processor;
  ULONG Period;
} KTIMER, *PKTIMER, * PRKTIMER;
typedef enum _LOCK_OPERATION {
  IoReadAccess,
  IoWriteAccess,
  IoModifyAccess
} LOCK_OPERATION;
typedef BOOLEAN
( *PKSYNCHRONIZE_ROUTINE)(
  PVOID SynchronizeContext);
typedef enum _POOL_TYPE {
  NonPagedPool,
  PagedPool,
  NonPagedPoolMustSucceed,
  DontUseThisType,
  NonPagedPoolCacheAligned,
  PagedPoolCacheAligned,
  NonPagedPoolCacheAlignedMustS,
  MaxPoolType,
  NonPagedPoolSession = 32,
  PagedPoolSession,
  NonPagedPoolMustSucceedSession,
  DontUseThisTypeSession,
  NonPagedPoolCacheAlignedSession,
  PagedPoolCacheAlignedSession,
  NonPagedPoolCacheAlignedMustSSession
} POOL_TYPE;
typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
  StandardDesign,
  NEC98x86,
  EndAlternatives
} ALTERNATIVE_ARCHITECTURE_TYPE;
typedef struct _KSYSTEM_TIME {
  ULONG LowPart;
  LONG High1Time;
  LONG High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME;
typedef struct __attribute__ ((__aligned__ (16))) _M128A {
  ULONGLONG Low;
  LONGLONG High;
} M128A, *PM128A;
typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_FORMAT {
  USHORT ControlWord;
  USHORT StatusWord;
  UCHAR TagWord;
  UCHAR Reserved1;
  USHORT ErrorOpcode;
  ULONG ErrorOffset;
  USHORT ErrorSelector;
  USHORT Reserved2;
  ULONG DataOffset;
  USHORT DataSelector;
  USHORT Reserved3;
  ULONG MxCsr;
  ULONG MxCsr_Mask;
  M128A FloatRegisters[8];
  M128A XmmRegisters[16];
  UCHAR Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT;
typedef struct __attribute__ ((__aligned__ (8))) _XSAVE_AREA_HEADER {
  ULONG64 Mask;
  ULONG64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;
typedef struct __attribute__ ((__aligned__ (16))) _XSAVE_AREA {
  XSAVE_FORMAT LegacyState;
  XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;
typedef struct _XSTATE_CONTEXT {
  ULONG64 Mask;
  ULONG Length;
  ULONG Reserved1;
  PXSAVE_AREA Area;
  PVOID Buffer;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT;
typedef struct _XSTATE_SAVE {
  struct _XSTATE_SAVE* Prev;
  struct _KTHREAD* Thread;
  UCHAR Level;
  XSTATE_CONTEXT XStateContext;
} XSTATE_SAVE, *PXSTATE_SAVE;
extern char (*c_assert(void)) [((sizeof(XSAVE_FORMAT) & (64 - 1)) == 0) ? 1 : -1];
extern char (*c_assert(void)) [((__builtin_offsetof(XSAVE_AREA, Header) & (64 - 1)) == 0) ? 1 : -1];
extern char (*c_assert(void)) [(sizeof(XSAVE_AREA) == 512 + 64) ? 1 : -1];
typedef struct _CONTEXT_CHUNK {
  LONG Offset;
  ULONG Length;
} CONTEXT_CHUNK, *PCONTEXT_CHUNK;
typedef struct _CONTEXT_EX {
  CONTEXT_CHUNK All;
  CONTEXT_CHUNK Legacy;
  CONTEXT_CHUNK XState;
} CONTEXT_EX, *PCONTEXT_EX;
extern __attribute__((dllimport)) CCHAR KeNumberProcessors;
typedef ULONG NODE_REQUIREMENT;
typedef enum _SECTION_INHERIT {
  ViewShare = 1,
  ViewUnmap = 2
} SECTION_INHERIT;
typedef ULONG PFN_COUNT;
typedef LONG_PTR SPFN_NUMBER, *PSPFN_NUMBER;
typedef ULONG_PTR PFN_NUMBER, *PPFN_NUMBER;
typedef struct _MDL {
  struct _MDL *Next;
  CSHORT Size;
  CSHORT MdlFlags;
  struct _EPROCESS *Process;
  PVOID MappedSystemVa;
  PVOID StartVa;
  ULONG ByteCount;
  ULONG ByteOffset;
} MDL, *PMDL;
typedef MDL *PMDLX;
typedef enum _MEMORY_CACHING_TYPE_ORIG {
  MmFrameBufferCached = 2
} MEMORY_CACHING_TYPE_ORIG;
typedef enum _MEMORY_CACHING_TYPE {
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = MmFrameBufferCached,
  MmHardwareCoherentCached,
  MmNonCachedUnordered,
  MmUSWCCached,
  MmMaximumCacheType
} MEMORY_CACHING_TYPE;
typedef enum _MM_PAGE_PRIORITY {
  LowPagePriority,
  NormalPagePriority = 16,
  HighPagePriority = 32
} MM_PAGE_PRIORITY;
typedef enum _MM_SYSTEM_SIZE {
  MmSmallSystem,
  MmMediumSystem,
  MmLargeSystem
} MM_SYSTEMSIZE;
extern __attribute__((dllimport)) BOOLEAN Mm64BitPhysicalAddress;
extern PVOID MmBadPointer;
typedef struct _FAST_MUTEX {
  volatile LONG Count;
  PKTHREAD Owner;
  ULONG Contention;
  KEVENT Event;
  ULONG OldIrql;
} FAST_MUTEX, *PFAST_MUTEX;
typedef enum _SUITE_TYPE {
  SmallBusiness,
  Enterprise,
  BackOffice,
  CommunicationServer,
  TerminalServer,
  SmallBusinessRestricted,
  EmbeddedNT,
  DataCenter,
  SingleUserTS,
  Personal,
  Blade,
  EmbeddedRestricted,
  SecurityAppliance,
  StorageServer,
  ComputeServer,
  WHServer,
  MaxSuiteType
} SUITE_TYPE;
typedef enum _EX_POOL_PRIORITY {
  LowPoolPriority,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41
} EX_POOL_PRIORITY;
typedef struct _LOOKASIDE_LIST_EX *PLOOKASIDE_LIST_EX;
typedef PVOID
( *PALLOCATE_FUNCTION)(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes,
  ULONG Tag);
typedef PVOID
( *PALLOCATE_FUNCTION_EX)(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes,
  ULONG Tag,
  PLOOKASIDE_LIST_EX Lookaside);
typedef void
( *PFREE_FUNCTION)(
  PVOID Buffer);
typedef void
( *PFREE_FUNCTION_EX)(
  PVOID Buffer,
  PLOOKASIDE_LIST_EX Lookaside);
typedef void
( CALLBACK_FUNCTION)(
  PVOID CallbackContext ,
  PVOID Argument1 ,
  PVOID Argument2 );
typedef CALLBACK_FUNCTION *PCALLBACK_FUNCTION;
typedef struct __attribute__ ((__aligned__ (64))) _GENERAL_LOOKASIDE {
  __extension__ union { SLIST_HEADER ListHead; SINGLE_LIST_ENTRY SingleListHead; } ; USHORT Depth; USHORT MaximumDepth; ULONG TotalAllocates; __extension__ union { ULONG AllocateMisses; ULONG AllocateHits; } ; ULONG TotalFrees; __extension__ union { ULONG FreeMisses; ULONG FreeHits; } ; POOL_TYPE Type; ULONG Tag; ULONG Size; __extension__ union { PALLOCATE_FUNCTION_EX AllocateEx; PALLOCATE_FUNCTION Allocate; } ; __extension__ union { PFREE_FUNCTION_EX FreeEx; PFREE_FUNCTION Free; } ; LIST_ENTRY ListEntry; ULONG LastTotalAllocates; __extension__ union { ULONG LastAllocateMisses; ULONG LastAllocateHits; } ; ULONG Future[2];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE;
typedef struct _GENERAL_LOOKASIDE_POOL {
  __extension__ union { SLIST_HEADER ListHead; SINGLE_LIST_ENTRY SingleListHead; } ; USHORT Depth; USHORT MaximumDepth; ULONG TotalAllocates; __extension__ union { ULONG AllocateMisses; ULONG AllocateHits; } ; ULONG TotalFrees; __extension__ union { ULONG FreeMisses; ULONG FreeHits; } ; POOL_TYPE Type; ULONG Tag; ULONG Size; __extension__ union { PALLOCATE_FUNCTION_EX AllocateEx; PALLOCATE_FUNCTION Allocate; } ; __extension__ union { PFREE_FUNCTION_EX FreeEx; PFREE_FUNCTION Free; } ; LIST_ENTRY ListEntry; ULONG LastTotalAllocates; __extension__ union { ULONG LastAllocateMisses; ULONG LastAllocateHits; } ; ULONG Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;
extern char (*c_assert(void)) [(__builtin_offsetof(GENERAL_LOOKASIDE, TotalFrees) == __builtin_offsetof(GENERAL_LOOKASIDE_POOL, TotalFrees)) ? 1 : -1];
extern char (*c_assert(void)) [(__builtin_offsetof(GENERAL_LOOKASIDE, Tag) == __builtin_offsetof(GENERAL_LOOKASIDE_POOL, Tag)) ? 1 : -1];
extern char (*c_assert(void)) [(__builtin_offsetof(GENERAL_LOOKASIDE, Future) == __builtin_offsetof(GENERAL_LOOKASIDE_POOL, Future)) ? 1 : -1];
typedef struct _PAGED_LOOKASIDE_LIST {
  GENERAL_LOOKASIDE L;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;
typedef struct __attribute__ ((__aligned__ (64))) _NPAGED_LOOKASIDE_LIST {
  GENERAL_LOOKASIDE L;
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST;
typedef struct _LOOKASIDE_LIST_EX {
  GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX;
typedef struct _EX_RUNDOWN_REF {
  __extension__ union {
    volatile ULONG_PTR Count;
    volatile PVOID Ptr;
  } ;
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF;
typedef struct _EX_RUNDOWN_REF_CACHE_AWARE *PEX_RUNDOWN_REF_CACHE_AWARE;
typedef enum _WORK_QUEUE_TYPE {
  CriticalWorkQueue,
  DelayedWorkQueue,
  HyperCriticalWorkQueue,
  MaximumWorkQueue
} WORK_QUEUE_TYPE;
typedef void
( WORKER_THREAD_ROUTINE)(
  PVOID Parameter);
typedef WORKER_THREAD_ROUTINE *PWORKER_THREAD_ROUTINE;
typedef struct _WORK_QUEUE_ITEM {
  LIST_ENTRY List;
  PWORKER_THREAD_ROUTINE WorkerRoutine;
  volatile PVOID Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;
typedef ULONG_PTR ERESOURCE_THREAD, *PERESOURCE_THREAD;
typedef struct _OWNER_ENTRY {
  ERESOURCE_THREAD OwnerThread;
  __extension__ union {
    __extension__ struct {
      ULONG IoPriorityBoosted:1;
      ULONG OwnerReferenced:1;
      ULONG OwnerCount:30;
    } ;
    ULONG TableSize;
  } ;
} OWNER_ENTRY, *POWNER_ENTRY;
typedef struct _ERESOURCE {
  LIST_ENTRY SystemResourcesList;
  POWNER_ENTRY OwnerTable;
  SHORT ActiveCount;
  USHORT Flag;
  volatile PKSEMAPHORE SharedWaiters;
  volatile PKEVENT ExclusiveWaiters;
  OWNER_ENTRY OwnerEntry;
  ULONG ActiveEntries;
  ULONG ContentionCount;
  ULONG NumberOfSharedWaiters;
  ULONG NumberOfExclusiveWaiters;
  PVOID Reserved2;
  __extension__ union {
    PVOID Address;
    ULONG_PTR CreatorBackTraceIndex;
  } ;
  KSPIN_LOCK SpinLock;
} ERESOURCE, *PERESOURCE;
typedef struct _RESOURCE_HASH_ENTRY {
  LIST_ENTRY ListEntry;
  PVOID Address;
  ULONG ContentionCount;
  ULONG Number;
} RESOURCE_HASH_ENTRY, *PRESOURCE_HASH_ENTRY;
typedef struct _RESOURCE_PERFORMANCE_DATA {
  ULONG ActiveResourceCount;
  ULONG TotalResourceCount;
  ULONG ExclusiveAcquire;
  ULONG SharedFirstLevel;
  ULONG SharedSecondLevel;
  ULONG StarveFirstLevel;
  ULONG StarveSecondLevel;
  ULONG WaitForExclusive;
  ULONG OwnerTableExpands;
  ULONG MaximumTableExpand;
  LIST_ENTRY HashTable[64];
} RESOURCE_PERFORMANCE_DATA, *PRESOURCE_PERFORMANCE_DATA;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef ULONG SECURITY_INFORMATION, *PSECURITY_INFORMATION;
typedef ULONG ACCESS_MASK, *PACCESS_MASK;
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSID;
typedef struct _GENERIC_MAPPING {
  ACCESS_MASK GenericRead;
  ACCESS_MASK GenericWrite;
  ACCESS_MASK GenericExecute;
  ACCESS_MASK GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING;
typedef struct _ACL {
  UCHAR AclRevision;
  UCHAR Sbz1;
  USHORT AclSize;
  USHORT AceCount;
  USHORT Sbz2;
} ACL, *PACL;
#pragma pack(push,4)
typedef struct _LUID_AND_ATTRIBUTES {
  LUID Luid;
  ULONG Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;
#pragma pack(pop)
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
typedef struct _PRIVILEGE_SET {
  ULONG PrivilegeCount;
  ULONG Control;
  LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET,*PPRIVILEGE_SET;
typedef enum _SECURITY_IMPERSONATION_LEVEL {
  SecurityAnonymous,
  SecurityIdentification,
  SecurityImpersonation,
  SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE, *PSECURITY_CONTEXT_TRACKING_MODE;
typedef struct _SECURITY_QUALITY_OF_SERVICE {
  ULONG Length;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
  BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SE_IMPERSONATION_STATE {
  PACCESS_TOKEN Token;
  BOOLEAN CopyOnOpen;
  BOOLEAN EffectiveOnly;
  SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;
typedef enum _SECURITY_OPERATION_CODE {
  SetSecurityDescriptor,
  QuerySecurityDescriptor,
  DeleteSecurityDescriptor,
  AssignSecurityDescriptor
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;
typedef struct _INITIAL_PRIVILEGE_SET {
  ULONG PrivilegeCount;
  ULONG Control;
  LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, * PINITIAL_PRIVILEGE_SET;
typedef struct _SECURITY_SUBJECT_CONTEXT {
  PACCESS_TOKEN ClientToken;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  PACCESS_TOKEN PrimaryToken;
  PVOID ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT;
typedef struct _ACCESS_STATE {
  LUID OperationID;
  BOOLEAN SecurityEvaluated;
  BOOLEAN GenerateAudit;
  BOOLEAN GenerateOnClose;
  BOOLEAN PrivilegesAllocated;
  ULONG Flags;
  ACCESS_MASK RemainingDesiredAccess;
  ACCESS_MASK PreviouslyGrantedAccess;
  ACCESS_MASK OriginalDesiredAccess;
  SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  PSECURITY_DESCRIPTOR SecurityDescriptor;
  PVOID AuxData;
  union {
    INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
    PRIVILEGE_SET PrivilegeSet;
  } Privileges;
  BOOLEAN AuditPrivileges;
  UNICODE_STRING ObjectName;
  UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE;
typedef void
( *PNTFS_DEREF_EXPORTED_SECURITY_DESCRIPTOR)(
  PVOID Vcb,
  PSECURITY_DESCRIPTOR SecurityDescriptor);
typedef enum _SE_ADT_PARAMETER_TYPE {
  SeAdtParmTypeNone = 0,
  SeAdtParmTypeString,
  SeAdtParmTypeFileSpec,
  SeAdtParmTypeUlong,
  SeAdtParmTypeSid,
  SeAdtParmTypeLogonId,
  SeAdtParmTypeNoLogonId,
  SeAdtParmTypeAccessMask,
  SeAdtParmTypePrivs,
  SeAdtParmTypeObjectTypes,
  SeAdtParmTypeHexUlong,
  SeAdtParmTypePtr,
  SeAdtParmTypeTime,
  SeAdtParmTypeGuid,
  SeAdtParmTypeLuid,
  SeAdtParmTypeHexInt64,
  SeAdtParmTypeStringList,
  SeAdtParmTypeSidList,
  SeAdtParmTypeDuration,
  SeAdtParmTypeUserAccountControl,
  SeAdtParmTypeNoUac,
  SeAdtParmTypeMessage,
  SeAdtParmTypeDateTime,
  SeAdtParmTypeSockAddr,
  SeAdtParmTypeSD,
  SeAdtParmTypeLogonHours,
  SeAdtParmTypeLogonIdNoSid,
  SeAdtParmTypeUlongNoConv,
  SeAdtParmTypeSockAddrNoPort,
  SeAdtParmTypeAccessReason
} SE_ADT_PARAMETER_TYPE, *PSE_ADT_PARAMETER_TYPE;
typedef struct _SE_ADT_OBJECT_TYPE {
  GUID ObjectType;
  USHORT Flags;
  USHORT Level;
  ACCESS_MASK AccessMask;
} SE_ADT_OBJECT_TYPE, *PSE_ADT_OBJECT_TYPE;
typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {
  SE_ADT_PARAMETER_TYPE Type;
  ULONG Length;
  ULONG_PTR Data[2];
  PVOID Address;
} SE_ADT_PARAMETER_ARRAY_ENTRY, *PSE_ADT_PARAMETER_ARRAY_ENTRY;
typedef struct _SE_ADT_ACCESS_REASON {
  ACCESS_MASK AccessMask;
  ULONG AccessReasons[32];
  ULONG ObjectTypeIndex;
  ULONG AccessGranted;
  PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_ADT_ACCESS_REASON, *PSE_ADT_ACCESS_REASON;
typedef struct _SE_ADT_PARAMETER_ARRAY {
  ULONG CategoryId;
  ULONG AuditId;
  ULONG ParameterCount;
  ULONG Length;
  USHORT FlatSubCategoryId;
  USHORT Type;
  ULONG Flags;
  SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[ 32 ];
} SE_ADT_PARAMETER_ARRAY, *PSE_ADT_PARAMETER_ARRAY;
typedef enum _SYSTEM_POWER_STATE {
  PowerSystemUnspecified = 0,
  PowerSystemWorking,
  PowerSystemSleeping1,
  PowerSystemSleeping2,
  PowerSystemSleeping3,
  PowerSystemHibernate,
  PowerSystemShutdown,
  PowerSystemMaximum
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;
typedef enum _POWER_INFORMATION_LEVEL {
  SystemPowerPolicyAc,
  SystemPowerPolicyDc,
  VerifySystemPolicyAc,
  VerifySystemPolicyDc,
  SystemPowerCapabilities,
  SystemBatteryState,
  SystemPowerStateHandler,
  ProcessorStateHandler,
  SystemPowerPolicyCurrent,
  AdministratorPowerPolicy,
  SystemReserveHiberFile,
  ProcessorInformation,
  SystemPowerInformation,
  ProcessorStateHandler2,
  LastWakeTime,
  LastSleepTime,
  SystemExecutionState,
  SystemPowerStateNotifyHandler,
  ProcessorPowerPolicyAc,
  ProcessorPowerPolicyDc,
  VerifyProcessorPowerPolicyAc,
  VerifyProcessorPowerPolicyDc,
  ProcessorPowerPolicyCurrent,
  SystemPowerStateLogging,
  SystemPowerLoggingEntry,
  SetPowerSettingValue,
  NotifyUserPowerSetting,
  PowerInformationLevelUnused0,
  PowerInformationLevelUnused1,
  SystemVideoState,
  TraceApplicationPowerMessage,
  TraceApplicationPowerMessageEnd,
  ProcessorPerfStates,
  ProcessorIdleStates,
  ProcessorCap,
  SystemWakeSource,
  SystemHiberFileInformation,
  TraceServicePowerMessage,
  ProcessorLoad,
  PowerShutdownNotification,
  MonitorCapabilities,
  SessionPowerInit,
  SessionDisplayState,
  PowerRequestCreate,
  PowerRequestAction,
  GetPowerRequestList,
  ProcessorInformationEx,
  NotifyUserModeLegacyPowerEvent,
  GroupPark,
  ProcessorIdleDomains,
  WakeTimerList,
  SystemHiberFileSize,
  PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;
typedef enum {
  PowerActionNone = 0,
  PowerActionReserved,
  PowerActionSleep,
  PowerActionHibernate,
  PowerActionShutdown,
  PowerActionShutdownReset,
  PowerActionShutdownOff,
  PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;
typedef enum _DEVICE_POWER_STATE {
  PowerDeviceUnspecified = 0,
  PowerDeviceD0,
  PowerDeviceD1,
  PowerDeviceD2,
  PowerDeviceD3,
  PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;
typedef enum _MONITOR_DISPLAY_STATE {
  PowerMonitorOff = 0,
  PowerMonitorOn,
  PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;
typedef union _POWER_STATE {
  SYSTEM_POWER_STATE SystemState;
  DEVICE_POWER_STATE DeviceState;
} POWER_STATE, *PPOWER_STATE;
typedef enum _POWER_STATE_TYPE {
  SystemPowerState = 0,
  DevicePowerState
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;
typedef ULONG EXECUTION_STATE, *PEXECUTION_STATE;
typedef enum {
  LT_DONT_CARE,
  LT_LOWEST_LATENCY
} LATENCY_TIME;
typedef enum _POWER_REQUEST_TYPE {
  PowerRequestDisplayRequired,
  PowerRequestSystemRequired,
  PowerRequestAwayModeRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
typedef struct CM_Power_Data_s {
  ULONG PD_Size;
  DEVICE_POWER_STATE PD_MostRecentPowerState;
  ULONG PD_Capabilities;
  ULONG PD_D1Latency;
  ULONG PD_D2Latency;
  ULONG PD_D3Latency;
  DEVICE_POWER_STATE PD_PowerStateMapping[PowerSystemMaximum];
  SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;
typedef enum _SYSTEM_POWER_CONDITION {
  PoAc,
  PoDc,
  PoHot,
  PoConditionMaximum
} SYSTEM_POWER_CONDITION;
typedef struct _SET_POWER_SETTING_VALUE {
  ULONG Version;
  GUID Guid;
  SYSTEM_POWER_CONDITION PowerCondition;
  ULONG DataLength;
  UCHAR Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;
typedef struct _NOTIFY_USER_POWER_SETTING {
  GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;
typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
  LARGE_INTEGER ActivationTime;
  ULONG Flags;
  ULONG ButtonInstanceID;
} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;
typedef enum _POWER_PLATFORM_ROLE {
  PlatformRoleUnspecified = 0,
  PlatformRoleDesktop,
  PlatformRoleMobile,
  PlatformRoleWorkstation,
  PlatformRoleEnterpriseServer,
  PlatformRoleSOHOServer,
  PlatformRoleAppliancePC,
  PlatformRolePerformanceServer,
  PlatformRoleMaximum
} POWER_PLATFORM_ROLE;
typedef struct {
  ULONG Granularity;
  ULONG Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
extern const GUID GUID_MAX_POWER_SAVINGS;
extern const GUID GUID_MIN_POWER_SAVINGS;
extern const GUID GUID_TYPICAL_POWER_SAVINGS;
extern const GUID NO_SUBGROUP_GUID;
extern const GUID ALL_POWERSCHEMES_GUID;
extern const GUID GUID_POWERSCHEME_PERSONALITY;
extern const GUID GUID_ACTIVE_POWERSCHEME;
extern const GUID GUID_VIDEO_SUBGROUP;
extern const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;
extern const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;
extern const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;
extern const GUID GUID_VIDEO_DIM_TIMEOUT;
extern const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;
extern const GUID GUID_MONITOR_POWER_ON;
extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;
extern const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;
extern const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;
extern const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;
extern const GUID GUID_SESSION_DISPLAY_STATE;
extern const GUID GUID_CONSOLE_DISPLAY_STATE;
extern const GUID GUID_ALLOW_DISPLAY_REQUIRED;
extern const GUID GUID_DISK_SUBGROUP;
extern const GUID GUID_DISK_POWERDOWN_TIMEOUT;
extern const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;
extern const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
extern const GUID GUID_SLEEP_SUBGROUP;
extern const GUID GUID_SLEEP_IDLE_THRESHOLD;
extern const GUID GUID_STANDBY_TIMEOUT;
extern const GUID GUID_UNATTEND_SLEEP_TIMEOUT;
extern const GUID GUID_HIBERNATE_TIMEOUT;
extern const GUID GUID_HIBERNATE_FASTS4_POLICY;
extern const GUID GUID_CRITICAL_POWER_TRANSITION;
extern const GUID GUID_SYSTEM_AWAYMODE;
extern const GUID GUID_ALLOW_AWAYMODE;
extern const GUID GUID_ALLOW_STANDBY_STATES;
extern const GUID GUID_ALLOW_RTC_WAKE;
extern const GUID GUID_ALLOW_SYSTEM_REQUIRED;
extern const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
extern const GUID GUID_POWERBUTTON_ACTION;
extern const GUID GUID_POWERBUTTON_ACTION_FLAGS;
extern const GUID GUID_SLEEPBUTTON_ACTION;
extern const GUID GUID_SLEEPBUTTON_ACTION_FLAGS;
extern const GUID GUID_USERINTERFACEBUTTON_ACTION;
extern const GUID GUID_LIDCLOSE_ACTION;
extern const GUID GUID_LIDCLOSE_ACTION_FLAGS;
extern const GUID GUID_LIDOPEN_POWERSTATE;
extern const GUID GUID_BATTERY_SUBGROUP;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;
extern const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
extern const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;
extern const GUID GUID_PROCESSOR_THROTTLE_POLICY;
extern const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;
extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;
extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING;
extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY;
extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY;
extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;
extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;
extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK;
extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;
extern const GUID GUID_PROCESSOR_IDLE_DISABLE;
extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;
extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;
extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;
extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;
extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;
extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;
extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;
extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;
extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE;
extern const GUID GUID_PROCESSOR_PERF_HISTORY;
extern const GUID GUID_SYSTEM_COOLING_POLICY;
extern const GUID GUID_LOCK_CONSOLE_ON_WAKE;
extern const GUID GUID_DEVICE_IDLE_POLICY;
extern const GUID GUID_ACDC_POWER_SOURCE;
extern const GUID GUID_LIDSWITCH_STATE_CHANGE;
extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING;
extern const GUID GUID_IDLE_BACKGROUND_TASK;
extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION;
extern const GUID GUID_APPLAUNCH_BUTTON;
extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;
extern const GUID GUID_PCIEXPRESS_ASPM_POLICY;
extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;
typedef void
( REQUEST_POWER_COMPLETE)(
  struct _DEVICE_OBJECT *DeviceObject,
  UCHAR MinorFunction,
  POWER_STATE PowerState,
  PVOID Context,
  struct _IO_STATUS_BLOCK *IoStatus);
typedef REQUEST_POWER_COMPLETE *PREQUEST_POWER_COMPLETE;
typedef
NTSTATUS
( POWER_SETTING_CALLBACK)(
  LPCGUID SettingGuid,
  PVOID Value,
  ULONG ValueLength,
  PVOID Context );
typedef POWER_SETTING_CALLBACK *PPOWER_SETTING_CALLBACK;
typedef int CM_RESOURCE_TYPE;
#pragma pack(push,4)
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
  UCHAR Type;
  UCHAR ShareDisposition;
  USHORT Flags;
  union {
    struct {
      PHYSICAL_ADDRESS Start;
      ULONG Length;
    } Generic;
    struct {
      PHYSICAL_ADDRESS Start;
      ULONG Length;
    } Port;
    struct {
      ULONG Level;
      ULONG Vector;
      KAFFINITY Affinity;
    } Interrupt;
    struct {
      PHYSICAL_ADDRESS Start;
      ULONG Length;
    } Memory;
    struct {
      ULONG Channel;
      ULONG Port;
      ULONG Reserved1;
    } Dma;
    struct {
      ULONG Data[3];
    } DevicePrivate;
    struct {
      ULONG Start;
      ULONG Length;
      ULONG Reserved;
    } BusNumber;
    struct {
      ULONG DataSize;
      ULONG Reserved1;
      ULONG Reserved2;
    } DeviceSpecificData;
  } u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;
#pragma pack(pop)
typedef enum _CM_SHARE_DISPOSITION {
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive,
  CmResourceShareDriverExclusive,
  CmResourceShareShared
} CM_SHARE_DISPOSITION;
typedef struct _DEVICE_FLAGS {
  ULONG Failed:1;
  ULONG ReadOnly:1;
  ULONG Removable:1;
  ULONG ConsoleIn:1;
  ULONG ConsoleOut:1;
  ULONG Input:1;
  ULONG Output:1;
} DEVICE_FLAGS, *PDEVICE_FLAGS;
typedef enum _INTERFACE_TYPE {
  InterfaceTypeUndefined = -1,
  Internal,
  Isa,
  Eisa,
  MicroChannel,
  TurboChannel,
  PCIBus,
  VMEBus,
  NuBus,
  PCMCIABus,
  CBus,
  MPIBus,
  MPSABus,
  ProcessorInternal,
  InternalPowerBus,
  PNPISABus,
  PNPBus,
  Vmcs,
  MaximumInterfaceType
} INTERFACE_TYPE, *PINTERFACE_TYPE;
typedef struct _CM_COMPONENT_INFORMATION {
  DEVICE_FLAGS Flags;
  ULONG Version;
  ULONG Key;
  KAFFINITY AffinityMask;
} CM_COMPONENT_INFORMATION, *PCM_COMPONENT_INFORMATION;
typedef struct _CM_ROM_BLOCK {
  ULONG Address;
  ULONG Size;
} CM_ROM_BLOCK, *PCM_ROM_BLOCK;
typedef struct _CM_PARTIAL_RESOURCE_LIST {
  USHORT Version;
  USHORT Revision;
  ULONG Count;
  CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST;
typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
  INTERFACE_TYPE InterfaceType;
  ULONG BusNumber;
  CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR;
typedef struct _CM_RESOURCE_LIST {
  ULONG Count;
  CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;
typedef struct _PNP_BUS_INFORMATION {
  GUID BusTypeGuid;
  INTERFACE_TYPE LegacyBusType;
  ULONG BusNumber;
} PNP_BUS_INFORMATION, *PPNP_BUS_INFORMATION;
#pragma pack(push,1)
typedef struct _CM_INT13_DRIVE_PARAMETER {
  USHORT DriveSelect;
  ULONG MaxCylinders;
  USHORT SectorsPerTrack;
  USHORT MaxHeads;
  USHORT NumberDrives;
} CM_INT13_DRIVE_PARAMETER, *PCM_INT13_DRIVE_PARAMETER;
typedef struct _CM_MCA_POS_DATA {
  USHORT AdapterId;
  UCHAR PosData1;
  UCHAR PosData2;
  UCHAR PosData3;
  UCHAR PosData4;
} CM_MCA_POS_DATA, *PCM_MCA_POS_DATA;
typedef struct _CM_PNP_BIOS_DEVICE_NODE {
  USHORT Size;
  UCHAR Node;
  ULONG ProductId;
  UCHAR DeviceType[3];
  USHORT DeviceAttributes;
} CM_PNP_BIOS_DEVICE_NODE,*PCM_PNP_BIOS_DEVICE_NODE;
typedef struct _CM_PNP_BIOS_INSTALLATION_CHECK {
  UCHAR Signature[4];
  UCHAR Revision;
  UCHAR Length;
  USHORT ControlField;
  UCHAR Checksum;
  ULONG EventFlagAddress;
  USHORT RealModeEntryOffset;
  USHORT RealModeEntrySegment;
  USHORT ProtectedModeEntryOffset;
  ULONG ProtectedModeCodeBaseAddress;
  ULONG OemDeviceId;
  USHORT RealModeDataBaseAddress;
  ULONG ProtectedModeDataBaseAddress;
} CM_PNP_BIOS_INSTALLATION_CHECK, *PCM_PNP_BIOS_INSTALLATION_CHECK;
#pragma pack(pop)
typedef struct _CM_DISK_GEOMETRY_DEVICE_DATA {
  ULONG BytesPerSector;
  ULONG NumberOfCylinders;
  ULONG SectorsPerTrack;
  ULONG NumberOfHeads;
} CM_DISK_GEOMETRY_DEVICE_DATA, *PCM_DISK_GEOMETRY_DEVICE_DATA;
typedef struct _CM_KEYBOARD_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  UCHAR Type;
  UCHAR Subtype;
  USHORT KeyboardFlags;
} CM_KEYBOARD_DEVICE_DATA, *PCM_KEYBOARD_DEVICE_DATA;
typedef struct _CM_SCSI_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  UCHAR HostIdentifier;
} CM_SCSI_DEVICE_DATA, *PCM_SCSI_DEVICE_DATA;
typedef struct _CM_VIDEO_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  ULONG VideoClock;
} CM_VIDEO_DEVICE_DATA, *PCM_VIDEO_DEVICE_DATA;
typedef struct _CM_SONIC_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  USHORT DataConfigurationRegister;
  UCHAR EthernetAddress[8];
} CM_SONIC_DEVICE_DATA, *PCM_SONIC_DEVICE_DATA;
typedef struct _CM_SERIAL_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  ULONG BaudClock;
} CM_SERIAL_DEVICE_DATA, *PCM_SERIAL_DEVICE_DATA;
typedef struct _CM_MONITOR_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  USHORT HorizontalScreenSize;
  USHORT VerticalScreenSize;
  USHORT HorizontalResolution;
  USHORT VerticalResolution;
  USHORT HorizontalDisplayTimeLow;
  USHORT HorizontalDisplayTime;
  USHORT HorizontalDisplayTimeHigh;
  USHORT HorizontalBackPorchLow;
  USHORT HorizontalBackPorch;
  USHORT HorizontalBackPorchHigh;
  USHORT HorizontalFrontPorchLow;
  USHORT HorizontalFrontPorch;
  USHORT HorizontalFrontPorchHigh;
  USHORT HorizontalSyncLow;
  USHORT HorizontalSync;
  USHORT HorizontalSyncHigh;
  USHORT VerticalBackPorchLow;
  USHORT VerticalBackPorch;
  USHORT VerticalBackPorchHigh;
  USHORT VerticalFrontPorchLow;
  USHORT VerticalFrontPorch;
  USHORT VerticalFrontPorchHigh;
  USHORT VerticalSyncLow;
  USHORT VerticalSync;
  USHORT VerticalSyncHigh;
} CM_MONITOR_DEVICE_DATA, *PCM_MONITOR_DEVICE_DATA;
typedef struct _CM_FLOPPY_DEVICE_DATA {
  USHORT Version;
  USHORT Revision;
  CHAR Size[8];
  ULONG MaxDensity;
  ULONG MountDensity;
  UCHAR StepRateHeadUnloadTime;
  UCHAR HeadLoadTime;
  UCHAR MotorOffTime;
  UCHAR SectorLengthCode;
  UCHAR SectorPerTrack;
  UCHAR ReadWriteGapLength;
  UCHAR DataTransferLength;
  UCHAR FormatGapLength;
  UCHAR FormatFillCharacter;
  UCHAR HeadSettleTime;
  UCHAR MotorSettleTime;
  UCHAR MaximumTrackValue;
  UCHAR DataTransferRate;
} CM_FLOPPY_DEVICE_DATA, *PCM_FLOPPY_DEVICE_DATA;
typedef enum _KEY_INFORMATION_CLASS {
  KeyBasicInformation,
  KeyNodeInformation,
  KeyFullInformation,
  KeyNameInformation,
  KeyCachedInformation,
  KeyFlagsInformation,
  KeyVirtualizationInformation,
  KeyHandleTagsInformation,
  MaxKeyInfoClass
} KEY_INFORMATION_CLASS;
typedef struct _KEY_BASIC_INFORMATION {
  LARGE_INTEGER LastWriteTime;
  ULONG TitleIndex;
  ULONG NameLength;
  WCHAR Name[1];
} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION;
typedef struct _KEY_CONTROL_FLAGS_INFORMATION {
  ULONG ControlFlags;
} KEY_CONTROL_FLAGS_INFORMATION, *PKEY_CONTROL_FLAGS_INFORMATION;
typedef struct _KEY_FULL_INFORMATION {
  LARGE_INTEGER LastWriteTime;
  ULONG TitleIndex;
  ULONG ClassOffset;
  ULONG ClassLength;
  ULONG SubKeys;
  ULONG MaxNameLen;
  ULONG MaxClassLen;
  ULONG Values;
  ULONG MaxValueNameLen;
  ULONG MaxValueDataLen;
  WCHAR Class[1];
} KEY_FULL_INFORMATION, *PKEY_FULL_INFORMATION;
typedef struct _KEY_HANDLE_TAGS_INFORMATION {
  ULONG HandleTags;
} KEY_HANDLE_TAGS_INFORMATION, *PKEY_HANDLE_TAGS_INFORMATION;
typedef struct _KEY_NODE_INFORMATION {
  LARGE_INTEGER LastWriteTime;
  ULONG TitleIndex;
  ULONG ClassOffset;
  ULONG ClassLength;
  ULONG NameLength;
  WCHAR Name[1];
} KEY_NODE_INFORMATION, *PKEY_NODE_INFORMATION;
typedef enum _KEY_SET_INFORMATION_CLASS {
  KeyWriteTimeInformation,
  KeyWow64FlagsInformation,
  KeyControlFlagsInformation,
  KeySetVirtualizationInformation,
  KeySetDebugInformation,
  KeySetHandleTagsInformation,
  MaxKeySetInfoClass
} KEY_SET_INFORMATION_CLASS;
typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION {
  ULONG VirtualTarget:1;
  ULONG VirtualStore:1;
  ULONG VirtualSource:1;
  ULONG Reserved:29;
} KEY_SET_VIRTUALIZATION_INFORMATION, *PKEY_SET_VIRTUALIZATION_INFORMATION;
typedef struct _KEY_VALUE_BASIC_INFORMATION {
  ULONG TitleIndex;
  ULONG Type;
  ULONG NameLength;
  WCHAR Name[1];
} KEY_VALUE_BASIC_INFORMATION, *PKEY_VALUE_BASIC_INFORMATION;
typedef struct _KEY_VALUE_FULL_INFORMATION {
  ULONG TitleIndex;
  ULONG Type;
  ULONG DataOffset;
  ULONG DataLength;
  ULONG NameLength;
  WCHAR Name[1];
} KEY_VALUE_FULL_INFORMATION, *PKEY_VALUE_FULL_INFORMATION;
typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
  ULONG TitleIndex;
  ULONG Type;
  ULONG DataLength;
  UCHAR Data[1];
} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION;
typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
  ULONG Type;
  ULONG DataLength;
  UCHAR Data[1];
} KEY_VALUE_PARTIAL_INFORMATION_ALIGN64, *PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
typedef struct _KEY_VALUE_ENTRY {
  PUNICODE_STRING ValueName;
  ULONG DataLength;
  ULONG DataOffset;
  ULONG Type;
} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY;
typedef enum _KEY_VALUE_INFORMATION_CLASS {
  KeyValueBasicInformation,
  KeyValueFullInformation,
  KeyValuePartialInformation,
  KeyValueFullInformationAlign64,
  KeyValuePartialInformationAlign64
} KEY_VALUE_INFORMATION_CLASS;
typedef struct _KEY_WOW64_FLAGS_INFORMATION {
  ULONG UserFlags;
} KEY_WOW64_FLAGS_INFORMATION, *PKEY_WOW64_FLAGS_INFORMATION;
typedef struct _KEY_WRITE_TIME_INFORMATION {
  LARGE_INTEGER LastWriteTime;
} KEY_WRITE_TIME_INFORMATION, *PKEY_WRITE_TIME_INFORMATION;
typedef enum _REG_NOTIFY_CLASS {
  RegNtDeleteKey,
  RegNtPreDeleteKey = RegNtDeleteKey,
  RegNtSetValueKey,
  RegNtPreSetValueKey = RegNtSetValueKey,
  RegNtDeleteValueKey,
  RegNtPreDeleteValueKey = RegNtDeleteValueKey,
  RegNtSetInformationKey,
  RegNtPreSetInformationKey = RegNtSetInformationKey,
  RegNtRenameKey,
  RegNtPreRenameKey = RegNtRenameKey,
  RegNtEnumerateKey,
  RegNtPreEnumerateKey = RegNtEnumerateKey,
  RegNtEnumerateValueKey,
  RegNtPreEnumerateValueKey = RegNtEnumerateValueKey,
  RegNtQueryKey,
  RegNtPreQueryKey = RegNtQueryKey,
  RegNtQueryValueKey,
  RegNtPreQueryValueKey = RegNtQueryValueKey,
  RegNtQueryMultipleValueKey,
  RegNtPreQueryMultipleValueKey = RegNtQueryMultipleValueKey,
  RegNtPreCreateKey,
  RegNtPostCreateKey,
  RegNtPreOpenKey,
  RegNtPostOpenKey,
  RegNtKeyHandleClose,
  RegNtPreKeyHandleClose = RegNtKeyHandleClose,
  RegNtPostDeleteKey,
  RegNtPostSetValueKey,
  RegNtPostDeleteValueKey,
  RegNtPostSetInformationKey,
  RegNtPostRenameKey,
  RegNtPostEnumerateKey,
  RegNtPostEnumerateValueKey,
  RegNtPostQueryKey,
  RegNtPostQueryValueKey,
  RegNtPostQueryMultipleValueKey,
  RegNtPostKeyHandleClose,
  RegNtPreCreateKeyEx,
  RegNtPostCreateKeyEx,
  RegNtPreOpenKeyEx,
  RegNtPostOpenKeyEx,
  RegNtPreFlushKey,
  RegNtPostFlushKey,
  RegNtPreLoadKey,
  RegNtPostLoadKey,
  RegNtPreUnLoadKey,
  RegNtPostUnLoadKey,
  RegNtPreQueryKeySecurity,
  RegNtPostQueryKeySecurity,
  RegNtPreSetKeySecurity,
  RegNtPostSetKeySecurity,
  RegNtCallbackObjectContextCleanup,
  RegNtPreRestoreKey,
  RegNtPostRestoreKey,
  RegNtPreSaveKey,
  RegNtPostSaveKey,
  RegNtPreReplaceKey,
  RegNtPostReplaceKey,
  MaxRegNtNotifyClass
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;
typedef NTSTATUS
( EX_CALLBACK_FUNCTION)(
  PVOID CallbackContext,
  PVOID Argument1,
  PVOID Argument2);
typedef EX_CALLBACK_FUNCTION *PEX_CALLBACK_FUNCTION;
typedef struct _REG_DELETE_KEY_INFORMATION {
  PVOID Object;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_DELETE_KEY_INFORMATION, *PREG_DELETE_KEY_INFORMATION
;
typedef struct _REG_SET_VALUE_KEY_INFORMATION {
  PVOID Object;
  PUNICODE_STRING ValueName;
  ULONG TitleIndex;
  ULONG Type;
  PVOID Data;
  ULONG DataSize;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_SET_VALUE_KEY_INFORMATION, *PREG_SET_VALUE_KEY_INFORMATION;
typedef struct _REG_DELETE_VALUE_KEY_INFORMATION {
  PVOID Object;
  PUNICODE_STRING ValueName;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_DELETE_VALUE_KEY_INFORMATION, *PREG_DELETE_VALUE_KEY_INFORMATION;
typedef struct _REG_SET_INFORMATION_KEY_INFORMATION {
  PVOID Object;
  KEY_SET_INFORMATION_CLASS KeySetInformationClass;
  PVOID KeySetInformation;
  ULONG KeySetInformationLength;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_SET_INFORMATION_KEY_INFORMATION, *PREG_SET_INFORMATION_KEY_INFORMATION;
typedef struct _REG_ENUMERATE_KEY_INFORMATION {
  PVOID Object;
  ULONG Index;
  KEY_INFORMATION_CLASS KeyInformationClass;
  PVOID KeyInformation;
  ULONG Length;
  PULONG ResultLength;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_ENUMERATE_KEY_INFORMATION, *PREG_ENUMERATE_KEY_INFORMATION;
typedef struct _REG_ENUMERATE_VALUE_KEY_INFORMATION {
  PVOID Object;
  ULONG Index;
  KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass;
  PVOID KeyValueInformation;
  ULONG Length;
  PULONG ResultLength;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_ENUMERATE_VALUE_KEY_INFORMATION, *PREG_ENUMERATE_VALUE_KEY_INFORMATION;
typedef struct _REG_QUERY_KEY_INFORMATION {
  PVOID Object;
  KEY_INFORMATION_CLASS KeyInformationClass;
  PVOID KeyInformation;
  ULONG Length;
  PULONG ResultLength;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_QUERY_KEY_INFORMATION, *PREG_QUERY_KEY_INFORMATION;
typedef struct _REG_QUERY_VALUE_KEY_INFORMATION {
  PVOID Object;
  PUNICODE_STRING ValueName;
  KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass;
  PVOID KeyValueInformation;
  ULONG Length;
  PULONG ResultLength;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_QUERY_VALUE_KEY_INFORMATION, *PREG_QUERY_VALUE_KEY_INFORMATION;
typedef struct _REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION {
  PVOID Object;
  PKEY_VALUE_ENTRY ValueEntries;
  ULONG EntryCount;
  PVOID ValueBuffer;
  PULONG BufferLength;
  PULONG RequiredBufferLength;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION, *PREG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION;
typedef struct _REG_RENAME_KEY_INFORMATION {
  PVOID Object;
  PUNICODE_STRING NewName;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_RENAME_KEY_INFORMATION, *PREG_RENAME_KEY_INFORMATION;
typedef struct _REG_CREATE_KEY_INFORMATION {
  PUNICODE_STRING CompleteName;
  PVOID RootObject;
  PVOID ObjectType;
  ULONG CreateOptions;
  PUNICODE_STRING Class;
  PVOID SecurityDescriptor;
  PVOID SecurityQualityOfService;
  ACCESS_MASK DesiredAccess;
  ACCESS_MASK GrantedAccess;
  PULONG Disposition;
  PVOID *ResultObject;
  PVOID CallContext;
  PVOID RootObjectContext;
  PVOID Transaction;
  PVOID Reserved;
} REG_CREATE_KEY_INFORMATION, REG_OPEN_KEY_INFORMATION,*PREG_CREATE_KEY_INFORMATION, *PREG_OPEN_KEY_INFORMATION;
typedef struct _REG_CREATE_KEY_INFORMATION_V1 {
  PUNICODE_STRING CompleteName;
  PVOID RootObject;
  PVOID ObjectType;
  ULONG Options;
  PUNICODE_STRING Class;
  PVOID SecurityDescriptor;
  PVOID SecurityQualityOfService;
  ACCESS_MASK DesiredAccess;
  ACCESS_MASK GrantedAccess;
  PULONG Disposition;
  PVOID *ResultObject;
  PVOID CallContext;
  PVOID RootObjectContext;
  PVOID Transaction;
  ULONG_PTR Version;
  PUNICODE_STRING RemainingName;
  ULONG Wow64Flags;
  ULONG Attributes;
  KPROCESSOR_MODE CheckAccessMode;
} REG_CREATE_KEY_INFORMATION_V1, REG_OPEN_KEY_INFORMATION_V1,*PREG_CREATE_KEY_INFORMATION_V1, *PREG_OPEN_KEY_INFORMATION_V1;
typedef struct _REG_PRE_CREATE_KEY_INFORMATION {
  PUNICODE_STRING CompleteName;
} REG_PRE_CREATE_KEY_INFORMATION, REG_PRE_OPEN_KEY_INFORMATION,*PREG_PRE_CREATE_KEY_INFORMATION, *PREG_PRE_OPEN_KEY_INFORMATION;;
typedef struct _REG_POST_CREATE_KEY_INFORMATION {
  PUNICODE_STRING CompleteName;
  PVOID Object;
  NTSTATUS Status;
} REG_POST_CREATE_KEY_INFORMATION,REG_POST_OPEN_KEY_INFORMATION, *PREG_POST_CREATE_KEY_INFORMATION, *PREG_POST_OPEN_KEY_INFORMATION;
typedef struct _REG_POST_OPERATION_INFORMATION {
  PVOID Object;
  NTSTATUS Status;
  PVOID PreInformation;
  NTSTATUS ReturnStatus;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_POST_OPERATION_INFORMATION,*PREG_POST_OPERATION_INFORMATION;
typedef struct _REG_KEY_HANDLE_CLOSE_INFORMATION {
  PVOID Object;
  PVOID CallContext;
  PVOID ObjectContext;
  PVOID Reserved;
} REG_KEY_HANDLE_CLOSE_INFORMATION, *PREG_KEY_HANDLE_CLOSE_INFORMATION;
typedef enum _CM_SERVICE_NODE_TYPE {
  DriverType = 0x00000001,
  FileSystemType = 0x00000002,
  Win32ServiceOwnProcess = 0x00000010,
  Win32ServiceShareProcess = 0x00000020,
  AdapterType = 0x00000004,
  RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;
typedef enum _CM_SERVICE_LOAD_TYPE {
  BootLoad = 0x00000000,
  SystemLoad = 0x00000001,
  AutoLoad = 0x00000002,
  DemandLoad = 0x00000003,
  DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;
typedef enum _CM_ERROR_CONTROL_TYPE {
  IgnoreError = 0x00000000,
  NormalError = 0x00000001,
  SevereError = 0x00000002,
  CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
typedef enum _IRQ_DEVICE_POLICY {
  IrqPolicyMachineDefault = 0,
  IrqPolicyAllCloseProcessors,
  IrqPolicyOneCloseProcessor,
  IrqPolicyAllProcessorsInMachine,
  IrqPolicySpecifiedProcessors,
  IrqPolicySpreadMessagesAcrossAllProcessors
} IRQ_DEVICE_POLICY, *PIRQ_DEVICE_POLICY;
typedef enum _IRQ_PRIORITY {
  IrqPriorityUndefined = 0,
  IrqPriorityLow,
  IrqPriorityNormal,
  IrqPriorityHigh
} IRQ_PRIORITY, *PIRQ_PRIORITY;
typedef enum _IRQ_GROUP_POLICY {
  GroupAffinityAllGroupZero = 0,
  GroupAffinityDontCare
} IRQ_GROUP_POLICY, *PIRQ_GROUP_POLICY;
typedef struct _OBJECT_HANDLE_INFORMATION {
  ULONG HandleAttributes;
  ACCESS_MASK GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION;
typedef struct _CLIENT_ID {
  HANDLE UniqueProcess;
  HANDLE UniqueThread;
} CLIENT_ID, *PCLIENT_ID;
typedef struct _VPB {
  CSHORT Type;
  CSHORT Size;
  USHORT Flags;
  USHORT VolumeLabelLength;
  struct _DEVICE_OBJECT *DeviceObject;
  struct _DEVICE_OBJECT *RealDevice;
  ULONG SerialNumber;
  ULONG ReferenceCount;
  WCHAR VolumeLabel[(32 * sizeof(WCHAR)) / sizeof(WCHAR)];
} VPB, *PVPB;
typedef enum _IO_ALLOCATION_ACTION {
  KeepObject = 1,
  DeallocateObject,
  DeallocateObjectKeepRegisters
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;
typedef IO_ALLOCATION_ACTION
( DRIVER_CONTROL)(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp,
  PVOID MapRegisterBase,
  PVOID Context);
typedef DRIVER_CONTROL *PDRIVER_CONTROL;
typedef struct _WAIT_CONTEXT_BLOCK {
  KDEVICE_QUEUE_ENTRY WaitQueueEntry;
  PDRIVER_CONTROL DeviceRoutine;
  PVOID DeviceContext;
  ULONG NumberOfMapRegisters;
  PVOID DeviceObject;
  PVOID CurrentIrp;
  PKDPC BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;
typedef struct _DEVICE_OBJECT {
  CSHORT Type;
  USHORT Size;
  LONG ReferenceCount;
  struct _DRIVER_OBJECT *DriverObject;
  struct _DEVICE_OBJECT *NextDevice;
  struct _DEVICE_OBJECT *AttachedDevice;
  struct _IRP *CurrentIrp;
  PIO_TIMER Timer;
  ULONG Flags;
  ULONG Characteristics;
  volatile PVPB Vpb;
  PVOID DeviceExtension;
  ULONG DeviceType;
  CCHAR StackSize;
  union {
    LIST_ENTRY ListEntry;
    WAIT_CONTEXT_BLOCK Wcb;
  } Queue;
  ULONG AlignmentRequirement;
  KDEVICE_QUEUE DeviceQueue;
  KDPC Dpc;
  ULONG ActiveThreadCount;
  PSECURITY_DESCRIPTOR SecurityDescriptor;
  KEVENT DeviceLock;
  USHORT SectorSize;
  USHORT Spare1;
  struct _DEVOBJ_EXTENSION *DeviceObjectExtension;
  PVOID Reserved;
} DEVICE_OBJECT, *PDEVICE_OBJECT;
typedef enum _IO_SESSION_STATE {
  IoSessionStateCreated = 1,
  IoSessionStateInitialized,
  IoSessionStateConnected,
  IoSessionStateDisconnected,
  IoSessionStateDisconnectedLoggedOn,
  IoSessionStateLoggedOn,
  IoSessionStateLoggedOff,
  IoSessionStateTerminated,
  IoSessionStateMax
} IO_SESSION_STATE, *PIO_SESSION_STATE;
typedef enum _IO_COMPLETION_ROUTINE_RESULT {
  ContinueCompletion = ((NTSTATUS)0x00000000),
  StopCompletion = ((NTSTATUS)0xC0000016)
} IO_COMPLETION_ROUTINE_RESULT, *PIO_COMPLETION_ROUTINE_RESULT;
typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY {
  PHYSICAL_ADDRESS MessageAddress;
  KAFFINITY TargetProcessorSet;
  PKINTERRUPT InterruptObject;
  ULONG MessageData;
  ULONG Vector;
  KIRQL Irql;
  KINTERRUPT_MODE Mode;
  KINTERRUPT_POLARITY Polarity;
} IO_INTERRUPT_MESSAGE_INFO_ENTRY, *PIO_INTERRUPT_MESSAGE_INFO_ENTRY;
typedef struct _IO_INTERRUPT_MESSAGE_INFO {
  KIRQL UnifiedIrql;
  ULONG MessageCount;
  IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];
} IO_INTERRUPT_MESSAGE_INFO, *PIO_INTERRUPT_MESSAGE_INFO;
typedef struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS {
  PDEVICE_OBJECT PhysicalDeviceObject;
  PKINTERRUPT *InterruptObject;
  PKSERVICE_ROUTINE ServiceRoutine;
  PVOID ServiceContext;
  PKSPIN_LOCK SpinLock ;
  KIRQL SynchronizeIrql;
  BOOLEAN FloatingSave;
  BOOLEAN ShareVector;
  ULONG Vector;
  KIRQL Irql;
  KINTERRUPT_MODE InterruptMode;
  KAFFINITY ProcessorEnableMask;
  USHORT Group;
} IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS, *PIO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS;
typedef struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS {
  PDEVICE_OBJECT PhysicalDeviceObject;
  PKINTERRUPT *InterruptObject;
  PKSERVICE_ROUTINE ServiceRoutine;
  PVOID ServiceContext;
  PKSPIN_LOCK SpinLock ;
  KIRQL SynchronizeIrql ;
  BOOLEAN FloatingSave;
} IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS, *PIO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS;
typedef struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS {
  PDEVICE_OBJECT PhysicalDeviceObject;
  union {
    PVOID *Generic;
    PIO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
    PKINTERRUPT *InterruptObject;
  } ConnectionContext;
  PKMESSAGE_SERVICE_ROUTINE MessageServiceRoutine;
  PVOID ServiceContext;
  PKSPIN_LOCK SpinLock ;
  KIRQL SynchronizeIrql ;
  BOOLEAN FloatingSave;
  PKSERVICE_ROUTINE FallBackServiceRoutine ;
} IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS, *PIO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS;
typedef struct _IO_CONNECT_INTERRUPT_PARAMETERS {
  ULONG Version;
  __extension__ union {
    IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS FullySpecified;
    IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS LineBased;
    IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS MessageBased;
  } ;
} IO_CONNECT_INTERRUPT_PARAMETERS, *PIO_CONNECT_INTERRUPT_PARAMETERS;
typedef struct _IO_DISCONNECT_INTERRUPT_PARAMETERS {
  ULONG Version;
  union {
    PVOID Generic;
    PKINTERRUPT InterruptObject;
    PIO_INTERRUPT_MESSAGE_INFO InterruptMessageTable;
  } ConnectionContext;
} IO_DISCONNECT_INTERRUPT_PARAMETERS, *PIO_DISCONNECT_INTERRUPT_PARAMETERS;
typedef enum _IO_ACCESS_TYPE {
  ReadAccess,
  WriteAccess,
  ModifyAccess
} IO_ACCESS_TYPE;
typedef enum _IO_ACCESS_MODE {
  SequentialAccess,
  RandomAccess
} IO_ACCESS_MODE;
typedef enum _IO_CONTAINER_NOTIFICATION_CLASS {
  IoSessionStateNotification,
  IoMaxContainerNotificationClass
} IO_CONTAINER_NOTIFICATION_CLASS;
typedef struct _IO_SESSION_STATE_NOTIFICATION {
  ULONG Size;
  ULONG Flags;
  PVOID IoObject;
  ULONG EventMask;
  PVOID Context;
} IO_SESSION_STATE_NOTIFICATION, *PIO_SESSION_STATE_NOTIFICATION;
typedef enum _IO_CONTAINER_INFORMATION_CLASS {
  IoSessionStateInformation,
  IoMaxContainerInformationClass
} IO_CONTAINER_INFORMATION_CLASS;
typedef struct _IO_SESSION_STATE_INFORMATION {
  ULONG SessionId;
  IO_SESSION_STATE SessionState;
  BOOLEAN LocalSession;
} IO_SESSION_STATE_INFORMATION, *PIO_SESSION_STATE_INFORMATION;
typedef struct _IO_REMOVE_LOCK_TRACKING_BLOCK * PIO_REMOVE_LOCK_TRACKING_BLOCK;
typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
  BOOLEAN Removed;
  BOOLEAN Reserved[3];
  volatile LONG IoCount;
  KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK;
typedef struct _IO_REMOVE_LOCK_DBG_BLOCK {
  LONG Signature;
  LONG HighWatermark;
  LONGLONG MaxLockedTicks;
  LONG AllocateTag;
  LIST_ENTRY LockList;
  KSPIN_LOCK Spin;
  volatile LONG LowMemoryCount;
  ULONG Reserved1[4];
  PVOID Reserved2;
  PIO_REMOVE_LOCK_TRACKING_BLOCK Blocks;
} IO_REMOVE_LOCK_DBG_BLOCK;
typedef struct _IO_REMOVE_LOCK {
  IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK;
typedef struct _IO_WORKITEM *PIO_WORKITEM;
typedef void
( IO_WORKITEM_ROUTINE)(
  PDEVICE_OBJECT DeviceObject,
  PVOID Context);
typedef IO_WORKITEM_ROUTINE *PIO_WORKITEM_ROUTINE;
typedef void
( IO_WORKITEM_ROUTINE_EX)(
  PVOID IoObject,
  PVOID Context ,
  PIO_WORKITEM IoWorkItem);
typedef IO_WORKITEM_ROUTINE_EX *PIO_WORKITEM_ROUTINE_EX;
typedef struct _SHARE_ACCESS {
  ULONG OpenCount;
  ULONG Readers;
  ULONG Writers;
  ULONG Deleters;
  ULONG SharedRead;
  ULONG SharedWrite;
  ULONG SharedDelete;
} SHARE_ACCESS, *PSHARE_ACCESS;
typedef enum _CREATE_FILE_TYPE {
  CreateFileTypeNone,
  CreateFileTypeNamedPipe,
  CreateFileTypeMailslot
} CREATE_FILE_TYPE;
typedef struct _IO_STATUS_BLOCK {
  __extension__ union {
    NTSTATUS Status;
    PVOID Pointer;
  } ;
  ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;
typedef struct _IO_STATUS_BLOCK32 {
  NTSTATUS Status;
  ULONG Information;
} IO_STATUS_BLOCK32, *PIO_STATUS_BLOCK32;
typedef void
( *PIO_APC_ROUTINE)(
  PVOID ApcContext,
  PIO_STATUS_BLOCK IoStatusBlock,
  ULONG Reserved);
typedef enum _IO_SESSION_EVENT {
  IoSessionEventIgnore = 0,
  IoSessionEventCreated,
  IoSessionEventTerminated,
  IoSessionEventConnected,
  IoSessionEventDisconnected,
  IoSessionEventLogon,
  IoSessionEventLogoff,
  IoSessionEventMax
} IO_SESSION_EVENT, *PIO_SESSION_EVENT;
typedef struct _IO_SESSION_CONNECT_INFO {
  ULONG SessionId;
  BOOLEAN LocalSession;
} IO_SESSION_CONNECT_INFO, *PIO_SESSION_CONNECT_INFO;
typedef struct _BOOTDISK_INFORMATION {
  LONGLONG BootPartitionOffset;
  LONGLONG SystemPartitionOffset;
  ULONG BootDeviceSignature;
  ULONG SystemDeviceSignature;
} BOOTDISK_INFORMATION, *PBOOTDISK_INFORMATION;
typedef struct _BOOTDISK_INFORMATION_EX {
  LONGLONG BootPartitionOffset;
  LONGLONG SystemPartitionOffset;
  ULONG BootDeviceSignature;
  ULONG SystemDeviceSignature;
  GUID BootDeviceGuid;
  GUID SystemDeviceGuid;
  BOOLEAN BootDeviceIsGpt;
  BOOLEAN SystemDeviceIsGpt;
} BOOTDISK_INFORMATION_EX, *PBOOTDISK_INFORMATION_EX;
#pragma pack(push,1)
typedef struct _EISA_MEMORY_TYPE {
  UCHAR ReadWrite:1;
  UCHAR Cached:1;
  UCHAR Reserved0:1;
  UCHAR Type:2;
  UCHAR Shared:1;
  UCHAR Reserved1:1;
  UCHAR MoreEntries:1;
} EISA_MEMORY_TYPE, *PEISA_MEMORY_TYPE;
typedef struct _EISA_MEMORY_CONFIGURATION {
  EISA_MEMORY_TYPE ConfigurationByte;
  UCHAR DataSize;
  USHORT AddressLowWord;
  UCHAR AddressHighByte;
  USHORT MemorySize;
} EISA_MEMORY_CONFIGURATION, *PEISA_MEMORY_CONFIGURATION;
typedef struct _EISA_IRQ_DESCRIPTOR {
  UCHAR Interrupt:4;
  UCHAR Reserved:1;
  UCHAR LevelTriggered:1;
  UCHAR Shared:1;
  UCHAR MoreEntries:1;
} EISA_IRQ_DESCRIPTOR, *PEISA_IRQ_DESCRIPTOR;
typedef struct _EISA_IRQ_CONFIGURATION {
  EISA_IRQ_DESCRIPTOR ConfigurationByte;
  UCHAR Reserved;
} EISA_IRQ_CONFIGURATION, *PEISA_IRQ_CONFIGURATION;
typedef struct _DMA_CONFIGURATION_BYTE0 {
  UCHAR Channel:3;
  UCHAR Reserved:3;
  UCHAR Shared:1;
  UCHAR MoreEntries:1;
} DMA_CONFIGURATION_BYTE0;
typedef struct _DMA_CONFIGURATION_BYTE1 {
  UCHAR Reserved0:2;
  UCHAR TransferSize:2;
  UCHAR Timing:2;
  UCHAR Reserved1:2;
} DMA_CONFIGURATION_BYTE1;
typedef struct _EISA_DMA_CONFIGURATION {
  DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
  DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
} EISA_DMA_CONFIGURATION, *PEISA_DMA_CONFIGURATION;
typedef struct _EISA_PORT_DESCRIPTOR {
  UCHAR NumberPorts:5;
  UCHAR Reserved:1;
  UCHAR Shared:1;
  UCHAR MoreEntries:1;
} EISA_PORT_DESCRIPTOR, *PEISA_PORT_DESCRIPTOR;
typedef struct _EISA_PORT_CONFIGURATION {
  EISA_PORT_DESCRIPTOR Configuration;
  USHORT PortAddress;
} EISA_PORT_CONFIGURATION, *PEISA_PORT_CONFIGURATION;
typedef struct _CM_EISA_SLOT_INFORMATION {
  UCHAR ReturnCode;
  UCHAR ReturnFlags;
  UCHAR MajorRevision;
  UCHAR MinorRevision;
  USHORT Checksum;
  UCHAR NumberFunctions;
  UCHAR FunctionInformation;
  ULONG CompressedId;
} CM_EISA_SLOT_INFORMATION, *PCM_EISA_SLOT_INFORMATION;
typedef struct _CM_EISA_FUNCTION_INFORMATION {
  ULONG CompressedId;
  UCHAR IdSlotFlags1;
  UCHAR IdSlotFlags2;
  UCHAR MinorRevision;
  UCHAR MajorRevision;
  UCHAR Selections[26];
  UCHAR FunctionFlags;
  UCHAR TypeString[80];
  EISA_MEMORY_CONFIGURATION EisaMemory[9];
  EISA_IRQ_CONFIGURATION EisaIrq[7];
  EISA_DMA_CONFIGURATION EisaDma[4];
  EISA_PORT_CONFIGURATION EisaPort[20];
  UCHAR InitializationData[60];
} CM_EISA_FUNCTION_INFORMATION, *PCM_EISA_FUNCTION_INFORMATION;
#pragma pack(pop)
typedef void
( *PINTERFACE_REFERENCE)(
  PVOID Context);
typedef void
( *PINTERFACE_DEREFERENCE)(
  PVOID Context);
typedef BOOLEAN
( TRANSLATE_BUS_ADDRESS)(
  PVOID Context,
  PHYSICAL_ADDRESS BusAddress,
  ULONG Length,
  PULONG AddressSpace,
  PPHYSICAL_ADDRESS TranslatedAddress);
typedef TRANSLATE_BUS_ADDRESS *PTRANSLATE_BUS_ADDRESS;
typedef struct _DMA_ADAPTER*
( GET_DMA_ADAPTER)(
  PVOID Context,
  struct _DEVICE_DESCRIPTION *DeviceDescriptor,
  PULONG NumberOfMapRegisters);
typedef GET_DMA_ADAPTER *PGET_DMA_ADAPTER;
typedef ULONG
( GET_SET_DEVICE_DATA)(
  PVOID Context,
  ULONG DataType,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef GET_SET_DEVICE_DATA *PGET_SET_DEVICE_DATA;
typedef enum _DEVICE_INSTALL_STATE {
  InstallStateInstalled,
  InstallStateNeedsReinstall,
  InstallStateFailedInstall,
  InstallStateFinishInstall
} DEVICE_INSTALL_STATE, *PDEVICE_INSTALL_STATE;
typedef struct _LEGACY_BUS_INFORMATION {
  GUID BusTypeGuid;
  INTERFACE_TYPE LegacyBusType;
  ULONG BusNumber;
} LEGACY_BUS_INFORMATION, *PLEGACY_BUS_INFORMATION;
typedef enum _DEVICE_REMOVAL_POLICY {
  RemovalPolicyExpectNoRemoval = 1,
  RemovalPolicyExpectOrderlyRemoval = 2,
  RemovalPolicyExpectSurpriseRemoval = 3
} DEVICE_REMOVAL_POLICY, *PDEVICE_REMOVAL_POLICY;
typedef void
(*PREENUMERATE_SELF)(
  PVOID Context);
typedef struct _REENUMERATE_SELF_INTERFACE_STANDARD {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PREENUMERATE_SELF SurpriseRemoveAndReenumerateSelf;
} REENUMERATE_SELF_INTERFACE_STANDARD, *PREENUMERATE_SELF_INTERFACE_STANDARD;
typedef void
( *PIO_DEVICE_EJECT_CALLBACK)(
  NTSTATUS Status,
  PVOID Context );
typedef struct _PCI_DEVICE_PRESENCE_PARAMETERS {
  ULONG Size;
  ULONG Flags;
  USHORT VendorID;
  USHORT DeviceID;
  UCHAR RevisionID;
  USHORT SubVendorID;
  USHORT SubSystemID;
  UCHAR BaseClass;
  UCHAR SubClass;
  UCHAR ProgIf;
} PCI_DEVICE_PRESENCE_PARAMETERS, *PPCI_DEVICE_PRESENCE_PARAMETERS;
typedef BOOLEAN
( PCI_IS_DEVICE_PRESENT)(
  USHORT VendorID,
  USHORT DeviceID,
  UCHAR RevisionID,
  USHORT SubVendorID,
  USHORT SubSystemID,
  ULONG Flags);
typedef PCI_IS_DEVICE_PRESENT *PPCI_IS_DEVICE_PRESENT;
typedef BOOLEAN
( PCI_IS_DEVICE_PRESENT_EX)(
  PVOID Context,
  PPCI_DEVICE_PRESENCE_PARAMETERS Parameters);
typedef PCI_IS_DEVICE_PRESENT_EX *PPCI_IS_DEVICE_PRESENT_EX;
typedef struct _BUS_INTERFACE_STANDARD {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PTRANSLATE_BUS_ADDRESS TranslateBusAddress;
  PGET_DMA_ADAPTER GetDmaAdapter;
  PGET_SET_DEVICE_DATA SetBusData;
  PGET_SET_DEVICE_DATA GetBusData;
} BUS_INTERFACE_STANDARD, *PBUS_INTERFACE_STANDARD;
typedef struct _PCI_DEVICE_PRESENT_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PPCI_IS_DEVICE_PRESENT IsDevicePresent;
  PPCI_IS_DEVICE_PRESENT_EX IsDevicePresentEx;
} PCI_DEVICE_PRESENT_INTERFACE, *PPCI_DEVICE_PRESENT_INTERFACE;
typedef struct _DEVICE_CAPABILITIES {
  USHORT Size;
  USHORT Version;
  ULONG DeviceD1:1;
  ULONG DeviceD2:1;
  ULONG LockSupported:1;
  ULONG EjectSupported:1;
  ULONG Removable:1;
  ULONG DockDevice:1;
  ULONG UniqueID:1;
  ULONG SilentInstall:1;
  ULONG RawDeviceOK:1;
  ULONG SurpriseRemovalOK:1;
  ULONG WakeFromD0:1;
  ULONG WakeFromD1:1;
  ULONG WakeFromD2:1;
  ULONG WakeFromD3:1;
  ULONG HardwareDisabled:1;
  ULONG NonDynamic:1;
  ULONG WarmEjectSupported:1;
  ULONG NoDisplayInUI:1;
  ULONG Reserved:14;
  ULONG Address;
  ULONG UINumber;
  DEVICE_POWER_STATE DeviceState[PowerSystemMaximum];
  SYSTEM_POWER_STATE SystemWake;
  DEVICE_POWER_STATE DeviceWake;
  ULONG D1Latency;
  ULONG D2Latency;
  ULONG D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES;
typedef struct _DEVICE_INTERFACE_CHANGE_NOTIFICATION {
  USHORT Version;
  USHORT Size;
  GUID Event;
  GUID InterfaceClassGuid;
  PUNICODE_STRING SymbolicLinkName;
} DEVICE_INTERFACE_CHANGE_NOTIFICATION, *PDEVICE_INTERFACE_CHANGE_NOTIFICATION;
typedef struct _HWPROFILE_CHANGE_NOTIFICATION {
  USHORT Version;
  USHORT Size;
  GUID Event;
} HWPROFILE_CHANGE_NOTIFICATION, *PHWPROFILE_CHANGE_NOTIFICATION;
typedef struct _INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
} INTERFACE, *PINTERFACE;
typedef struct _PLUGPLAY_NOTIFICATION_HEADER {
  USHORT Version;
  USHORT Size;
  GUID Event;
} PLUGPLAY_NOTIFICATION_HEADER, *PPLUGPLAY_NOTIFICATION_HEADER;
typedef ULONG PNP_DEVICE_STATE, *PPNP_DEVICE_STATE;
typedef struct _TARGET_DEVICE_CUSTOM_NOTIFICATION {
  USHORT Version;
  USHORT Size;
  GUID Event;
  struct _FILE_OBJECT *FileObject;
  LONG NameBufferOffset;
  UCHAR CustomDataBuffer[1];
} TARGET_DEVICE_CUSTOM_NOTIFICATION, *PTARGET_DEVICE_CUSTOM_NOTIFICATION;
typedef struct _TARGET_DEVICE_REMOVAL_NOTIFICATION {
  USHORT Version;
  USHORT Size;
  GUID Event;
  struct _FILE_OBJECT *FileObject;
} TARGET_DEVICE_REMOVAL_NOTIFICATION, *PTARGET_DEVICE_REMOVAL_NOTIFICATION;
typedef NTSTATUS
( *PREPLACE_MAP_MEMORY)(
  PHYSICAL_ADDRESS TargetPhysicalAddress,
  PHYSICAL_ADDRESS SparePhysicalAddress,
  PLARGE_INTEGER NumberOfBytes,
  PVOID *TargetAddress,
  PVOID *SpareAddress);
typedef struct _PNP_REPLACE_MEMORY_LIST {
  ULONG AllocatedCount;
  ULONG Count;
  ULONGLONG TotalLength;
  struct {
    PHYSICAL_ADDRESS Address;
    ULONGLONG Length;
  } Ranges[1];
} PNP_REPLACE_MEMORY_LIST, *PPNP_REPLACE_MEMORY_LIST;
typedef struct _PNP_REPLACE_PROCESSOR_LIST {
  PKAFFINITY Affinity;
  ULONG GroupCount;
  ULONG AllocatedCount;
  ULONG Count;
  ULONG ApicIds[1];
} PNP_REPLACE_PROCESSOR_LIST, *PPNP_REPLACE_PROCESSOR_LIST;
typedef struct _PNP_REPLACE_PROCESSOR_LIST_V1 {
  KAFFINITY AffinityMask;
  ULONG AllocatedCount;
  ULONG Count;
  ULONG ApicIds[1];
} PNP_REPLACE_PROCESSOR_LIST_V1, *PPNP_REPLACE_PROCESSOR_LIST_V1;
typedef struct _PNP_REPLACE_PARAMETERS {
  ULONG Size;
  ULONG Version;
  ULONG64 Target;
  ULONG64 Spare;
  PPNP_REPLACE_PROCESSOR_LIST TargetProcessors;
  PPNP_REPLACE_PROCESSOR_LIST SpareProcessors;
  PPNP_REPLACE_MEMORY_LIST TargetMemory;
  PPNP_REPLACE_MEMORY_LIST SpareMemory;
  PREPLACE_MAP_MEMORY MapMemory;
} PNP_REPLACE_PARAMETERS, *PPNP_REPLACE_PARAMETERS;
typedef void
( *PREPLACE_UNLOAD)(
  void);
typedef NTSTATUS
( *PREPLACE_BEGIN)(
  PPNP_REPLACE_PARAMETERS Parameters,
  PVOID *Context);
typedef NTSTATUS
( *PREPLACE_END)(
  PVOID Context);
typedef NTSTATUS
( *PREPLACE_MIRROR_PHYSICAL_MEMORY)(
  PVOID Context,
  PHYSICAL_ADDRESS PhysicalAddress,
  LARGE_INTEGER ByteCount);
typedef NTSTATUS
( *PREPLACE_SET_PROCESSOR_ID)(
  PVOID Context,
  ULONG ApicId,
  BOOLEAN Target);
typedef NTSTATUS
( *PREPLACE_SWAP)(
  PVOID Context);
typedef NTSTATUS
( *PREPLACE_INITIATE_HARDWARE_MIRROR)(
  PVOID Context);
typedef NTSTATUS
( *PREPLACE_MIRROR_PLATFORM_MEMORY)(
  PVOID Context);
typedef NTSTATUS
( *PREPLACE_GET_MEMORY_DESTINATION)(
  PVOID Context,
  PHYSICAL_ADDRESS SourceAddress,
  PPHYSICAL_ADDRESS DestinationAddress);
typedef NTSTATUS
( *PREPLACE_ENABLE_DISABLE_HARDWARE_QUIESCE)(
  PVOID Context,
  BOOLEAN Enable);
typedef struct _PNP_REPLACE_DRIVER_INTERFACE {
  ULONG Size;
  ULONG Version;
  ULONG Flags;
  PREPLACE_UNLOAD Unload;
  PREPLACE_BEGIN BeginReplace;
  PREPLACE_END EndReplace;
  PREPLACE_MIRROR_PHYSICAL_MEMORY MirrorPhysicalMemory;
  PREPLACE_SET_PROCESSOR_ID SetProcessorId;
  PREPLACE_SWAP Swap;
  PREPLACE_INITIATE_HARDWARE_MIRROR InitiateHardwareMirror;
  PREPLACE_MIRROR_PLATFORM_MEMORY MirrorPlatformMemory;
  PREPLACE_GET_MEMORY_DESTINATION GetMemoryDestination;
  PREPLACE_ENABLE_DISABLE_HARDWARE_QUIESCE EnableDisableHardwareQuiesce;
} PNP_REPLACE_DRIVER_INTERFACE, *PPNP_REPLACE_DRIVER_INTERFACE;
typedef NTSTATUS
( *PREPLACE_DRIVER_INIT)(
  PPNP_REPLACE_DRIVER_INTERFACE Interface,
  PVOID Unused);
typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
  DeviceUsageTypeUndefined,
  DeviceUsageTypePaging,
  DeviceUsageTypeHibernation,
  DeviceUsageTypeDumpFile
} DEVICE_USAGE_NOTIFICATION_TYPE;
typedef struct _POWER_SEQUENCE {
  ULONG SequenceD1;
  ULONG SequenceD2;
  ULONG SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE;
typedef enum {
  DevicePropertyDeviceDescription = 0x0,
  DevicePropertyHardwareID = 0x1,
  DevicePropertyCompatibleIDs = 0x2,
  DevicePropertyBootConfiguration = 0x3,
  DevicePropertyBootConfigurationTranslated = 0x4,
  DevicePropertyClassName = 0x5,
  DevicePropertyClassGuid = 0x6,
  DevicePropertyDriverKeyName = 0x7,
  DevicePropertyManufacturer = 0x8,
  DevicePropertyFriendlyName = 0x9,
  DevicePropertyLocationInformation = 0xa,
  DevicePropertyPhysicalDeviceObjectName = 0xb,
  DevicePropertyBusTypeGuid = 0xc,
  DevicePropertyLegacyBusType = 0xd,
  DevicePropertyBusNumber = 0xe,
  DevicePropertyEnumeratorName = 0xf,
  DevicePropertyAddress = 0x10,
  DevicePropertyUINumber = 0x11,
  DevicePropertyInstallState = 0x12,
  DevicePropertyRemovalPolicy = 0x13,
  DevicePropertyResourceRequirements = 0x14,
  DevicePropertyAllocatedResources = 0x15,
  DevicePropertyContainerID = 0x16
} DEVICE_REGISTRY_PROPERTY;
typedef enum _IO_NOTIFICATION_EVENT_CATEGORY {
  EventCategoryReserved,
  EventCategoryHardwareProfileChange,
  EventCategoryDeviceInterfaceChange,
  EventCategoryTargetDeviceChange
} IO_NOTIFICATION_EVENT_CATEGORY;
typedef enum _IO_PRIORITY_HINT {
  IoPriorityVeryLow = 0,
  IoPriorityLow,
  IoPriorityNormal,
  IoPriorityHigh,
  IoPriorityCritical,
  MaxIoPriorityTypes
} IO_PRIORITY_HINT;
typedef NTSTATUS
( DRIVER_NOTIFICATION_CALLBACK_ROUTINE)(
  PVOID NotificationStructure,
  PVOID Context);
typedef DRIVER_NOTIFICATION_CALLBACK_ROUTINE *PDRIVER_NOTIFICATION_CALLBACK_ROUTINE;
typedef void
( DEVICE_CHANGE_COMPLETE_CALLBACK)(
  PVOID Context);
typedef DEVICE_CHANGE_COMPLETE_CALLBACK *PDEVICE_CHANGE_COMPLETE_CALLBACK;
typedef enum _FILE_INFORMATION_CLASS {
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation,
  FileBothDirectoryInformation,
  FileBasicInformation,
  FileStandardInformation,
  FileInternalInformation,
  FileEaInformation,
  FileAccessInformation,
  FileNameInformation,
  FileRenameInformation,
  FileLinkInformation,
  FileNamesInformation,
  FileDispositionInformation,
  FilePositionInformation,
  FileFullEaInformation,
  FileModeInformation,
  FileAlignmentInformation,
  FileAllInformation,
  FileAllocationInformation,
  FileEndOfFileInformation,
  FileAlternateNameInformation,
  FileStreamInformation,
  FilePipeInformation,
  FilePipeLocalInformation,
  FilePipeRemoteInformation,
  FileMailslotQueryInformation,
  FileMailslotSetInformation,
  FileCompressionInformation,
  FileObjectIdInformation,
  FileCompletionInformation,
  FileMoveClusterInformation,
  FileQuotaInformation,
  FileReparsePointInformation,
  FileNetworkOpenInformation,
  FileAttributeTagInformation,
  FileTrackingInformation,
  FileIdBothDirectoryInformation,
  FileIdFullDirectoryInformation,
  FileValidDataLengthInformation,
  FileShortNameInformation,
  FileIoCompletionNotificationInformation,
  FileIoStatusBlockRangeInformation,
  FileIoPriorityHintInformation,
  FileSfioReserveInformation,
  FileSfioVolumeInformation,
  FileHardLinkInformation,
  FileProcessIdsUsingFileInformation,
  FileNormalizedNameInformation,
  FileNetworkPhysicalNameInformation,
  FileIdGlobalTxDirectoryInformation,
  FileIsRemoteDeviceInformation,
  FileAttributeCacheInformation,
  FileNumaNodeInformation,
  FileStandardLinkInformation,
  FileRemoteProtocolInformation,
  FileMaximumInformation
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;
typedef struct _FILE_POSITION_INFORMATION {
  LARGE_INTEGER CurrentByteOffset;
} FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION;
typedef struct _FILE_BASIC_INFORMATION {
  LARGE_INTEGER CreationTime;
  LARGE_INTEGER LastAccessTime;
  LARGE_INTEGER LastWriteTime;
  LARGE_INTEGER ChangeTime;
  ULONG FileAttributes;
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;
typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION {
  IO_PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFORMATION, *PFILE_IO_PRIORITY_HINT_INFORMATION;
typedef struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
  ULONG Flags;
} FILE_IO_COMPLETION_NOTIFICATION_INFORMATION, *PFILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
typedef struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION {
  PUCHAR IoStatusBlockRange;
  ULONG Length;
} FILE_IOSTATUSBLOCK_RANGE_INFORMATION, *PFILE_IOSTATUSBLOCK_RANGE_INFORMATION;
typedef struct _FILE_IS_REMOTE_DEVICE_INFORMATION {
  BOOLEAN IsRemote;
} FILE_IS_REMOTE_DEVICE_INFORMATION, *PFILE_IS_REMOTE_DEVICE_INFORMATION;
typedef struct _FILE_NUMA_NODE_INFORMATION {
  USHORT NodeNumber;
} FILE_NUMA_NODE_INFORMATION, *PFILE_NUMA_NODE_INFORMATION;
typedef struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION {
  ULONG NumberOfProcessIdsInList;
  ULONG_PTR ProcessIdList[1];
} FILE_PROCESS_IDS_USING_FILE_INFORMATION, *PFILE_PROCESS_IDS_USING_FILE_INFORMATION;
typedef struct _FILE_STANDARD_INFORMATION {
  LARGE_INTEGER AllocationSize;
  LARGE_INTEGER EndOfFile;
  ULONG NumberOfLinks;
  BOOLEAN DeletePending;
  BOOLEAN Directory;
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;
typedef struct _FILE_NETWORK_OPEN_INFORMATION {
  LARGE_INTEGER CreationTime;
  LARGE_INTEGER LastAccessTime;
  LARGE_INTEGER LastWriteTime;
  LARGE_INTEGER ChangeTime;
  LARGE_INTEGER AllocationSize;
  LARGE_INTEGER EndOfFile;
  ULONG FileAttributes;
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;
typedef enum _FSINFOCLASS {
  FileFsVolumeInformation = 1,
  FileFsLabelInformation,
  FileFsSizeInformation,
  FileFsDeviceInformation,
  FileFsAttributeInformation,
  FileFsControlInformation,
  FileFsFullSizeInformation,
  FileFsObjectIdInformation,
  FileFsDriverPathInformation,
  FileFsVolumeFlagsInformation,
  FileFsMaximumInformation
} FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;
typedef struct _FILE_FS_DEVICE_INFORMATION {
  ULONG DeviceType;
  ULONG Characteristics;
} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION;
typedef struct _FILE_FULL_EA_INFORMATION {
  ULONG NextEntryOffset;
  UCHAR Flags;
  UCHAR EaNameLength;
  USHORT EaValueLength;
  CHAR EaName[1];
} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;
typedef struct _FILE_SFIO_RESERVE_INFORMATION {
  ULONG RequestsPerPeriod;
  ULONG Period;
  BOOLEAN RetryFailures;
  BOOLEAN Discardable;
  ULONG RequestSize;
  ULONG NumOutstandingRequests;
} FILE_SFIO_RESERVE_INFORMATION, *PFILE_SFIO_RESERVE_INFORMATION;
typedef struct _FILE_SFIO_VOLUME_INFORMATION {
  ULONG MaximumRequestsPerPeriod;
  ULONG MinimumPeriod;
  ULONG MinimumTransferSize;
} FILE_SFIO_VOLUME_INFORMATION, *PFILE_SFIO_VOLUME_INFORMATION;
typedef BOOLEAN
( FAST_IO_CHECK_IF_POSSIBLE)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  BOOLEAN Wait,
  ULONG LockKey,
  BOOLEAN CheckForReadOperation,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_CHECK_IF_POSSIBLE *PFAST_IO_CHECK_IF_POSSIBLE;
typedef BOOLEAN
( FAST_IO_READ)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  BOOLEAN Wait,
  ULONG LockKey,
  PVOID Buffer,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_READ *PFAST_IO_READ;
typedef BOOLEAN
( FAST_IO_WRITE)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  BOOLEAN Wait,
  ULONG LockKey,
  PVOID Buffer,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_WRITE *PFAST_IO_WRITE;
typedef BOOLEAN
( FAST_IO_QUERY_BASIC_INFO)(
  struct _FILE_OBJECT *FileObject,
  BOOLEAN Wait,
  PFILE_BASIC_INFORMATION Buffer,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_QUERY_BASIC_INFO *PFAST_IO_QUERY_BASIC_INFO;
typedef BOOLEAN
( FAST_IO_QUERY_STANDARD_INFO)(
  struct _FILE_OBJECT *FileObject,
  BOOLEAN Wait,
  PFILE_STANDARD_INFORMATION Buffer,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_QUERY_STANDARD_INFO *PFAST_IO_QUERY_STANDARD_INFO;
typedef BOOLEAN
( FAST_IO_LOCK)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  PLARGE_INTEGER Length,
  PEPROCESS ProcessId,
  ULONG Key,
  BOOLEAN FailImmediately,
  BOOLEAN ExclusiveLock,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_LOCK *PFAST_IO_LOCK;
typedef BOOLEAN
( FAST_IO_UNLOCK_SINGLE)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  PLARGE_INTEGER Length,
  PEPROCESS ProcessId,
  ULONG Key,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_UNLOCK_SINGLE *PFAST_IO_UNLOCK_SINGLE;
typedef BOOLEAN
( FAST_IO_UNLOCK_ALL)(
  struct _FILE_OBJECT *FileObject,
  PEPROCESS ProcessId,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_UNLOCK_ALL *PFAST_IO_UNLOCK_ALL;
typedef BOOLEAN
( FAST_IO_UNLOCK_ALL_BY_KEY)(
  struct _FILE_OBJECT *FileObject,
  PVOID ProcessId,
  ULONG Key,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_UNLOCK_ALL_BY_KEY *PFAST_IO_UNLOCK_ALL_BY_KEY;
typedef BOOLEAN
( FAST_IO_DEVICE_CONTROL)(
  struct _FILE_OBJECT *FileObject,
  BOOLEAN Wait,
  PVOID InputBuffer ,
  ULONG InputBufferLength,
  PVOID OutputBuffer ,
  ULONG OutputBufferLength,
  ULONG IoControlCode,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_DEVICE_CONTROL *PFAST_IO_DEVICE_CONTROL;
typedef void
( FAST_IO_ACQUIRE_FILE)(
  struct _FILE_OBJECT *FileObject);
typedef FAST_IO_ACQUIRE_FILE *PFAST_IO_ACQUIRE_FILE;
typedef void
( FAST_IO_RELEASE_FILE)(
  struct _FILE_OBJECT *FileObject);
typedef FAST_IO_RELEASE_FILE *PFAST_IO_RELEASE_FILE;
typedef void
( FAST_IO_DETACH_DEVICE)(
  struct _DEVICE_OBJECT *SourceDevice,
  struct _DEVICE_OBJECT *TargetDevice);
typedef FAST_IO_DETACH_DEVICE *PFAST_IO_DETACH_DEVICE;
typedef BOOLEAN
( FAST_IO_QUERY_NETWORK_OPEN_INFO)(
  struct _FILE_OBJECT *FileObject,
  BOOLEAN Wait,
  struct _FILE_NETWORK_OPEN_INFORMATION *Buffer,
  struct _IO_STATUS_BLOCK *IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_QUERY_NETWORK_OPEN_INFO *PFAST_IO_QUERY_NETWORK_OPEN_INFO;
typedef NTSTATUS
( FAST_IO_ACQUIRE_FOR_MOD_WRITE)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER EndingOffset,
  struct _ERESOURCE **ResourceToRelease,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_ACQUIRE_FOR_MOD_WRITE *PFAST_IO_ACQUIRE_FOR_MOD_WRITE;
typedef BOOLEAN
( FAST_IO_MDL_READ)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  ULONG LockKey,
  PMDL *MdlChain,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_MDL_READ *PFAST_IO_MDL_READ;
typedef BOOLEAN
( FAST_IO_MDL_READ_COMPLETE)(
  struct _FILE_OBJECT *FileObject,
  PMDL MdlChain,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_MDL_READ_COMPLETE *PFAST_IO_MDL_READ_COMPLETE;
typedef BOOLEAN
( FAST_IO_PREPARE_MDL_WRITE)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  ULONG LockKey,
  PMDL *MdlChain,
  PIO_STATUS_BLOCK IoStatus,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_PREPARE_MDL_WRITE *PFAST_IO_PREPARE_MDL_WRITE;
typedef BOOLEAN
( FAST_IO_MDL_WRITE_COMPLETE)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  PMDL MdlChain,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_MDL_WRITE_COMPLETE *PFAST_IO_MDL_WRITE_COMPLETE;
typedef BOOLEAN
( FAST_IO_READ_COMPRESSED)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  ULONG LockKey,
  PVOID Buffer,
  PMDL *MdlChain,
  PIO_STATUS_BLOCK IoStatus,
  struct _COMPRESSED_DATA_INFO *CompressedDataInfo,
  ULONG CompressedDataInfoLength,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_READ_COMPRESSED *PFAST_IO_READ_COMPRESSED;
typedef BOOLEAN
( FAST_IO_WRITE_COMPRESSED)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  ULONG Length,
  ULONG LockKey,
  PVOID Buffer,
  PMDL *MdlChain,
  PIO_STATUS_BLOCK IoStatus,
  struct _COMPRESSED_DATA_INFO *CompressedDataInfo,
  ULONG CompressedDataInfoLength,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_WRITE_COMPRESSED *PFAST_IO_WRITE_COMPRESSED;
typedef BOOLEAN
( FAST_IO_MDL_READ_COMPLETE_COMPRESSED)(
  struct _FILE_OBJECT *FileObject,
  PMDL MdlChain,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_MDL_READ_COMPLETE_COMPRESSED *PFAST_IO_MDL_READ_COMPLETE_COMPRESSED;
typedef BOOLEAN
( FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED)(
  struct _FILE_OBJECT *FileObject,
  PLARGE_INTEGER FileOffset,
  PMDL MdlChain,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED *PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED;
typedef BOOLEAN
( FAST_IO_QUERY_OPEN)(
  struct _IRP *Irp,
  PFILE_NETWORK_OPEN_INFORMATION NetworkInformation,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_QUERY_OPEN *PFAST_IO_QUERY_OPEN;
typedef NTSTATUS
( FAST_IO_RELEASE_FOR_MOD_WRITE)(
  struct _FILE_OBJECT *FileObject,
  struct _ERESOURCE *ResourceToRelease,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_RELEASE_FOR_MOD_WRITE *PFAST_IO_RELEASE_FOR_MOD_WRITE;
typedef NTSTATUS
( FAST_IO_ACQUIRE_FOR_CCFLUSH)(
  struct _FILE_OBJECT *FileObject,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_ACQUIRE_FOR_CCFLUSH *PFAST_IO_ACQUIRE_FOR_CCFLUSH;
typedef NTSTATUS
( FAST_IO_RELEASE_FOR_CCFLUSH)(
  struct _FILE_OBJECT *FileObject,
  struct _DEVICE_OBJECT *DeviceObject);
typedef FAST_IO_RELEASE_FOR_CCFLUSH *PFAST_IO_RELEASE_FOR_CCFLUSH;
typedef struct _FAST_IO_DISPATCH {
  ULONG SizeOfFastIoDispatch;
  PFAST_IO_CHECK_IF_POSSIBLE FastIoCheckIfPossible;
  PFAST_IO_READ FastIoRead;
  PFAST_IO_WRITE FastIoWrite;
  PFAST_IO_QUERY_BASIC_INFO FastIoQueryBasicInfo;
  PFAST_IO_QUERY_STANDARD_INFO FastIoQueryStandardInfo;
  PFAST_IO_LOCK FastIoLock;
  PFAST_IO_UNLOCK_SINGLE FastIoUnlockSingle;
  PFAST_IO_UNLOCK_ALL FastIoUnlockAll;
  PFAST_IO_UNLOCK_ALL_BY_KEY FastIoUnlockAllByKey;
  PFAST_IO_DEVICE_CONTROL FastIoDeviceControl;
  PFAST_IO_ACQUIRE_FILE AcquireFileForNtCreateSection;
  PFAST_IO_RELEASE_FILE ReleaseFileForNtCreateSection;
  PFAST_IO_DETACH_DEVICE FastIoDetachDevice;
  PFAST_IO_QUERY_NETWORK_OPEN_INFO FastIoQueryNetworkOpenInfo;
  PFAST_IO_ACQUIRE_FOR_MOD_WRITE AcquireForModWrite;
  PFAST_IO_MDL_READ MdlRead;
  PFAST_IO_MDL_READ_COMPLETE MdlReadComplete;
  PFAST_IO_PREPARE_MDL_WRITE PrepareMdlWrite;
  PFAST_IO_MDL_WRITE_COMPLETE MdlWriteComplete;
  PFAST_IO_READ_COMPRESSED FastIoReadCompressed;
  PFAST_IO_WRITE_COMPRESSED FastIoWriteCompressed;
  PFAST_IO_MDL_READ_COMPLETE_COMPRESSED MdlReadCompleteCompressed;
  PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED MdlWriteCompleteCompressed;
  PFAST_IO_QUERY_OPEN FastIoQueryOpen;
  PFAST_IO_RELEASE_FOR_MOD_WRITE ReleaseForModWrite;
  PFAST_IO_ACQUIRE_FOR_CCFLUSH AcquireForCcFlush;
  PFAST_IO_RELEASE_FOR_CCFLUSH ReleaseForCcFlush;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;
typedef struct _SECTION_OBJECT_POINTERS {
  PVOID DataSectionObject;
  PVOID SharedCacheMap;
  PVOID ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS;
typedef struct _IO_COMPLETION_CONTEXT {
  PVOID Port;
  PVOID Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;
typedef struct _FILE_OBJECT {
  CSHORT Type;
  CSHORT Size;
  PDEVICE_OBJECT DeviceObject;
  PVPB Vpb;
  PVOID FsContext;
  PVOID FsContext2;
  PSECTION_OBJECT_POINTERS SectionObjectPointer;
  PVOID PrivateCacheMap;
  NTSTATUS FinalStatus;
  struct _FILE_OBJECT *RelatedFileObject;
  BOOLEAN LockOperation;
  BOOLEAN DeletePending;
  BOOLEAN ReadAccess;
  BOOLEAN WriteAccess;
  BOOLEAN DeleteAccess;
  BOOLEAN SharedRead;
  BOOLEAN SharedWrite;
  BOOLEAN SharedDelete;
  ULONG Flags;
  UNICODE_STRING FileName;
  LARGE_INTEGER CurrentByteOffset;
  volatile ULONG Waiters;
  volatile ULONG Busy;
  PVOID LastLock;
  KEVENT Lock;
  KEVENT Event;
  volatile PIO_COMPLETION_CONTEXT CompletionContext;
  KSPIN_LOCK IrpListLock;
  LIST_ENTRY IrpList;
  volatile PVOID FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT;
typedef struct _IO_ERROR_LOG_PACKET {
  UCHAR MajorFunctionCode;
  UCHAR RetryCount;
  USHORT DumpDataSize;
  USHORT NumberOfStrings;
  USHORT StringOffset;
  USHORT EventCategory;
  NTSTATUS ErrorCode;
  ULONG UniqueErrorValue;
  NTSTATUS FinalStatus;
  ULONG SequenceNumber;
  ULONG IoControlCode;
  LARGE_INTEGER DeviceOffset;
  ULONG DumpData[1];
} IO_ERROR_LOG_PACKET, *PIO_ERROR_LOG_PACKET;
typedef struct _IO_ERROR_LOG_MESSAGE {
  USHORT Type;
  USHORT Size;
  USHORT DriverNameLength;
  LARGE_INTEGER TimeStamp;
  ULONG DriverNameOffset;
  IO_ERROR_LOG_PACKET EntryData;
} IO_ERROR_LOG_MESSAGE, *PIO_ERROR_LOG_MESSAGE;
typedef enum _DMA_WIDTH {
  Width8Bits,
  Width16Bits,
  Width32Bits,
  MaximumDmaWidth
} DMA_WIDTH, *PDMA_WIDTH;
typedef enum _DMA_SPEED {
  Compatible,
  TypeA,
  TypeB,
  TypeC,
  TypeF,
  MaximumDmaSpeed
} DMA_SPEED, *PDMA_SPEED;
typedef struct _DEVICE_DESCRIPTION {
  ULONG Version;
  BOOLEAN Master;
  BOOLEAN ScatterGather;
  BOOLEAN DemandMode;
  BOOLEAN AutoInitialize;
  BOOLEAN Dma32BitAddresses;
  BOOLEAN IgnoreCount;
  BOOLEAN Reserved1;
  BOOLEAN Dma64BitAddresses;
  ULONG BusNumber;
  ULONG DmaChannel;
  INTERFACE_TYPE InterfaceType;
  DMA_WIDTH DmaWidth;
  DMA_SPEED DmaSpeed;
  ULONG MaximumLength;
  ULONG DmaPort;
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION;
typedef enum _DEVICE_RELATION_TYPE {
  BusRelations,
  EjectionRelations,
  PowerRelations,
  RemovalRelations,
  TargetDeviceRelation,
  SingleBusRelations,
  TransportRelations
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;
typedef struct _DEVICE_RELATIONS {
  ULONG Count;
  PDEVICE_OBJECT Objects[1];
} DEVICE_RELATIONS, *PDEVICE_RELATIONS;
typedef struct _DEVOBJ_EXTENSION {
  CSHORT Type;
  USHORT Size;
  PDEVICE_OBJECT DeviceObject;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION;
typedef struct _SCATTER_GATHER_ELEMENT {
  PHYSICAL_ADDRESS Address;
  ULONG Length;
  ULONG_PTR Reserved;
} SCATTER_GATHER_ELEMENT, *PSCATTER_GATHER_ELEMENT;
typedef struct _SCATTER_GATHER_LIST {
  ULONG NumberOfElements;
  ULONG_PTR Reserved;
  SCATTER_GATHER_ELEMENT Elements[1];
} SCATTER_GATHER_LIST, *PSCATTER_GATHER_LIST;
typedef NTSTATUS
( DRIVER_ADD_DEVICE)(
  struct _DRIVER_OBJECT *DriverObject,
  struct _DEVICE_OBJECT *PhysicalDeviceObject);
typedef DRIVER_ADD_DEVICE *PDRIVER_ADD_DEVICE;
typedef struct _DRIVER_EXTENSION {
  struct _DRIVER_OBJECT *DriverObject;
  PDRIVER_ADD_DEVICE AddDevice;
  ULONG Count;
  UNICODE_STRING ServiceKeyName;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION;
typedef NTSTATUS
( DRIVER_INITIALIZE)(
  struct _DRIVER_OBJECT *DriverObject,
  PUNICODE_STRING RegistryPath);
typedef DRIVER_INITIALIZE *PDRIVER_INITIALIZE;
typedef void
( DRIVER_STARTIO)(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp);
typedef DRIVER_STARTIO *PDRIVER_STARTIO;
typedef void
( DRIVER_UNLOAD)(
  struct _DRIVER_OBJECT *DriverObject);
typedef DRIVER_UNLOAD *PDRIVER_UNLOAD;
typedef NTSTATUS
( DRIVER_DISPATCH)(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp);
typedef DRIVER_DISPATCH *PDRIVER_DISPATCH;
typedef struct _DRIVER_OBJECT {
  CSHORT Type;
  CSHORT Size;
  PDEVICE_OBJECT DeviceObject;
  ULONG Flags;
  PVOID DriverStart;
  ULONG DriverSize;
  PVOID DriverSection;
  PDRIVER_EXTENSION DriverExtension;
  UNICODE_STRING DriverName;
  PUNICODE_STRING HardwareDatabase;
  struct _FAST_IO_DISPATCH *FastIoDispatch;
  PDRIVER_INITIALIZE DriverInit;
  PDRIVER_STARTIO DriverStartIo;
  PDRIVER_UNLOAD DriverUnload;
  PDRIVER_DISPATCH MajorFunction[0x1b + 1];
} DRIVER_OBJECT, *PDRIVER_OBJECT;
typedef struct _DMA_ADAPTER {
  USHORT Version;
  USHORT Size;
  struct _DMA_OPERATIONS* DmaOperations;
} DMA_ADAPTER, *PDMA_ADAPTER;
typedef void
( *PPUT_DMA_ADAPTER)(
  PDMA_ADAPTER DmaAdapter);
typedef PVOID
( *PALLOCATE_COMMON_BUFFER)(
  PDMA_ADAPTER DmaAdapter,
  ULONG Length,
  PPHYSICAL_ADDRESS LogicalAddress,
  BOOLEAN CacheEnabled);
typedef void
( *PFREE_COMMON_BUFFER)(
  PDMA_ADAPTER DmaAdapter,
  ULONG Length,
  PHYSICAL_ADDRESS LogicalAddress,
  PVOID VirtualAddress,
  BOOLEAN CacheEnabled);
typedef NTSTATUS
( *PALLOCATE_ADAPTER_CHANNEL)(
  PDMA_ADAPTER DmaAdapter,
  PDEVICE_OBJECT DeviceObject,
  ULONG NumberOfMapRegisters,
  PDRIVER_CONTROL ExecutionRoutine,
  PVOID Context);
typedef BOOLEAN
( *PFLUSH_ADAPTER_BUFFERS)(
  PDMA_ADAPTER DmaAdapter,
  PMDL Mdl,
  PVOID MapRegisterBase,
  PVOID CurrentVa,
  ULONG Length,
  BOOLEAN WriteToDevice);
typedef void
( *PFREE_ADAPTER_CHANNEL)(
  PDMA_ADAPTER DmaAdapter);
typedef void
( *PFREE_MAP_REGISTERS)(
  PDMA_ADAPTER DmaAdapter,
  PVOID MapRegisterBase,
  ULONG NumberOfMapRegisters);
typedef PHYSICAL_ADDRESS
( *PMAP_TRANSFER)(
  PDMA_ADAPTER DmaAdapter,
  PMDL Mdl,
  PVOID MapRegisterBase,
  PVOID CurrentVa,
  PULONG Length,
  BOOLEAN WriteToDevice);
typedef ULONG
( *PGET_DMA_ALIGNMENT)(
  PDMA_ADAPTER DmaAdapter);
typedef ULONG
( *PREAD_DMA_COUNTER)(
  PDMA_ADAPTER DmaAdapter);
typedef void
( DRIVER_LIST_CONTROL)(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp,
  struct _SCATTER_GATHER_LIST *ScatterGather,
  PVOID Context);
typedef DRIVER_LIST_CONTROL *PDRIVER_LIST_CONTROL;
typedef NTSTATUS
( *PGET_SCATTER_GATHER_LIST)(
  PDMA_ADAPTER DmaAdapter,
  PDEVICE_OBJECT DeviceObject,
  PMDL Mdl,
  PVOID CurrentVa,
  ULONG Length,
  PDRIVER_LIST_CONTROL ExecutionRoutine,
  PVOID Context,
  BOOLEAN WriteToDevice);
typedef void
( *PPUT_SCATTER_GATHER_LIST)(
  PDMA_ADAPTER DmaAdapter,
  PSCATTER_GATHER_LIST ScatterGather,
  BOOLEAN WriteToDevice);
typedef NTSTATUS
( *PCALCULATE_SCATTER_GATHER_LIST_SIZE)(
  PDMA_ADAPTER DmaAdapter,
  PMDL Mdl ,
  PVOID CurrentVa,
  ULONG Length,
  PULONG ScatterGatherListSize,
  PULONG pNumberOfMapRegisters );
typedef NTSTATUS
( *PBUILD_SCATTER_GATHER_LIST)(
  PDMA_ADAPTER DmaAdapter,
  PDEVICE_OBJECT DeviceObject,
  PMDL Mdl,
  PVOID CurrentVa,
  ULONG Length,
  PDRIVER_LIST_CONTROL ExecutionRoutine,
  PVOID Context,
  BOOLEAN WriteToDevice,
  PVOID ScatterGatherBuffer,
  ULONG ScatterGatherLength);
typedef NTSTATUS
( *PBUILD_MDL_FROM_SCATTER_GATHER_LIST)(
  PDMA_ADAPTER DmaAdapter,
  PSCATTER_GATHER_LIST ScatterGather,
  PMDL OriginalMdl,
  PMDL *TargetMdl);
typedef struct _DMA_OPERATIONS {
  ULONG Size;
  PPUT_DMA_ADAPTER PutDmaAdapter;
  PALLOCATE_COMMON_BUFFER AllocateCommonBuffer;
  PFREE_COMMON_BUFFER FreeCommonBuffer;
  PALLOCATE_ADAPTER_CHANNEL AllocateAdapterChannel;
  PFLUSH_ADAPTER_BUFFERS FlushAdapterBuffers;
  PFREE_ADAPTER_CHANNEL FreeAdapterChannel;
  PFREE_MAP_REGISTERS FreeMapRegisters;
  PMAP_TRANSFER MapTransfer;
  PGET_DMA_ALIGNMENT GetDmaAlignment;
  PREAD_DMA_COUNTER ReadDmaCounter;
  PGET_SCATTER_GATHER_LIST GetScatterGatherList;
  PPUT_SCATTER_GATHER_LIST PutScatterGatherList;
  PCALCULATE_SCATTER_GATHER_LIST_SIZE CalculateScatterGatherList;
  PBUILD_SCATTER_GATHER_LIST BuildScatterGatherList;
  PBUILD_MDL_FROM_SCATTER_GATHER_LIST BuildMdlFromScatterGatherList;
} DMA_OPERATIONS, *PDMA_OPERATIONS;
typedef struct _IO_RESOURCE_DESCRIPTOR {
  UCHAR Option;
  UCHAR Type;
  UCHAR ShareDisposition;
  UCHAR Spare1;
  USHORT Flags;
  USHORT Spare2;
  union {
    struct {
      ULONG Length;
      ULONG Alignment;
      PHYSICAL_ADDRESS MinimumAddress;
      PHYSICAL_ADDRESS MaximumAddress;
    } Port;
    struct {
      ULONG Length;
      ULONG Alignment;
      PHYSICAL_ADDRESS MinimumAddress;
      PHYSICAL_ADDRESS MaximumAddress;
    } Memory;
    struct {
      ULONG MinimumVector;
      ULONG MaximumVector;
    } Interrupt;
    struct {
      ULONG MinimumChannel;
      ULONG MaximumChannel;
    } Dma;
    struct {
      ULONG Length;
      ULONG Alignment;
      PHYSICAL_ADDRESS MinimumAddress;
      PHYSICAL_ADDRESS MaximumAddress;
    } Generic;
    struct {
      ULONG Data[3];
    } DevicePrivate;
    struct {
      ULONG Length;
      ULONG MinBusNumber;
      ULONG MaxBusNumber;
      ULONG Reserved;
    } BusNumber;
    struct {
      ULONG Priority;
      ULONG Reserved1;
      ULONG Reserved2;
    } ConfigData;
  } u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR;
typedef struct _IO_RESOURCE_LIST {
  USHORT Version;
  USHORT Revision;
  ULONG Count;
  IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST;
typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
  ULONG ListSize;
  INTERFACE_TYPE InterfaceType;
  ULONG BusNumber;
  ULONG SlotNumber;
  ULONG Reserved[3];
  ULONG AlternativeLists;
  IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST;
typedef void
( DRIVER_CANCEL)(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp);
typedef DRIVER_CANCEL *PDRIVER_CANCEL;
typedef struct _IRP {
  CSHORT Type;
  USHORT Size;
  struct _MDL *MdlAddress;
  ULONG Flags;
  union {
    struct _IRP *MasterIrp;
    volatile LONG IrpCount;
    PVOID SystemBuffer;
  } AssociatedIrp;
  LIST_ENTRY ThreadListEntry;
  IO_STATUS_BLOCK IoStatus;
  KPROCESSOR_MODE RequestorMode;
  BOOLEAN PendingReturned;
  CHAR StackCount;
  CHAR CurrentLocation;
  BOOLEAN Cancel;
  KIRQL CancelIrql;
  CCHAR ApcEnvironment;
  UCHAR AllocationFlags;
  PIO_STATUS_BLOCK UserIosb;
  PKEVENT UserEvent;
  union {
    struct {
      __extension__ union {
        PIO_APC_ROUTINE UserApcRoutine;
        PVOID IssuingProcess;
      } ;
      PVOID UserApcContext;
    } AsynchronousParameters;
    LARGE_INTEGER AllocationSize;
  } Overlay;
  volatile PDRIVER_CANCEL CancelRoutine;
  PVOID UserBuffer;
  union {
    struct {
      __extension__ union {
        KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
        __extension__ struct {
          PVOID DriverContext[4];
        } ;
      } ;
      PETHREAD Thread;
      PCHAR AuxiliaryBuffer;
      __extension__ struct {
        LIST_ENTRY ListEntry;
        __extension__ union {
          struct _IO_STACK_LOCATION *CurrentStackLocation;
          ULONG PacketType;
        } ;
      } ;
      struct _FILE_OBJECT *OriginalFileObject;
    } Overlay;
    KAPC Apc;
    PVOID CompletionKey;
  } Tail;
} IRP, *PIRP;
typedef enum _IO_PAGING_PRIORITY {
  IoPagingPriorityInvalid,
  IoPagingPriorityNormal,
  IoPagingPriorityHigh,
  IoPagingPriorityReserved1,
  IoPagingPriorityReserved2
} IO_PAGING_PRIORITY;
typedef NTSTATUS
( IO_COMPLETION_ROUTINE)(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp,
  PVOID Context);
typedef IO_COMPLETION_ROUTINE *PIO_COMPLETION_ROUTINE;
typedef void
( IO_DPC_ROUTINE)(
  struct _KDPC *Dpc,
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp,
  PVOID Context);
typedef IO_DPC_ROUTINE *PIO_DPC_ROUTINE;
typedef NTSTATUS
( *PMM_DLL_INITIALIZE)(
  PUNICODE_STRING RegistryPath);
typedef NTSTATUS
( *PMM_DLL_UNLOAD)(
  void);
typedef void
( IO_TIMER_ROUTINE)(
  struct _DEVICE_OBJECT *DeviceObject,
  PVOID Context);
typedef IO_TIMER_ROUTINE *PIO_TIMER_ROUTINE;
typedef struct _IO_SECURITY_CONTEXT {
  PSECURITY_QUALITY_OF_SERVICE SecurityQos;
  PACCESS_STATE AccessState;
  ACCESS_MASK DesiredAccess;
  ULONG FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT;
struct _IO_CSQ;
typedef struct _IO_CSQ_IRP_CONTEXT {
  ULONG Type;
  struct _IRP *Irp;
  struct _IO_CSQ *Csq;
} IO_CSQ_IRP_CONTEXT, *PIO_CSQ_IRP_CONTEXT;
typedef void
( *PIO_CSQ_INSERT_IRP)(
  struct _IO_CSQ *Csq,
  PIRP Irp);
typedef NTSTATUS
( IO_CSQ_INSERT_IRP_EX)(
  struct _IO_CSQ *Csq,
  PIRP Irp,
  PVOID InsertContext);
typedef IO_CSQ_INSERT_IRP_EX *PIO_CSQ_INSERT_IRP_EX;
typedef void
( *PIO_CSQ_REMOVE_IRP)(
  struct _IO_CSQ *Csq,
  PIRP Irp);
typedef PIRP
( *PIO_CSQ_PEEK_NEXT_IRP)(
  struct _IO_CSQ *Csq,
  PIRP Irp,
  PVOID PeekContext);
typedef void
( *PIO_CSQ_ACQUIRE_LOCK)(
  struct _IO_CSQ *Csq,
  PKIRQL Irql);
typedef void
( *PIO_CSQ_RELEASE_LOCK)(
  struct _IO_CSQ *Csq,
  KIRQL Irql);
typedef void
( *PIO_CSQ_COMPLETE_CANCELED_IRP)(
  struct _IO_CSQ *Csq,
  PIRP Irp);
typedef struct _IO_CSQ {
  ULONG Type;
  PIO_CSQ_INSERT_IRP CsqInsertIrp;
  PIO_CSQ_REMOVE_IRP CsqRemoveIrp;
  PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp;
  PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock;
  PIO_CSQ_RELEASE_LOCK CsqReleaseLock;
  PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp;
  PVOID ReservePointer;
} IO_CSQ, *PIO_CSQ;
typedef enum _BUS_QUERY_ID_TYPE {
  BusQueryDeviceID,
  BusQueryHardwareIDs,
  BusQueryCompatibleIDs,
  BusQueryInstanceID,
  BusQueryDeviceSerialNumber
} BUS_QUERY_ID_TYPE, *PBUS_QUERY_ID_TYPE;
typedef enum _DEVICE_TEXT_TYPE {
  DeviceTextDescription,
  DeviceTextLocationInformation
} DEVICE_TEXT_TYPE, *PDEVICE_TEXT_TYPE;
typedef BOOLEAN
( *PGPE_SERVICE_ROUTINE)(
  PVOID,
  PVOID);
typedef NTSTATUS
( *PGPE_CONNECT_VECTOR)(
  PDEVICE_OBJECT,
  ULONG,
  KINTERRUPT_MODE,
  BOOLEAN,
  PGPE_SERVICE_ROUTINE,
  PVOID,
  PVOID);
typedef NTSTATUS
( *PGPE_DISCONNECT_VECTOR)(
  PVOID);
typedef NTSTATUS
( *PGPE_ENABLE_EVENT)(
  PDEVICE_OBJECT,
  PVOID);
typedef NTSTATUS
( *PGPE_DISABLE_EVENT)(
  PDEVICE_OBJECT,
  PVOID);
typedef NTSTATUS
( *PGPE_CLEAR_STATUS)(
  PDEVICE_OBJECT,
  PVOID);
typedef void
( *PDEVICE_NOTIFY_CALLBACK)(
  PVOID,
  ULONG);
typedef NTSTATUS
( *PREGISTER_FOR_DEVICE_NOTIFICATIONS)(
  PDEVICE_OBJECT,
  PDEVICE_NOTIFY_CALLBACK,
  PVOID);
typedef void
( *PUNREGISTER_FOR_DEVICE_NOTIFICATIONS)(
  PDEVICE_OBJECT,
  PDEVICE_NOTIFY_CALLBACK);
typedef struct _ACPI_INTERFACE_STANDARD {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PGPE_CONNECT_VECTOR GpeConnectVector;
  PGPE_DISCONNECT_VECTOR GpeDisconnectVector;
  PGPE_ENABLE_EVENT GpeEnableEvent;
  PGPE_DISABLE_EVENT GpeDisableEvent;
  PGPE_CLEAR_STATUS GpeClearStatus;
  PREGISTER_FOR_DEVICE_NOTIFICATIONS RegisterForDeviceNotifications;
  PUNREGISTER_FOR_DEVICE_NOTIFICATIONS UnregisterForDeviceNotifications;
} ACPI_INTERFACE_STANDARD, *PACPI_INTERFACE_STANDARD;
typedef BOOLEAN
( *PGPE_SERVICE_ROUTINE2)(
  PVOID ObjectContext,
  PVOID ServiceContext);
typedef NTSTATUS
( *PGPE_CONNECT_VECTOR2)(
  PVOID Context,
  ULONG GpeNumber,
  KINTERRUPT_MODE Mode,
  BOOLEAN Shareable,
  PGPE_SERVICE_ROUTINE ServiceRoutine,
  PVOID ServiceContext,
  PVOID *ObjectContext);
typedef NTSTATUS
( *PGPE_DISCONNECT_VECTOR2)(
  PVOID Context,
  PVOID ObjectContext);
typedef NTSTATUS
( *PGPE_ENABLE_EVENT2)(
  PVOID Context,
  PVOID ObjectContext);
typedef NTSTATUS
( *PGPE_DISABLE_EVENT2)(
  PVOID Context,
  PVOID ObjectContext);
typedef NTSTATUS
( *PGPE_CLEAR_STATUS2)(
  PVOID Context,
  PVOID ObjectContext);
typedef void
( *PDEVICE_NOTIFY_CALLBACK2)(
  PVOID NotificationContext,
  ULONG NotifyCode);
typedef NTSTATUS
( *PREGISTER_FOR_DEVICE_NOTIFICATIONS2)(
  PVOID Context,
  PDEVICE_NOTIFY_CALLBACK2 NotificationHandler,
  PVOID NotificationContext);
typedef void
( *PUNREGISTER_FOR_DEVICE_NOTIFICATIONS2)(
  PVOID Context);
typedef struct _ACPI_INTERFACE_STANDARD2 {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PGPE_CONNECT_VECTOR2 GpeConnectVector;
  PGPE_DISCONNECT_VECTOR2 GpeDisconnectVector;
  PGPE_ENABLE_EVENT2 GpeEnableEvent;
  PGPE_DISABLE_EVENT2 GpeDisableEvent;
  PGPE_CLEAR_STATUS2 GpeClearStatus;
  PREGISTER_FOR_DEVICE_NOTIFICATIONS2 RegisterForDeviceNotifications;
  PUNREGISTER_FOR_DEVICE_NOTIFICATIONS2 UnregisterForDeviceNotifications;
} ACPI_INTERFACE_STANDARD2, *PACPI_INTERFACE_STANDARD2;
typedef struct _IO_STACK_LOCATION {
  UCHAR MajorFunction;
  UCHAR MinorFunction;
  UCHAR Flags;
  UCHAR Control;
  union {
    struct {
      PIO_SECURITY_CONTEXT SecurityContext;
      ULONG Options;
      USHORT __attribute__ ((__aligned__ (8))) FileAttributes;
      USHORT ShareAccess;
      ULONG __attribute__ ((__aligned__ (8))) EaLength;
    } Create;
    struct {
      ULONG Length;
      ULONG __attribute__ ((__aligned__ (8))) Key;
      LARGE_INTEGER ByteOffset;
    } Read;
    struct {
      ULONG Length;
      ULONG __attribute__ ((__aligned__ (8))) Key;
      LARGE_INTEGER ByteOffset;
    } Write;
    struct {
      ULONG Length;
      PUNICODE_STRING FileName;
      FILE_INFORMATION_CLASS FileInformationClass;
      ULONG FileIndex;
    } QueryDirectory;
    struct {
      ULONG Length;
      ULONG CompletionFilter;
    } NotifyDirectory;
    struct {
      ULONG Length;
      FILE_INFORMATION_CLASS __attribute__ ((__aligned__ (8))) FileInformationClass;
    } QueryFile;
    struct {
      ULONG Length;
      FILE_INFORMATION_CLASS __attribute__ ((__aligned__ (8))) FileInformationClass;
      PFILE_OBJECT FileObject;
      __extension__ union {
        __extension__ struct {
          BOOLEAN ReplaceIfExists;
          BOOLEAN AdvanceOnly;
        } ;
        ULONG ClusterCount;
        HANDLE DeleteHandle;
      } ;
    } SetFile;
    struct {
      ULONG Length;
      PVOID EaList;
      ULONG EaListLength;
      ULONG EaIndex;
    } QueryEa;
    struct {
      ULONG Length;
    } SetEa;
    struct {
      ULONG Length;
      FS_INFORMATION_CLASS __attribute__ ((__aligned__ (8))) FsInformationClass;
    } QueryVolume;
    struct {
      ULONG Length;
      FS_INFORMATION_CLASS FsInformationClass;
    } SetVolume;
    struct {
      ULONG OutputBufferLength;
      ULONG InputBufferLength;
      ULONG FsControlCode;
      PVOID Type3InputBuffer;
    } FileSystemControl;
    struct {
      PLARGE_INTEGER Length;
      ULONG Key;
      LARGE_INTEGER ByteOffset;
    } LockControl;
    struct {
      ULONG OutputBufferLength;
      ULONG __attribute__ ((__aligned__ (8))) InputBufferLength;
      ULONG __attribute__ ((__aligned__ (8))) IoControlCode;
      PVOID Type3InputBuffer;
    } DeviceIoControl;
    struct {
      SECURITY_INFORMATION SecurityInformation;
      ULONG __attribute__ ((__aligned__ (8))) Length;
    } QuerySecurity;
    struct {
      SECURITY_INFORMATION SecurityInformation;
      PSECURITY_DESCRIPTOR SecurityDescriptor;
    } SetSecurity;
    struct {
      PVPB Vpb;
      PDEVICE_OBJECT DeviceObject;
    } MountVolume;
    struct {
      PVPB Vpb;
      PDEVICE_OBJECT DeviceObject;
    } VerifyVolume;
    struct {
      struct _SCSI_REQUEST_BLOCK *Srb;
    } Scsi;
    struct {
      ULONG Length;
      PSID StartSid;
      struct _FILE_GET_QUOTA_INFORMATION *SidList;
      ULONG SidListLength;
    } QueryQuota;
    struct {
      ULONG Length;
    } SetQuota;
    struct {
      DEVICE_RELATION_TYPE Type;
    } QueryDeviceRelations;
    struct {
      const GUID *InterfaceType;
      USHORT Size;
      USHORT Version;
      PINTERFACE Interface;
      PVOID InterfaceSpecificData;
    } QueryInterface;
    struct {
      PDEVICE_CAPABILITIES Capabilities;
    } DeviceCapabilities;
    struct {
      PIO_RESOURCE_REQUIREMENTS_LIST IoResourceRequirementList;
    } FilterResourceRequirements;
    struct {
      ULONG WhichSpace;
      PVOID Buffer;
      ULONG Offset;
      ULONG __attribute__ ((__aligned__ (8))) Length;
    } ReadWriteConfig;
    struct {
      BOOLEAN Lock;
    } SetLock;
    struct {
      BUS_QUERY_ID_TYPE IdType;
    } QueryId;
    struct {
      DEVICE_TEXT_TYPE DeviceTextType;
      LCID __attribute__ ((__aligned__ (8))) LocaleId;
    } QueryDeviceText;
    struct {
      BOOLEAN InPath;
      BOOLEAN Reserved[3];
      DEVICE_USAGE_NOTIFICATION_TYPE __attribute__ ((__aligned__ (8))) Type;
    } UsageNotification;
    struct {
      SYSTEM_POWER_STATE PowerState;
    } WaitWake;
    struct {
      PPOWER_SEQUENCE PowerSequence;
    } PowerSequence;
    struct {
      ULONG SystemContext;
      POWER_STATE_TYPE __attribute__ ((__aligned__ (8))) Type;
      POWER_STATE __attribute__ ((__aligned__ (8))) State;
      POWER_ACTION __attribute__ ((__aligned__ (8))) ShutdownType;
    } Power;
    struct {
      PCM_RESOURCE_LIST AllocatedResources;
      PCM_RESOURCE_LIST AllocatedResourcesTranslated;
    } StartDevice;
    struct {
      ULONG_PTR ProviderId;
      PVOID DataPath;
      ULONG BufferSize;
      PVOID Buffer;
    } WMI;
    struct {
      PVOID Argument1;
      PVOID Argument2;
      PVOID Argument3;
      PVOID Argument4;
    } Others;
  } Parameters;
  PDEVICE_OBJECT DeviceObject;
  PFILE_OBJECT FileObject;
  PIO_COMPLETION_ROUTINE CompletionRoutine;
  PVOID Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION;
typedef void
( FWMI_NOTIFICATION_CALLBACK)(
  PVOID Wnode,
  PVOID Context);
typedef FWMI_NOTIFICATION_CALLBACK *WMI_NOTIFICATION_CALLBACK;
typedef struct _PCI_SLOT_NUMBER {
  union {
    struct {
      ULONG DeviceNumber:5;
      ULONG FunctionNumber:3;
      ULONG Reserved:24;
    } bits;
    ULONG AsULONG;
  } u;
} PCI_SLOT_NUMBER, *PPCI_SLOT_NUMBER;
typedef struct _PCI_COMMON_HEADER {
  USHORT VendorID; USHORT DeviceID; USHORT Command; USHORT Status; UCHAR RevisionID; UCHAR ProgIf; UCHAR SubClass; UCHAR BaseClass; UCHAR CacheLineSize; UCHAR LatencyTimer; UCHAR HeaderType; UCHAR BIST; union { struct { ULONG BaseAddresses[6]; ULONG CIS; USHORT SubVendorID; USHORT SubSystemID; ULONG ROMBaseAddress; UCHAR CapabilitiesPtr; UCHAR Reserved1[3]; ULONG Reserved2; UCHAR InterruptLine; UCHAR InterruptPin; UCHAR MinimumGrant; UCHAR MaximumLatency; } type0; struct { ULONG BaseAddresses[2]; UCHAR PrimaryBus; UCHAR SecondaryBus; UCHAR SubordinateBus; UCHAR SecondaryLatency; UCHAR IOBase; UCHAR IOLimit; USHORT SecondaryStatus; USHORT MemoryBase; USHORT MemoryLimit; USHORT PrefetchBase; USHORT PrefetchLimit; ULONG PrefetchBaseUpper32; ULONG PrefetchLimitUpper32; USHORT IOBaseUpper16; USHORT IOLimitUpper16; UCHAR CapabilitiesPtr; UCHAR Reserved1[3]; ULONG ROMBaseAddress; UCHAR InterruptLine; UCHAR InterruptPin; USHORT BridgeControl; } type1; struct { ULONG SocketRegistersBaseAddress; UCHAR CapabilitiesPtr; UCHAR Reserved; USHORT SecondaryStatus; UCHAR PrimaryBus; UCHAR SecondaryBus; UCHAR SubordinateBus; UCHAR SecondaryLatency; struct { ULONG Base; ULONG Limit; } Range[5 -1]; UCHAR InterruptLine; UCHAR InterruptPin; USHORT BridgeControl; } type2; } u;
} PCI_COMMON_HEADER, *PPCI_COMMON_HEADER;
typedef struct _PCI_COMMON_CONFIG {
  __extension__ struct {
    USHORT VendorID; USHORT DeviceID; USHORT Command; USHORT Status; UCHAR RevisionID; UCHAR ProgIf; UCHAR SubClass; UCHAR BaseClass; UCHAR CacheLineSize; UCHAR LatencyTimer; UCHAR HeaderType; UCHAR BIST; union { struct { ULONG BaseAddresses[6]; ULONG CIS; USHORT SubVendorID; USHORT SubSystemID; ULONG ROMBaseAddress; UCHAR CapabilitiesPtr; UCHAR Reserved1[3]; ULONG Reserved2; UCHAR InterruptLine; UCHAR InterruptPin; UCHAR MinimumGrant; UCHAR MaximumLatency; } type0; struct { ULONG BaseAddresses[2]; UCHAR PrimaryBus; UCHAR SecondaryBus; UCHAR SubordinateBus; UCHAR SecondaryLatency; UCHAR IOBase; UCHAR IOLimit; USHORT SecondaryStatus; USHORT MemoryBase; USHORT MemoryLimit; USHORT PrefetchBase; USHORT PrefetchLimit; ULONG PrefetchBaseUpper32; ULONG PrefetchLimitUpper32; USHORT IOBaseUpper16; USHORT IOLimitUpper16; UCHAR CapabilitiesPtr; UCHAR Reserved1[3]; ULONG ROMBaseAddress; UCHAR InterruptLine; UCHAR InterruptPin; USHORT BridgeControl; } type1; struct { ULONG SocketRegistersBaseAddress; UCHAR CapabilitiesPtr; UCHAR Reserved; USHORT SecondaryStatus; UCHAR PrimaryBus; UCHAR SecondaryBus; UCHAR SubordinateBus; UCHAR SecondaryLatency; struct { ULONG Base; ULONG Limit; } Range[5 -1]; UCHAR InterruptLine; UCHAR InterruptPin; USHORT BridgeControl; } type2; } u;
  };
  UCHAR DeviceSpecific[192];
} PCI_COMMON_CONFIG, *PPCI_COMMON_CONFIG;
typedef struct _PCI_CAPABILITIES_HEADER {
  UCHAR CapabilityID;
  UCHAR Next;
} PCI_CAPABILITIES_HEADER, *PPCI_CAPABILITIES_HEADER;
typedef struct _PCI_PMC {
  UCHAR Version:3;
  UCHAR PMEClock:1;
  UCHAR Rsvd1:1;
  UCHAR DeviceSpecificInitialization:1;
  UCHAR Rsvd2:2;
  struct _PM_SUPPORT {
    UCHAR Rsvd2:1;
    UCHAR D1:1;
    UCHAR D2:1;
    UCHAR PMED0:1;
    UCHAR PMED1:1;
    UCHAR PMED2:1;
    UCHAR PMED3Hot:1;
    UCHAR PMED3Cold:1;
  } Support;
} PCI_PMC, *PPCI_PMC;
typedef struct _PCI_PMCSR {
  USHORT PowerState:2;
  USHORT Rsvd1:6;
  USHORT PMEEnable:1;
  USHORT DataSelect:4;
  USHORT DataScale:2;
  USHORT PMEStatus:1;
} PCI_PMCSR, *PPCI_PMCSR;
typedef struct _PCI_PMCSR_BSE {
  UCHAR Rsvd1:6;
  UCHAR D3HotSupportsStopClock:1;
  UCHAR BusPowerClockControlEnabled:1;
} PCI_PMCSR_BSE, *PPCI_PMCSR_BSE;
typedef struct _PCI_PM_CAPABILITY {
  PCI_CAPABILITIES_HEADER Header;
  union {
    PCI_PMC Capabilities;
    USHORT AsUSHORT;
  } PMC;
    union {
      PCI_PMCSR ControlStatus;
      USHORT AsUSHORT;
    } PMCSR;
    union {
      PCI_PMCSR_BSE BridgeSupport;
      UCHAR AsUCHAR;
    } PMCSR_BSE;
  UCHAR Data;
} PCI_PM_CAPABILITY, *PPCI_PM_CAPABILITY;
typedef struct {
  PCI_CAPABILITIES_HEADER Header;
  union {
    struct {
      USHORT DataParityErrorRecoveryEnable:1;
      USHORT EnableRelaxedOrdering:1;
      USHORT MaxMemoryReadByteCount:2;
      USHORT MaxOutstandingSplitTransactions:3;
      USHORT Reserved:9;
    } bits;
    USHORT AsUSHORT;
  } Command;
  union {
    struct {
      ULONG FunctionNumber:3;
      ULONG DeviceNumber:5;
      ULONG BusNumber:8;
      ULONG Device64Bit:1;
      ULONG Capable133MHz:1;
      ULONG SplitCompletionDiscarded:1;
      ULONG UnexpectedSplitCompletion:1;
      ULONG DeviceComplexity:1;
      ULONG DesignedMaxMemoryReadByteCount:2;
      ULONG DesignedMaxOutstandingSplitTransactions:3;
      ULONG DesignedMaxCumulativeReadSize:3;
      ULONG ReceivedSplitCompletionErrorMessage:1;
      ULONG CapablePCIX266:1;
      ULONG CapablePCIX533:1;
      } bits;
    ULONG AsULONG;
  } Status;
} PCI_X_CAPABILITY, *PPCI_X_CAPABILITY;
typedef struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER {
  USHORT CapabilityID;
  USHORT Version:4;
  USHORT Next:12;
} PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER, *PPCI_EXPRESS_ENHANCED_CAPABILITY_HEADER;
typedef struct _PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY {
  PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
  ULONG LowSerialNumber;
  ULONG HighSerialNumber;
} PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY, *PPCI_EXPRESS_SERIAL_NUMBER_CAPABILITY;
typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS {
  __extension__ struct {
    ULONG Undefined:1;
    ULONG Reserved1:3;
    ULONG DataLinkProtocolError:1;
    ULONG SurpriseDownError:1;
    ULONG Reserved2:6;
    ULONG PoisonedTLP:1;
    ULONG FlowControlProtocolError:1;
    ULONG CompletionTimeout:1;
    ULONG CompleterAbort:1;
    ULONG UnexpectedCompletion:1;
    ULONG ReceiverOverflow:1;
    ULONG MalformedTLP:1;
    ULONG ECRCError:1;
    ULONG UnsupportedRequestError:1;
    ULONG Reserved3:11;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS, *PPCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS;
typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK {
  __extension__ struct {
    ULONG Undefined:1;
    ULONG Reserved1:3;
    ULONG DataLinkProtocolError:1;
    ULONG SurpriseDownError:1;
    ULONG Reserved2:6;
    ULONG PoisonedTLP:1;
    ULONG FlowControlProtocolError:1;
    ULONG CompletionTimeout:1;
    ULONG CompleterAbort:1;
    ULONG UnexpectedCompletion:1;
    ULONG ReceiverOverflow:1;
    ULONG MalformedTLP:1;
    ULONG ECRCError:1;
    ULONG UnsupportedRequestError:1;
    ULONG Reserved3:11;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK, *PPCI_EXPRESS_UNCORRECTABLE_ERROR_MASK;
typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY {
  __extension__ struct {
    ULONG Undefined:1;
    ULONG Reserved1:3;
    ULONG DataLinkProtocolError:1;
    ULONG SurpriseDownError:1;
    ULONG Reserved2:6;
    ULONG PoisonedTLP:1;
    ULONG FlowControlProtocolError:1;
    ULONG CompletionTimeout:1;
    ULONG CompleterAbort:1;
    ULONG UnexpectedCompletion:1;
    ULONG ReceiverOverflow:1;
    ULONG MalformedTLP:1;
    ULONG ECRCError:1;
    ULONG UnsupportedRequestError:1;
    ULONG Reserved3:11;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY, *PPCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY;
typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS {
  __extension__ struct {
    ULONG ReceiverError:1;
    ULONG Reserved1:5;
    ULONG BadTLP:1;
    ULONG BadDLLP:1;
    ULONG ReplayNumRollover:1;
    ULONG Reserved2:3;
    ULONG ReplayTimerTimeout:1;
    ULONG AdvisoryNonFatalError:1;
    ULONG Reserved3:18;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_CORRECTABLE_ERROR_STATUS, *PPCI_CORRECTABLE_ERROR_STATUS;
typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK {
  __extension__ struct {
    ULONG ReceiverError:1;
    ULONG Reserved1:5;
    ULONG BadTLP:1;
    ULONG BadDLLP:1;
    ULONG ReplayNumRollover:1;
    ULONG Reserved2:3;
    ULONG ReplayTimerTimeout:1;
    ULONG AdvisoryNonFatalError:1;
    ULONG Reserved3:18;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_CORRECTABLE_ERROR_MASK, *PPCI_CORRECTABLE_ERROR_MASK;
typedef union _PCI_EXPRESS_AER_CAPABILITIES {
  __extension__ struct {
    ULONG FirstErrorPointer:5;
    ULONG ECRCGenerationCapable:1;
    ULONG ECRCGenerationEnable:1;
    ULONG ECRCCheckCapable:1;
    ULONG ECRCCheckEnable:1;
    ULONG Reserved:23;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_AER_CAPABILITIES, *PPCI_EXPRESS_AER_CAPABILITIES;
typedef union _PCI_EXPRESS_ROOT_ERROR_COMMAND {
  __extension__ struct {
    ULONG CorrectableErrorReportingEnable:1;
    ULONG NonFatalErrorReportingEnable:1;
    ULONG FatalErrorReportingEnable:1;
    ULONG Reserved:29;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_ROOT_ERROR_COMMAND, *PPCI_EXPRESS_ROOT_ERROR_COMMAND;
typedef union _PCI_EXPRESS_ROOT_ERROR_STATUS {
  __extension__ struct {
    ULONG CorrectableErrorReceived:1;
    ULONG MultipleCorrectableErrorsReceived:1;
    ULONG UncorrectableErrorReceived:1;
    ULONG MultipleUncorrectableErrorsReceived:1;
    ULONG FirstUncorrectableFatal:1;
    ULONG NonFatalErrorMessagesReceived:1;
    ULONG FatalErrorMessagesReceived:1;
    ULONG Reserved:20;
    ULONG AdvancedErrorInterruptMessageNumber:5;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_ROOT_ERROR_STATUS, *PPCI_EXPRESS_ROOT_ERROR_STATUS;
typedef union _PCI_EXPRESS_ERROR_SOURCE_ID {
  __extension__ struct {
    USHORT CorrectableSourceIdFun:3;
    USHORT CorrectableSourceIdDev:5;
    USHORT CorrectableSourceIdBus:8;
    USHORT UncorrectableSourceIdFun:3;
    USHORT UncorrectableSourceIdDev:5;
    USHORT UncorrectableSourceIdBus:8;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_ERROR_SOURCE_ID, *PPCI_EXPRESS_ERROR_SOURCE_ID;
typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS {
  __extension__ struct {
    ULONG TargetAbortOnSplitCompletion:1;
    ULONG MasterAbortOnSplitCompletion:1;
    ULONG ReceivedTargetAbort:1;
    ULONG ReceivedMasterAbort:1;
    ULONG RsvdZ:1;
    ULONG UnexpectedSplitCompletionError:1;
    ULONG UncorrectableSplitCompletion:1;
    ULONG UncorrectableDataError:1;
    ULONG UncorrectableAttributeError:1;
    ULONG UncorrectableAddressError:1;
    ULONG DelayedTransactionDiscardTimerExpired:1;
    ULONG PERRAsserted:1;
    ULONG SERRAsserted:1;
    ULONG InternalBridgeError:1;
    ULONG Reserved:18;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS, *PPCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS;
typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK {
  __extension__ struct {
    ULONG TargetAbortOnSplitCompletion:1;
    ULONG MasterAbortOnSplitCompletion:1;
    ULONG ReceivedTargetAbort:1;
    ULONG ReceivedMasterAbort:1;
    ULONG RsvdZ:1;
    ULONG UnexpectedSplitCompletionError:1;
    ULONG UncorrectableSplitCompletion:1;
    ULONG UncorrectableDataError:1;
    ULONG UncorrectableAttributeError:1;
    ULONG UncorrectableAddressError:1;
    ULONG DelayedTransactionDiscardTimerExpired:1;
    ULONG PERRAsserted:1;
    ULONG SERRAsserted:1;
    ULONG InternalBridgeError:1;
    ULONG Reserved:18;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK, *PPCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK;
typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY {
  __extension__ struct {
    ULONG TargetAbortOnSplitCompletion:1;
    ULONG MasterAbortOnSplitCompletion:1;
    ULONG ReceivedTargetAbort:1;
    ULONG ReceivedMasterAbort:1;
    ULONG RsvdZ:1;
    ULONG UnexpectedSplitCompletionError:1;
    ULONG UncorrectableSplitCompletion:1;
    ULONG UncorrectableDataError:1;
    ULONG UncorrectableAttributeError:1;
    ULONG UncorrectableAddressError:1;
    ULONG DelayedTransactionDiscardTimerExpired:1;
    ULONG PERRAsserted:1;
    ULONG SERRAsserted:1;
    ULONG InternalBridgeError:1;
    ULONG Reserved:18;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY, *PPCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY;
typedef union _PCI_EXPRESS_SEC_AER_CAPABILITIES {
  __extension__ struct {
    ULONG SecondaryUncorrectableFirstErrorPtr:5;
    ULONG Reserved:27;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SEC_AER_CAPABILITIES, *PPCI_EXPRESS_SEC_AER_CAPABILITIES;
typedef struct _PCI_EXPRESS_AER_CAPABILITY {
  PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
  PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
  PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
  PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
  ULONG HeaderLog[4];
  PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
  PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
  PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
  PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
  ULONG SecHeaderLog[4];
} PCI_EXPRESS_AER_CAPABILITY, *PPCI_EXPRESS_AER_CAPABILITY;
typedef struct _PCI_EXPRESS_ROOTPORT_AER_CAPABILITY {
  PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
  PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
  PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
  PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
  ULONG HeaderLog[4];
  PCI_EXPRESS_ROOT_ERROR_COMMAND RootErrorCommand;
  PCI_EXPRESS_ROOT_ERROR_STATUS RootErrorStatus;
  PCI_EXPRESS_ERROR_SOURCE_ID ErrorSourceId;
} PCI_EXPRESS_ROOTPORT_AER_CAPABILITY, *PPCI_EXPRESS_ROOTPORT_AER_CAPABILITY;
typedef struct _PCI_EXPRESS_BRIDGE_AER_CAPABILITY {
  PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
  PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
  PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
  PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
  PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
  ULONG HeaderLog[4];
  PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
  PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
  PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
  PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
  ULONG SecHeaderLog[4];
} PCI_EXPRESS_BRIDGE_AER_CAPABILITY, *PPCI_EXPRESS_BRIDGE_AER_CAPABILITY;
typedef union _PCI_EXPRESS_SRIOV_CAPS {
  __extension__ struct {
    ULONG VFMigrationCapable:1;
    ULONG Reserved1:20;
    ULONG VFMigrationInterruptNumber:11;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SRIOV_CAPS, *PPCI_EXPRESS_SRIOV_CAPS;
typedef union _PCI_EXPRESS_SRIOV_CONTROL {
  __extension__ struct {
    USHORT VFEnable:1;
    USHORT VFMigrationEnable:1;
    USHORT VFMigrationInterruptEnable:1;
    USHORT VFMemorySpaceEnable:1;
    USHORT ARICapableHierarchy:1;
    USHORT Reserved1:11;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_SRIOV_CONTROL, *PPCI_EXPRESS_SRIOV_CONTROL;
typedef union _PCI_EXPRESS_SRIOV_STATUS {
  __extension__ struct {
    USHORT VFMigrationStatus:1;
    USHORT Reserved1:15;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_SRIOV_STATUS, *PPCI_EXPRESS_SRIOV_STATUS;
typedef union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY {
  __extension__ struct {
    ULONG VFMigrationStateBIR:3;
    ULONG VFMigrationStateOffset:29;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY, *PPCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY;
typedef struct _PCI_EXPRESS_SRIOV_CAPABILITY {
  PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
  PCI_EXPRESS_SRIOV_CAPS SRIOVCapabilities;
  PCI_EXPRESS_SRIOV_CONTROL SRIOVControl;
  PCI_EXPRESS_SRIOV_STATUS SRIOVStatus;
  USHORT InitialVFs;
  USHORT TotalVFs;
  USHORT NumVFs;
  UCHAR FunctionDependencyLink;
  UCHAR RsvdP1;
  USHORT FirstVFOffset;
  USHORT VFStride;
  USHORT RsvdP2;
  USHORT VFDeviceId;
  ULONG SupportedPageSizes;
  ULONG SystemPageSize;
  ULONG BaseAddresses[6];
  PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY VFMigrationStateArrayOffset;
} PCI_EXPRESS_SRIOV_CAPABILITY, *PPCI_EXPRESS_SRIOV_CAPABILITY;
typedef NTSTATUS
( PCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE)(
  PVOID Context);
typedef PCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE *PPCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE;
typedef NTSTATUS
( PCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE)(
  PVOID Context);
typedef PCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE *PPCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE;
typedef struct _PCI_EXPRESS_LINK_QUIESCENT_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PPCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE PciExpressEnterLinkQuiescentMode;
  PPCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE PciExpressExitLinkQuiescentMode;
} PCI_EXPRESS_LINK_QUIESCENT_INTERFACE, *PPCI_EXPRESS_LINK_QUIESCENT_INTERFACE;
typedef ULONG
( *PPCI_EXPRESS_ROOT_PORT_READ_CONFIG_SPACE)(
  PVOID Context,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef ULONG
( *PPCI_EXPRESS_ROOT_PORT_WRITE_CONFIG_SPACE)(
  PVOID Context,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef struct _PCI_EXPRESS_ROOT_PORT_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PPCI_EXPRESS_ROOT_PORT_READ_CONFIG_SPACE ReadConfigSpace;
  PPCI_EXPRESS_ROOT_PORT_WRITE_CONFIG_SPACE WriteConfigSpace;
} PCI_EXPRESS_ROOT_PORT_INTERFACE, *PPCI_EXPRESS_ROOT_PORT_INTERFACE;
typedef NTSTATUS
( PCI_MSIX_SET_ENTRY)(
  PVOID Context,
  ULONG TableEntry,
  ULONG MessageNumber);
typedef PCI_MSIX_SET_ENTRY *PPCI_MSIX_SET_ENTRY;
typedef NTSTATUS
( PCI_MSIX_MASKUNMASK_ENTRY)(
  PVOID Context,
  ULONG TableEntry);
typedef PCI_MSIX_MASKUNMASK_ENTRY *PPCI_MSIX_MASKUNMASK_ENTRY;
typedef NTSTATUS
( PCI_MSIX_GET_ENTRY)(
  PVOID Context,
  ULONG TableEntry,
  PULONG MessageNumber,
  PBOOLEAN Masked);
typedef PCI_MSIX_GET_ENTRY *PPCI_MSIX_GET_ENTRY;
typedef NTSTATUS
( PCI_MSIX_GET_TABLE_SIZE)(
  PVOID Context,
  PULONG TableSize);
typedef PCI_MSIX_GET_TABLE_SIZE *PPCI_MSIX_GET_TABLE_SIZE;
typedef struct _PCI_MSIX_TABLE_CONFIG_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PPCI_MSIX_SET_ENTRY SetTableEntry;
  PPCI_MSIX_MASKUNMASK_ENTRY MaskTableEntry;
  PPCI_MSIX_MASKUNMASK_ENTRY UnmaskTableEntry;
  PPCI_MSIX_GET_ENTRY GetTableEntry;
  PPCI_MSIX_GET_TABLE_SIZE GetTableSize;
} PCI_MSIX_TABLE_CONFIG_INTERFACE, *PPCI_MSIX_TABLE_CONFIG_INTERFACE;
typedef ULONG OB_OPERATION;
typedef struct _OB_PRE_CREATE_HANDLE_INFORMATION {
  ACCESS_MASK DesiredAccess;
  ACCESS_MASK OriginalDesiredAccess;
} OB_PRE_CREATE_HANDLE_INFORMATION, *POB_PRE_CREATE_HANDLE_INFORMATION;
typedef struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION {
  ACCESS_MASK DesiredAccess;
  ACCESS_MASK OriginalDesiredAccess;
  PVOID SourceProcess;
  PVOID TargetProcess;
} OB_PRE_DUPLICATE_HANDLE_INFORMATION, *POB_PRE_DUPLICATE_HANDLE_INFORMATION;
typedef union _OB_PRE_OPERATION_PARAMETERS {
  OB_PRE_CREATE_HANDLE_INFORMATION CreateHandleInformation;
  OB_PRE_DUPLICATE_HANDLE_INFORMATION DuplicateHandleInformation;
} OB_PRE_OPERATION_PARAMETERS, *POB_PRE_OPERATION_PARAMETERS;
typedef struct _OB_PRE_OPERATION_INFORMATION {
  OB_OPERATION Operation;
  __extension__ union {
    ULONG Flags;
    __extension__ struct {
      ULONG KernelHandle:1;
      ULONG Reserved:31;
    } ;
  } ;
  PVOID Object;
  POBJECT_TYPE ObjectType;
  PVOID CallContext;
  POB_PRE_OPERATION_PARAMETERS Parameters;
} OB_PRE_OPERATION_INFORMATION, *POB_PRE_OPERATION_INFORMATION;
typedef struct _OB_POST_CREATE_HANDLE_INFORMATION {
  ACCESS_MASK GrantedAccess;
} OB_POST_CREATE_HANDLE_INFORMATION, *POB_POST_CREATE_HANDLE_INFORMATION;
typedef struct _OB_POST_DUPLICATE_HANDLE_INFORMATION {
  ACCESS_MASK GrantedAccess;
} OB_POST_DUPLICATE_HANDLE_INFORMATION, *POB_POST_DUPLICATE_HANDLE_INFORMATION;
typedef union _OB_POST_OPERATION_PARAMETERS {
  OB_POST_CREATE_HANDLE_INFORMATION CreateHandleInformation;
  OB_POST_DUPLICATE_HANDLE_INFORMATION DuplicateHandleInformation;
} OB_POST_OPERATION_PARAMETERS, *POB_POST_OPERATION_PARAMETERS;
typedef struct _OB_POST_OPERATION_INFORMATION {
  OB_OPERATION Operation;
  __extension__ union {
    ULONG Flags;
    __extension__ struct {
      ULONG KernelHandle:1;
      ULONG Reserved:31;
    } ;
  } ;
  PVOID Object;
  POBJECT_TYPE ObjectType;
  PVOID CallContext;
  NTSTATUS ReturnStatus;
  POB_POST_OPERATION_PARAMETERS Parameters;
} OB_POST_OPERATION_INFORMATION,*POB_POST_OPERATION_INFORMATION;
typedef enum _OB_PREOP_CALLBACK_STATUS {
  OB_PREOP_SUCCESS
} OB_PREOP_CALLBACK_STATUS, *POB_PREOP_CALLBACK_STATUS;
typedef OB_PREOP_CALLBACK_STATUS
( *POB_PRE_OPERATION_CALLBACK)(
  PVOID RegistrationContext,
  POB_PRE_OPERATION_INFORMATION OperationInformation);
typedef void
( *POB_POST_OPERATION_CALLBACK)(
  PVOID RegistrationContext,
  POB_POST_OPERATION_INFORMATION OperationInformation);
typedef struct _OB_OPERATION_REGISTRATION {
  POBJECT_TYPE *ObjectType;
  OB_OPERATION Operations;
  POB_PRE_OPERATION_CALLBACK PreOperation;
  POB_POST_OPERATION_CALLBACK PostOperation;
} OB_OPERATION_REGISTRATION, *POB_OPERATION_REGISTRATION;
typedef struct _OB_CALLBACK_REGISTRATION {
  USHORT Version;
  USHORT OperationRegistrationCount;
  UNICODE_STRING Altitude;
  PVOID RegistrationContext;
  OB_OPERATION_REGISTRATION *OperationRegistration;
} OB_CALLBACK_REGISTRATION, *POB_CALLBACK_REGISTRATION;
typedef struct _OBJECT_NAME_INFORMATION {
  UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;
extern POBJECT_TYPE __attribute__((dllimport)) *CmKeyObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *ExEventObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *ExSemaphoreObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *IoFileObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *PsThreadType;
extern POBJECT_TYPE __attribute__((dllimport)) *SeTokenObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *PsProcessType;
extern POBJECT_TYPE __attribute__((dllimport)) *TmEnlistmentObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *TmResourceManagerObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *TmTransactionManagerObjectType;
extern POBJECT_TYPE __attribute__((dllimport)) *TmTransactionObjectType;
typedef ULONG64 TRACEHANDLE, *PTRACEHANDLE;
typedef struct _ETW_TRACE_SESSION_SETTINGS {
  ULONG Version;
  ULONG BufferSize;
  ULONG MinimumBuffers;
  ULONG MaximumBuffers;
  ULONG LoggerMode;
  ULONG FlushTimer;
  ULONG FlushThreshold;
  ULONG ClockType;
} ETW_TRACE_SESSION_SETTINGS, *PETW_TRACE_SESSION_SETTINGS;
typedef enum _TRACE_INFORMATION_CLASS {
  TraceIdClass,
  TraceHandleClass,
  TraceEnableFlagsClass,
  TraceEnableLevelClass,
  GlobalLoggerHandleClass,
  EventLoggerHandleClass,
  AllLoggerHandlesClass,
  TraceHandleByNameClass,
  LoggerEventsLostClass,
  TraceSessionSettingsClass,
  LoggerEventsLoggedClass,
  MaxTraceInformationClass
} TRACE_INFORMATION_CLASS;
  typedef ULONGLONG REGHANDLE,*PREGHANDLE;
  typedef struct _EVENT_DATA_DESCRIPTOR {
    ULONGLONG Ptr;
    ULONG Size;
    ULONG Reserved;
  } EVENT_DATA_DESCRIPTOR,*PEVENT_DATA_DESCRIPTOR;
  typedef struct _EVENT_DESCRIPTOR {
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONGLONG Keyword;
  } EVENT_DESCRIPTOR,*PEVENT_DESCRIPTOR;
  typedef const EVENT_DESCRIPTOR *PCEVENT_DESCRIPTOR;
  typedef struct _EVENT_FILTER_DESCRIPTOR {
    ULONGLONG Ptr;
    ULONG Size;
    ULONG Type;
  };
  typedef struct _EVENT_FILTER_DESCRIPTOR EVENT_FILTER_DESCRIPTOR,*PEVENT_FILTER_DESCRIPTOR;
  typedef struct _EVENT_FILTER_HEADER {
    USHORT Id;
    UCHAR Version;
    UCHAR Reserved[5];
    ULONGLONG InstanceId;
    ULONG Size;
    ULONG NextOffset;
  } EVENT_FILTER_HEADER,*PEVENT_FILTER_HEADER;
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void EventDataDescCreate (PEVENT_DATA_DESCRIPTOR evp, const void *d, ULONG sz) {
    evp->Ptr = (ULONGLONG) (ULONG_PTR) d;
    evp->Size = sz;
    evp->Reserved = 0;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void EventDescCreate (PEVENT_DESCRIPTOR ev, USHORT Id, UCHAR ver, UCHAR ch, UCHAR lvl, USHORT t, UCHAR opc, ULONGLONG keyw) {
    ev->Id = Id;
    ev->Version = ver;
    ev->Channel = ch;
    ev->Level = lvl;
    ev->Task = t;
    ev->Opcode = opc;
    ev->Keyword = keyw;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) UCHAR EventDescGetChannel (PCEVENT_DESCRIPTOR ev) {
    return ev->Channel;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) USHORT EventDescGetId (PCEVENT_DESCRIPTOR ev) {
    return ev->Id;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) ULONGLONG EventDescGetKeyword (PCEVENT_DESCRIPTOR ev) {
    return ev->Keyword;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) UCHAR EventDescGetLevel (PCEVENT_DESCRIPTOR ev) {
    return ev->Level;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) UCHAR EventDescGetOpcode (PCEVENT_DESCRIPTOR ev) {
    return ev->Opcode;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) USHORT EventDescGetTask (PCEVENT_DESCRIPTOR ev) {
    return ev->Task;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescOrKeyword (PEVENT_DESCRIPTOR ev, ULONGLONG keyw) {
    ev->Keyword |= keyw;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) UCHAR EventDescGetVersion (PCEVENT_DESCRIPTOR ev) {
    return ev->Version;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetChannel (PEVENT_DESCRIPTOR ev, UCHAR ch) {
    ev->Channel = ch;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetId (PEVENT_DESCRIPTOR ev, USHORT Id) {
    ev->Id = Id;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetKeyword (PEVENT_DESCRIPTOR ev, ULONGLONG keyw) {
    ev->Keyword = keyw;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetLevel (PEVENT_DESCRIPTOR ev, UCHAR lvl) {
    ev->Level = lvl;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetOpcode (PEVENT_DESCRIPTOR ev, UCHAR opc) {
    ev->Opcode = opc;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetTask (PEVENT_DESCRIPTOR ev, USHORT t) {
    ev->Task = t;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) PEVENT_DESCRIPTOR EventDescSetVersion (PEVENT_DESCRIPTOR ev, UCHAR ver) {
    ev->Version = ver;
    return ev;
  }
  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void EventDescZero (PEVENT_DESCRIPTOR ev) {
    memset (ev, 0, sizeof (EVENT_DESCRIPTOR));
  }
typedef void
( *PETWENABLECALLBACK)(
  LPCGUID SourceId,
  ULONG ControlCode,
  UCHAR Level,
  ULONGLONG MatchAnyKeyword,
  ULONGLONG MatchAllKeyword,
  PEVENT_FILTER_DESCRIPTOR FilterData ,
  PVOID CallbackContext );
typedef struct _KFLOATING_SAVE {
  ULONG Dummy;
} KFLOATING_SAVE, *PKFLOATING_SAVE;
typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
KIRQL
KeGetCurrentIrql(void)
{
  return (KIRQL)__readcr8();
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
KeLowerIrql( KIRQL NewIrql)
{
  //ASSERT(KeGetCurrentIrql() >= NewIrql);
  __writecr8(NewIrql);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
KIRQL
KfRaiseIrql( KIRQL NewIrql)
{
  KIRQL OldIrql;
  OldIrql = (KIRQL)__readcr8();
  //ASSERT(OldIrql <= NewIrql);
  __writecr8(NewIrql);
  return OldIrql;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
KIRQL
KeRaiseIrqlToDpcLevel(void)
{
  return KfRaiseIrql(2);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
KIRQL
KeRaiseIrqlToSynchLevel(void)
{
  return KfRaiseIrql(12); // SYNCH_LEVEL = 14 - 2
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PKTHREAD
KeGetCurrentThread(void)
{
  return (struct _KTHREAD *)__readgsqword(0x188);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
InitializeListHead(
  PLIST_ENTRY ListHead)
{
  ListHead->Flink = ListHead->Blink = ListHead;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
BOOLEAN
IsListEmpty(
  const LIST_ENTRY * ListHead)
{
  return (BOOLEAN)(ListHead->Flink == ListHead);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
BOOLEAN
RemoveEntryList(
  PLIST_ENTRY Entry)
{
  PLIST_ENTRY OldFlink;
  PLIST_ENTRY OldBlink;
  OldFlink = Entry->Flink;
  OldBlink = Entry->Blink;
  OldFlink->Blink = OldBlink;
  OldBlink->Flink = OldFlink;
  return (BOOLEAN)(OldFlink == OldBlink);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PLIST_ENTRY
RemoveHeadList(
  PLIST_ENTRY ListHead)
{
  PLIST_ENTRY Flink;
  PLIST_ENTRY Entry;
  Entry = ListHead->Flink;
  Flink = Entry->Flink;
  ListHead->Flink = Flink;
  Flink->Blink = ListHead;
  return Entry;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PLIST_ENTRY
RemoveTailList(
  PLIST_ENTRY ListHead)
{
  PLIST_ENTRY Blink;
  PLIST_ENTRY Entry;
  Entry = ListHead->Blink;
  Blink = Entry->Blink;
  ListHead->Blink = Blink;
  Blink->Flink = ListHead;
  return Entry;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
InsertTailList(
  PLIST_ENTRY ListHead,
  PLIST_ENTRY Entry)
{
  PLIST_ENTRY OldBlink;
  OldBlink = ListHead->Blink;
  Entry->Flink = ListHead;
  Entry->Blink = OldBlink;
  OldBlink->Flink = Entry;
  ListHead->Blink = Entry;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
InsertHeadList(
  PLIST_ENTRY ListHead,
  PLIST_ENTRY Entry)
{
  PLIST_ENTRY OldFlink;
  OldFlink = ListHead->Flink;
  Entry->Flink = OldFlink;
  Entry->Blink = ListHead;
  OldFlink->Blink = Entry;
  ListHead->Flink = Entry;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
AppendTailList(
  PLIST_ENTRY ListHead,
  PLIST_ENTRY ListToAppend)
{
  PLIST_ENTRY ListEnd = ListHead->Blink;
  ListHead->Blink->Flink = ListToAppend;
  ListHead->Blink = ListToAppend->Blink;
  ListToAppend->Blink->Flink = ListHead;
  ListToAppend->Blink = ListEnd;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PSINGLE_LIST_ENTRY
PopEntryList(
  PSINGLE_LIST_ENTRY ListHead)
{
  PSINGLE_LIST_ENTRY FirstEntry;
  FirstEntry = ListHead->Next;
  if (FirstEntry != ((void *)0)) {
    ListHead->Next = FirstEntry->Next;
  }
  return FirstEntry;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
PushEntryList(
  PSINGLE_LIST_ENTRY ListHead,
  PSINGLE_LIST_ENTRY Entry)
{
  Entry->Next = ListHead->Next;
  ListHead->Next = Entry;
}
__attribute__((dllimport))
void

RtlAssert(
  PVOID FailedAssertion,
  PVOID FileName,
  ULONG LineNumber,
  PSTR Message);
__attribute__((dllimport))
void

RtlCopyMemoryNonTemporal(
  void *Destination,
  const void *Source,
  SIZE_T Length);
__attribute__((dllimport))
void

RtlFreeUnicodeString(
  PUNICODE_STRING UnicodeString);
__attribute__((dllimport))
NTSTATUS

RtlGUIDFromString(
  PUNICODE_STRING GuidString,
  GUID *Guid);
__attribute__((dllimport))
void

RtlInitUnicodeString(
  PUNICODE_STRING DestinationString,
  PCWSTR SourceString );
__attribute__((dllimport))
NTSTATUS

RtlStringFromGUID(
  const GUID *const Guid,
  PUNICODE_STRING GuidString);
__attribute__((dllimport))
BOOLEAN

RtlAreBitsClear(
  PRTL_BITMAP BitMapHeader,
  ULONG StartingIndex,
  ULONG Length);
__attribute__((dllimport))
BOOLEAN

RtlAreBitsSet(
  PRTL_BITMAP BitMapHeader,
  ULONG StartingIndex,
  ULONG Length);
__attribute__((dllimport))
NTSTATUS

RtlAnsiStringToUnicodeString(
  PUNICODE_STRING DestinationString,
  PANSI_STRING SourceString,
  BOOLEAN AllocateDestinationString);
__attribute__((dllimport))
ULONG

RtlxAnsiStringToUnicodeSize(
  PCANSI_STRING AnsiString);
__attribute__((dllimport))
NTSTATUS

RtlAppendUnicodeStringToString(
  PUNICODE_STRING Destination,
  PCUNICODE_STRING Source);
__attribute__((dllimport))
NTSTATUS

RtlAppendUnicodeToString(
  PUNICODE_STRING Destination,
  PCWSTR Source);
__attribute__((dllimport))
NTSTATUS

RtlCheckRegistryKey(
  ULONG RelativeTo,
  PWSTR Path);
__attribute__((dllimport))
void

RtlClearAllBits(
  PRTL_BITMAP BitMapHeader);
__attribute__((dllimport))
void

RtlClearBits(
  PRTL_BITMAP BitMapHeader,
  ULONG StartingIndex,
  ULONG NumberToClear);
__attribute__((dllimport))
SIZE_T

RtlCompareMemory(
  const void *Source1,
  const void *Source2,
  SIZE_T Length);
__attribute__((dllimport))
LONG

RtlCompareUnicodeString(
  PCUNICODE_STRING String1,
  PCUNICODE_STRING String2,
  BOOLEAN CaseInSensitive);
__attribute__((dllimport))
LONG

RtlCompareUnicodeStrings(
  PCWCH String1,
  SIZE_T String1Length,
  PCWCH String2,
  SIZE_T String2Length,
  BOOLEAN CaseInSensitive);
__attribute__((dllimport))
void

RtlCopyUnicodeString(
  PUNICODE_STRING DestinationString,
  PCUNICODE_STRING SourceString );
__attribute__((dllimport))
NTSTATUS

RtlCreateRegistryKey(
  ULONG RelativeTo,
  PWSTR Path);
__attribute__((dllimport))
NTSTATUS

RtlCreateSecurityDescriptor(
  PSECURITY_DESCRIPTOR SecurityDescriptor,
  ULONG Revision);
__attribute__((dllimport))
NTSTATUS

RtlDeleteRegistryValue(
  ULONG RelativeTo,
  PCWSTR Path,
  PCWSTR ValueName);
__attribute__((dllimport))
BOOLEAN

RtlEqualUnicodeString(
  const UNICODE_STRING *String1,
  const UNICODE_STRING *String2,
  BOOLEAN CaseInSensitive);
__attribute__((dllimport))
void

RtlFreeAnsiString(
  PANSI_STRING AnsiString);
__attribute__((dllimport))
ULONG

RtlFindClearBits(
  PRTL_BITMAP BitMapHeader,
  ULONG NumberToFind,
  ULONG HintIndex);
__attribute__((dllimport))
ULONG

RtlFindClearBitsAndSet(
  PRTL_BITMAP BitMapHeader,
  ULONG NumberToFind,
  ULONG HintIndex);
__attribute__((dllimport))
ULONG

RtlFindFirstRunClear(
  PRTL_BITMAP BitMapHeader,
  PULONG StartingIndex);
__attribute__((dllimport))
ULONG

RtlFindClearRuns(
  PRTL_BITMAP BitMapHeader,
  PRTL_BITMAP_RUN RunArray,
  ULONG SizeOfRunArray,
  BOOLEAN LocateLongestRuns);
__attribute__((dllimport))
ULONG

RtlFindLastBackwardRunClear(
  PRTL_BITMAP BitMapHeader,
  ULONG FromIndex,
  PULONG StartingRunIndex);
__attribute__((dllimport))
CCHAR

RtlFindLeastSignificantBit(
  ULONGLONG Set);
__attribute__((dllimport))
ULONG

RtlFindLongestRunClear(
  PRTL_BITMAP BitMapHeader,
  PULONG StartingIndex);
__attribute__((dllimport))
CCHAR

RtlFindMostSignificantBit(
  ULONGLONG Set);
__attribute__((dllimport))
ULONG

RtlFindNextForwardRunClear(
  PRTL_BITMAP BitMapHeader,
  ULONG FromIndex,
  PULONG StartingRunIndex);
__attribute__((dllimport))
ULONG

RtlFindSetBits(
  PRTL_BITMAP BitMapHeader,
  ULONG NumberToFind,
  ULONG HintIndex);
__attribute__((dllimport))
ULONG

RtlFindSetBitsAndClear(
  PRTL_BITMAP BitMapHeader,
  ULONG NumberToFind,
  ULONG HintIndex);
__attribute__((dllimport))
void

RtlInitAnsiString(
  PANSI_STRING DestinationString,
  PCSZ SourceString);
__attribute__((dllimport))
void

RtlInitializeBitMap(
  PRTL_BITMAP BitMapHeader,
  PULONG BitMapBuffer,
  ULONG SizeOfBitMap);
__attribute__((dllimport))
void

RtlInitString(
  PSTRING DestinationString,
  PCSZ SourceString);
__attribute__((dllimport))
NTSTATUS

RtlIntegerToUnicodeString(
  ULONG Value,
  ULONG Base ,
  PUNICODE_STRING String);
__attribute__((dllimport))
NTSTATUS

RtlInt64ToUnicodeString(
  ULONGLONG Value,
  ULONG Base ,
  PUNICODE_STRING String);
__attribute__((dllimport))
ULONG

RtlLengthSecurityDescriptor(
  PSECURITY_DESCRIPTOR SecurityDescriptor);
__attribute__((dllimport))
ULONG

RtlNumberOfClearBits(
  PRTL_BITMAP BitMapHeader);
__attribute__((dllimport))
ULONG

RtlNumberOfSetBits(
  PRTL_BITMAP BitMapHeader);
__attribute__((dllimport))
NTSTATUS

RtlQueryRegistryValues(
  ULONG RelativeTo,
  PCWSTR Path,
  PRTL_QUERY_REGISTRY_TABLE QueryTable,
  PVOID Context ,
  PVOID Environment );
__attribute__((dllimport))
void

RtlSetAllBits(
  PRTL_BITMAP BitMapHeader);
__attribute__((dllimport))
void

RtlSetBits(
  PRTL_BITMAP BitMapHeader,
  ULONG StartingIndex,
  ULONG NumberToSet);
__attribute__((dllimport))
NTSTATUS

RtlSetDaclSecurityDescriptor(
  PSECURITY_DESCRIPTOR SecurityDescriptor,
  BOOLEAN DaclPresent,
  PACL Dacl ,
  BOOLEAN DaclDefaulted );
__attribute__((dllimport))
BOOLEAN

RtlTimeFieldsToTime(
  PTIME_FIELDS TimeFields,
  PLARGE_INTEGER Time);
__attribute__((dllimport))
void

RtlTimeToTimeFields(
  PLARGE_INTEGER Time,
  PTIME_FIELDS TimeFields);
__attribute__((dllimport))
ULONG

RtlUlongByteSwap(
  ULONG Source);
__attribute__((dllimport))
ULONGLONG

RtlUlonglongByteSwap(
  ULONGLONG Source);
__attribute__((dllimport))
NTSTATUS

RtlUnicodeStringToAnsiString(
  PANSI_STRING DestinationString,
  PCUNICODE_STRING SourceString,
  BOOLEAN AllocateDestinationString);
__attribute__((dllimport))
ULONG

RtlxUnicodeStringToAnsiSize(
  PCUNICODE_STRING UnicodeString);
__attribute__((dllimport))
NTSTATUS

RtlUnicodeStringToInteger(
  PCUNICODE_STRING String,
  ULONG Base ,
  PULONG Value);
__attribute__((dllimport))
WCHAR

RtlUpcaseUnicodeChar(
  WCHAR SourceCharacter);
__attribute__((dllimport))
USHORT

RtlUshortByteSwap(
  USHORT Source);
__attribute__((dllimport))
BOOLEAN

RtlValidRelativeSecurityDescriptor(
  PSECURITY_DESCRIPTOR SecurityDescriptorInput,
  ULONG SecurityDescriptorLength,
  SECURITY_INFORMATION RequiredInformation);
__attribute__((dllimport))
BOOLEAN

RtlValidSecurityDescriptor(
  PSECURITY_DESCRIPTOR SecurityDescriptor);
__attribute__((dllimport))
NTSTATUS

RtlWriteRegistryValue(
  ULONG RelativeTo,
  PCWSTR Path,
  PCWSTR ValueName,
  ULONG ValueType,
  PVOID ValueData,
  ULONG ValueLength);
__attribute__((dllimport))
void

RtlPrefetchMemoryNonTemporal(
  PVOID Source,
  SIZE_T Length);
__attribute__((dllimport))
void

RtlClearBit(
  PRTL_BITMAP BitMapHeader,
  ULONG BitNumber);
__attribute__((dllimport))
WCHAR

RtlDowncaseUnicodeChar(
  WCHAR SourceCharacter);
__attribute__((dllimport))
void

RtlSetBit(
  PRTL_BITMAP BitMapHeader,
  ULONG BitNumber);
__attribute__((dllimport))
BOOLEAN

RtlTestBit(
  PRTL_BITMAP BitMapHeader,
  ULONG BitNumber);
__attribute__((dllimport))
NTSTATUS

RtlHashUnicodeString(
  const UNICODE_STRING *String,
  BOOLEAN CaseInSensitive,
  ULONG HashAlgorithm,
  PULONG HashValue);
//DECLSPEC_DEPRECATED_DDK_WINXP
static __inline
LARGE_INTEGER

RtlConvertLongToLargeInteger(
  LONG SignedInteger)
{
  LARGE_INTEGER ret;
  ret.QuadPart = SignedInteger;
  return ret;
}
//DECLSPEC_DEPRECATED_DDK_WINXP
static __inline
LARGE_INTEGER

RtlConvertUlongToLargeInteger(
  ULONG UnsignedInteger)
{
  LARGE_INTEGER ret;
  ret.QuadPart = UnsignedInteger;
  return ret;
}
//DECLSPEC_DEPRECATED_DDK_WINXP
static __inline
LARGE_INTEGER

RtlLargeIntegerShiftLeft(
  LARGE_INTEGER LargeInteger,
  CCHAR ShiftCount)
{
  LARGE_INTEGER Result;
  Result.QuadPart = LargeInteger.QuadPart << ShiftCount;
  return Result;
}
//DECLSPEC_DEPRECATED_DDK_WINXP
static __inline
LARGE_INTEGER

RtlLargeIntegerShiftRight(
  LARGE_INTEGER LargeInteger,
  CCHAR ShiftCount)
{
  LARGE_INTEGER Result;
  Result.QuadPart = (ULONG64)LargeInteger.QuadPart >> ShiftCount;
  return Result;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
ULONG

RtlEnlargedUnsignedDivide(
  ULARGE_INTEGER Dividend,
  ULONG Divisor,
  PULONG Remainder)
{
  if (Remainder)
    *Remainder = (ULONG)(Dividend.QuadPart % Divisor);
  return (ULONG)(Dividend.QuadPart / Divisor);
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlLargeIntegerNegate(
  LARGE_INTEGER Subtrahend)
{
  LARGE_INTEGER Difference;
  Difference.QuadPart = -Subtrahend.QuadPart;
  return Difference;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlLargeIntegerSubtract(
  LARGE_INTEGER Minuend,
  LARGE_INTEGER Subtrahend)
{
  LARGE_INTEGER Difference;
  Difference.QuadPart = Minuend.QuadPart - Subtrahend.QuadPart;
  return Difference;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlEnlargedUnsignedMultiply(
  ULONG Multiplicand,
  ULONG Multiplier)
{
  LARGE_INTEGER ret;
  ret.QuadPart = (ULONGLONG)Multiplicand * (ULONGLONG)Multiplier;
  return ret;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlEnlargedIntegerMultiply(
  LONG Multiplicand,
  LONG Multiplier)
{
  LARGE_INTEGER ret;
  ret.QuadPart = (LONGLONG)Multiplicand * (ULONGLONG)Multiplier;
  return ret;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
RtlInitEmptyAnsiString(
  PANSI_STRING AnsiString,
  PCHAR Buffer,
  USHORT BufferSize)
{
  AnsiString->Length = 0;
  AnsiString->MaximumLength = BufferSize;
  AnsiString->Buffer = Buffer;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
RtlInitEmptyUnicodeString(
  PUNICODE_STRING UnicodeString,
  PWSTR Buffer,
  USHORT BufferSize)
{
  UnicodeString->Length = 0;
  UnicodeString->MaximumLength = BufferSize;
  UnicodeString->Buffer = Buffer;
}
static __inline
LARGE_INTEGER

RtlExtendedIntegerMultiply(
  LARGE_INTEGER Multiplicand,
  LONG Multiplier)
{
  LARGE_INTEGER ret;
  ret.QuadPart = Multiplicand.QuadPart * Multiplier;
  return ret;
}
static __inline
LARGE_INTEGER

RtlExtendedLargeIntegerDivide(
  LARGE_INTEGER Dividend,
  ULONG Divisor,
  PULONG Remainder )
{
  LARGE_INTEGER ret;
  ret.QuadPart = (ULONG64)Dividend.QuadPart / Divisor;
  if (Remainder)
    *Remainder = (ULONG)(Dividend.QuadPart % Divisor);
  return ret;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlExtendedMagicDivide(
  LARGE_INTEGER Dividend,
  LARGE_INTEGER MagicDivisor,
  CCHAR ShiftCount)
{
  LARGE_INTEGER ret;
  ULONG64 ret64;
  BOOLEAN Pos;
  Pos = (Dividend.QuadPart >= 0);
  ret64 = __umulh(Pos ? Dividend.QuadPart : -Dividend.QuadPart,
                               MagicDivisor.QuadPart);
  ret64 >>= ShiftCount;
  ret.QuadPart = Pos ? ret64 : -(LONG64)ret64;
  return ret;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlLargeIntegerAdd(
  LARGE_INTEGER Addend1,
  LARGE_INTEGER Addend2)
{
  LARGE_INTEGER ret;
  ret.QuadPart = Addend1.QuadPart + Addend2.QuadPart;
  return ret;
}
//DECLSPEC_DEPRECATED_DDK
static __inline
LARGE_INTEGER

RtlLargeIntegerArithmeticShift(
  LARGE_INTEGER LargeInteger,
  CCHAR ShiftCount)
{
  LARGE_INTEGER ret;
  ret.QuadPart = LargeInteger.QuadPart >> ShiftCount;
  return ret;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PVOID
RtlSecureZeroMemory(
  PVOID Pointer,
  SIZE_T Size)
{
  volatile char* vptr = (volatile char*)Pointer;
  __stosb((PUCHAR)vptr, 0, Size);
   return Pointer;
}
__attribute__((dllimport))
void
InitializeSListHead(
  PSLIST_HEADER SListHead);
BOOLEAN
WdmlibRtlIsNtDdiVersionAvailable(
  ULONG Version);
BOOLEAN
WdmlibRtlIsServicePackVersionInstalled(
  ULONG Version);
__attribute__((dllimport))
void

KeInitializeEvent(
  PRKEVENT Event,
  EVENT_TYPE Type,
  BOOLEAN State);
__attribute__((dllimport))
void

KeClearEvent(
  PRKEVENT Event);
__attribute__((dllimport))
void

ProbeForRead(
  const void *Address,
  SIZE_T Length,
  ULONG Alignment);
__attribute__((dllimport))
void

ProbeForWrite(
  PVOID Address,
  SIZE_T Length,
  ULONG Alignment);
__attribute__((dllimport))
void

KeRevertToUserAffinityThread(void);
__attribute__((dllimport))
void

KeSetSystemAffinityThread(
  KAFFINITY Affinity);
__attribute__((dllimport))
void

KeSetTargetProcessorDpc(
  PRKDPC Dpc,
  CCHAR Number);
__attribute__((dllimport))
KAFFINITY

KeQueryActiveProcessors(void);
__attribute__((dllimport))
KIRQL

KeAcquireSpinLockRaiseToDpc(
  PKSPIN_LOCK SpinLock);
__attribute__((dllimport))
void

KeAcquireSpinLockAtDpcLevel(
  PKSPIN_LOCK SpinLock);
__attribute__((dllimport))
void

KeReleaseSpinLock(
  PKSPIN_LOCK SpinLock,
  KIRQL NewIrql);
__attribute__((dllimport))
void

KeReleaseSpinLockFromDpcLevel(
  PKSPIN_LOCK SpinLock);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
KeInitializeSpinLock( PKSPIN_LOCK SpinLock)
{
  *SpinLock = 0;
}
__attribute__((dllimport))
__attribute__((noreturn))
void

KeBugCheckEx(
  ULONG BugCheckCode,
  ULONG_PTR BugCheckParameter1,
  ULONG_PTR BugCheckParameter2,
  ULONG_PTR BugCheckParameter3,
  ULONG_PTR BugCheckParameter4);
__attribute__((dllimport))
BOOLEAN

KeCancelTimer(
  PKTIMER);
__attribute__((dllimport))
NTSTATUS

KeDelayExecutionThread(
  KPROCESSOR_MODE WaitMode,
  BOOLEAN Alertable,
  PLARGE_INTEGER Interval);
__attribute__((dllimport))
BOOLEAN

KeDeregisterBugCheckCallback(
  PKBUGCHECK_CALLBACK_RECORD CallbackRecord);
__attribute__((dllimport))
void

KeEnterCriticalRegion(void);
__attribute__((dllimport))
void

KeInitializeDeviceQueue(
  PKDEVICE_QUEUE DeviceQueue);
__attribute__((dllimport))
void

KeInitializeDpc(
  PRKDPC Dpc,
  PKDEFERRED_ROUTINE DeferredRoutine,
  PVOID DeferredContext );
__attribute__((dllimport))
void

KeInitializeMutex(
  PRKMUTEX Mutex,
  ULONG Level);
__attribute__((dllimport))
void

KeInitializeSemaphore(
  PRKSEMAPHORE Semaphore,
  LONG Count,
  LONG Limit);
__attribute__((dllimport))
void

KeInitializeTimer(
  PKTIMER Timer);
__attribute__((dllimport))
void

KeInitializeTimerEx(
  PKTIMER Timer,
  TIMER_TYPE Type);
__attribute__((dllimport))
BOOLEAN

KeInsertByKeyDeviceQueue(
  PKDEVICE_QUEUE DeviceQueue,
  PKDEVICE_QUEUE_ENTRY DeviceQueueEntry,
  ULONG SortKey);
__attribute__((dllimport))
BOOLEAN

KeInsertDeviceQueue(
  PKDEVICE_QUEUE DeviceQueue,
  PKDEVICE_QUEUE_ENTRY DeviceQueueEntry);
__attribute__((dllimport))
BOOLEAN

KeInsertQueueDpc(
  PRKDPC Dpc,
  PVOID SystemArgument1 ,
  PVOID SystemArgument2 );
__attribute__((dllimport))
void

KeLeaveCriticalRegion(void);
__attribute__((dllimport))
LARGE_INTEGER

KeQueryPerformanceCounter(
  PLARGE_INTEGER PerformanceFrequency );
__attribute__((dllimport))
KPRIORITY

KeQueryPriorityThread(
  PRKTHREAD Thread);
__attribute__((dllimport))
ULONG

KeQueryTimeIncrement(void);
__attribute__((dllimport))
LONG

KeReadStateEvent(
  PRKEVENT Event);
__attribute__((dllimport))
LONG

KeReadStateMutex(
  PRKMUTEX Mutex);
__attribute__((dllimport))
LONG

KeReadStateSemaphore(
  PRKSEMAPHORE Semaphore);
__attribute__((dllimport))
BOOLEAN

KeReadStateTimer(
  PKTIMER Timer);
__attribute__((dllimport))
BOOLEAN

KeRegisterBugCheckCallback(
  PKBUGCHECK_CALLBACK_RECORD CallbackRecord,
  PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine,
  PVOID Buffer,
  ULONG Length,
  PUCHAR Component);
__attribute__((dllimport))
LONG

KeReleaseMutex(
  PRKMUTEX Mutex,
  BOOLEAN Wait);
__attribute__((dllimport))
LONG

KeReleaseSemaphore(
  PRKSEMAPHORE Semaphore,
  KPRIORITY Increment,
  LONG Adjustment,
  BOOLEAN Wait);
__attribute__((dllimport))
PKDEVICE_QUEUE_ENTRY

KeRemoveByKeyDeviceQueue(
  PKDEVICE_QUEUE DeviceQueue,
  ULONG SortKey);
__attribute__((dllimport))
PKDEVICE_QUEUE_ENTRY

KeRemoveDeviceQueue(
  PKDEVICE_QUEUE DeviceQueue);
__attribute__((dllimport))
BOOLEAN

KeRemoveEntryDeviceQueue(
  PKDEVICE_QUEUE DeviceQueue,
  PKDEVICE_QUEUE_ENTRY DeviceQueueEntry);
__attribute__((dllimport))
BOOLEAN

KeRemoveQueueDpc(
  PRKDPC Dpc);
__attribute__((dllimport))
LONG

KeResetEvent(
  PRKEVENT Event);
__attribute__((dllimport))
LONG

KeSetEvent(
  PRKEVENT Event,
  KPRIORITY Increment,
  BOOLEAN Wait);
__attribute__((dllimport))
void

KeSetImportanceDpc(
  PRKDPC Dpc,
  KDPC_IMPORTANCE Importance);
__attribute__((dllimport))
KPRIORITY

KeSetPriorityThread(
  PKTHREAD Thread,
  KPRIORITY Priority);
__attribute__((dllimport))
BOOLEAN

KeSetTimer(
  PKTIMER Timer,
  LARGE_INTEGER DueTime,
  PKDPC Dpc );
__attribute__((dllimport))
BOOLEAN

KeSetTimerEx(
  PKTIMER Timer,
  LARGE_INTEGER DueTime,
  LONG Period ,
  PKDPC Dpc );
__attribute__((dllimport))
void

KeStallExecutionProcessor(
  ULONG MicroSeconds);
__attribute__((dllimport))
BOOLEAN

KeSynchronizeExecution(
  PKINTERRUPT Interrupt,
  PKSYNCHRONIZE_ROUTINE SynchronizeRoutine,
  PVOID SynchronizeContext );
__attribute__((dllimport))
NTSTATUS

KeWaitForMultipleObjects(
  ULONG Count,
  PVOID Object[],
  WAIT_TYPE WaitType,
  KWAIT_REASON WaitReason,
  KPROCESSOR_MODE WaitMode,
  BOOLEAN Alertable,
  PLARGE_INTEGER Timeout ,
  PKWAIT_BLOCK WaitBlockArray );
__attribute__((dllimport))
NTSTATUS

KeWaitForSingleObject(
  PVOID Object,
  KWAIT_REASON WaitReason,
  KPROCESSOR_MODE WaitMode,
  BOOLEAN Alertable,
  PLARGE_INTEGER Timeout );
__attribute__((dllimport))
void

KeAcquireInStackQueuedSpinLock(
  PKSPIN_LOCK SpinLock,
  PKLOCK_QUEUE_HANDLE LockHandle);
__attribute__((dllimport))
void

KeAcquireInStackQueuedSpinLockAtDpcLevel(
  PKSPIN_LOCK SpinLock,
  PKLOCK_QUEUE_HANDLE LockHandle);
__attribute__((dllimport))
KIRQL

KeAcquireInterruptSpinLock(
  PKINTERRUPT Interrupt);
__attribute__((dllimport))
BOOLEAN

KeAreApcsDisabled(void);
__attribute__((dllimport))
ULONG

KeGetRecommendedSharedDataAlignment(void);
__attribute__((dllimport))
ULONG

KeQueryRuntimeThread(
  PKTHREAD Thread,
  PULONG UserTime);
__attribute__((dllimport))
void

KeReleaseInStackQueuedSpinLockFromDpcLevel(
  PKLOCK_QUEUE_HANDLE LockHandle);
__attribute__((dllimport))
void

KeReleaseInterruptSpinLock(
  PKINTERRUPT Interrupt,
  KIRQL OldIrql);
__attribute__((dllimport))
PKDEVICE_QUEUE_ENTRY

KeRemoveByKeyDeviceQueueIfBusy(
  PKDEVICE_QUEUE DeviceQueue,
  ULONG SortKey);
__attribute__((dllimport))
void

KeReleaseInStackQueuedSpinLock(
  PKLOCK_QUEUE_HANDLE LockHandle);
__attribute__((dllimport))
BOOLEAN

KeDeregisterBugCheckReasonCallback(
  PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord);
__attribute__((dllimport))
BOOLEAN

KeRegisterBugCheckReasonCallback(
  PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord,
  PKBUGCHECK_REASON_CALLBACK_ROUTINE CallbackRoutine,
  KBUGCHECK_CALLBACK_REASON Reason,
  PUCHAR Component);
__attribute__((dllimport))
void

KeFlushQueuedDpcs(void);
__attribute__((dllimport))
PVOID

KeRegisterNmiCallback(
  PNMI_CALLBACK CallbackRoutine,
  PVOID Context );
__attribute__((dllimport))
NTSTATUS

KeDeregisterNmiCallback(
  PVOID Handle);
__attribute__((dllimport))
void

KeInitializeThreadedDpc(
  PRKDPC Dpc,
  PKDEFERRED_ROUTINE DeferredRoutine,
  PVOID DeferredContext );
__attribute__((dllimport))
ULONG_PTR

KeIpiGenericCall(
  PKIPI_BROADCAST_WORKER BroadcastFunction,
  ULONG_PTR Context);
__attribute__((dllimport))
KIRQL

KeAcquireSpinLockForDpc(
  PKSPIN_LOCK SpinLock);
__attribute__((dllimport))
void

KeReleaseSpinLockForDpc(
  PKSPIN_LOCK SpinLock,
  KIRQL OldIrql);
__attribute__((dllimport))
BOOLEAN

KeTestSpinLock(
  PKSPIN_LOCK SpinLock);
__attribute__((dllimport))
void

KeFlushWriteBuffer(void);
__attribute__((dllimport))
PVOID

MmAllocateContiguousMemory(
  SIZE_T NumberOfBytes,
  PHYSICAL_ADDRESS HighestAcceptableAddress);
__attribute__((dllimport))
PVOID

MmAllocateContiguousMemorySpecifyCache(
  SIZE_T NumberOfBytes,
  PHYSICAL_ADDRESS LowestAcceptableAddress,
  PHYSICAL_ADDRESS HighestAcceptableAddress,
  PHYSICAL_ADDRESS BoundaryAddressMultiple ,
  MEMORY_CACHING_TYPE CacheType);
__attribute__((dllimport))
PMDL

MmAllocatePagesForMdl(
  PHYSICAL_ADDRESS LowAddress,
  PHYSICAL_ADDRESS HighAddress,
  PHYSICAL_ADDRESS SkipBytes,
  SIZE_T TotalBytes);
__attribute__((dllimport))
void

MmBuildMdlForNonPagedPool(
  PMDLX MemoryDescriptorList);
//DECLSPEC_DEPRECATED_DDK
__attribute__((dllimport))
PMDL

MmCreateMdl(
  PMDL MemoryDescriptorList ,
  PVOID Base,
  SIZE_T Length);
__attribute__((dllimport))
void

MmFreeContiguousMemory(
  PVOID BaseAddress);
__attribute__((dllimport))
void

MmFreeContiguousMemorySpecifyCache(
  PVOID BaseAddress,
  SIZE_T NumberOfBytes,
  MEMORY_CACHING_TYPE CacheType);
__attribute__((dllimport))
void

MmFreePagesFromMdl(
  PMDLX MemoryDescriptorList);
__attribute__((dllimport))
PVOID

MmGetSystemRoutineAddress(
  PUNICODE_STRING SystemRoutineName);
__attribute__((dllimport))
LOGICAL

MmIsDriverVerifying(
  struct _DRIVER_OBJECT *DriverObject);
__attribute__((dllimport))
PVOID

MmLockPagableDataSection(
  PVOID AddressWithinSection);
__attribute__((dllimport))
PVOID

MmMapIoSpace(
  PHYSICAL_ADDRESS PhysicalAddress,
  SIZE_T NumberOfBytes,
  MEMORY_CACHING_TYPE CacheEnable);
__attribute__((dllimport))
PVOID

MmMapLockedPages(
  PMDL MemoryDescriptorList,
  KPROCESSOR_MODE AccessMode);
__attribute__((dllimport))
PVOID

MmMapLockedPagesSpecifyCache(
  PMDLX MemoryDescriptorList,
  KPROCESSOR_MODE AccessMode,
  MEMORY_CACHING_TYPE CacheType,
  PVOID BaseAddress ,
  ULONG BugCheckOnFailure,
  MM_PAGE_PRIORITY Priority);
__attribute__((dllimport))
PVOID

MmPageEntireDriver(
  PVOID AddressWithinSection);
__attribute__((dllimport))
void

MmProbeAndLockPages(
  PMDL MemoryDescriptorList,
  KPROCESSOR_MODE AccessMode,
  LOCK_OPERATION Operation);
__attribute__((dllimport))
MM_SYSTEMSIZE

MmQuerySystemSize(void);
__attribute__((dllimport))
void

MmResetDriverPaging(
  PVOID AddressWithinSection);
__attribute__((dllimport))
SIZE_T

MmSizeOfMdl(
  PVOID Base,
  SIZE_T Length);
__attribute__((dllimport))
void

MmUnlockPagableImageSection(
  PVOID ImageSectionHandle);
__attribute__((dllimport))
void

MmUnlockPages(
  PMDL MemoryDescriptorList);
__attribute__((dllimport))
void

MmUnmapIoSpace(
  PVOID BaseAddress,
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
void

MmProbeAndLockProcessPages(
  PMDL MemoryDescriptorList,
  PEPROCESS Process,
  KPROCESSOR_MODE AccessMode,
  LOCK_OPERATION Operation);
__attribute__((dllimport))
void

MmUnmapLockedPages(
  PVOID BaseAddress,
  PMDL MemoryDescriptorList);
__attribute__((dllimport))
PVOID

MmAllocateContiguousMemorySpecifyCacheNode(
  SIZE_T NumberOfBytes,
  PHYSICAL_ADDRESS LowestAcceptableAddress,
  PHYSICAL_ADDRESS HighestAcceptableAddress,
  PHYSICAL_ADDRESS BoundaryAddressMultiple ,
  MEMORY_CACHING_TYPE CacheType,
  NODE_REQUIREMENT PreferredNode);
__attribute__((dllimport))
NTSTATUS

MmAdvanceMdl(
  PMDL Mdl,
  ULONG NumberOfBytes);
__attribute__((dllimport))
PVOID

MmAllocateMappingAddress(
  SIZE_T NumberOfBytes,
  ULONG PoolTag);
__attribute__((dllimport))
void

MmFreeMappingAddress(
  PVOID BaseAddress,
  ULONG PoolTag);
__attribute__((dllimport))
NTSTATUS

MmIsVerifierEnabled(
  PULONG VerifierFlags);
__attribute__((dllimport))
PVOID

MmMapLockedPagesWithReservedMapping(
  PVOID MappingAddress,
  ULONG PoolTag,
  PMDL MemoryDescriptorList,
  MEMORY_CACHING_TYPE CacheType);
__attribute__((dllimport))
NTSTATUS

MmProtectMdlSystemAddress(
  PMDL MemoryDescriptorList,
  ULONG NewProtect);
__attribute__((dllimport))
void

MmUnmapReservedMapping(
  PVOID BaseAddress,
  ULONG PoolTag,
  PMDL MemoryDescriptorList);
__attribute__((dllimport))
NTSTATUS

MmAddVerifierThunks(
  PVOID ThunkBuffer,
  ULONG ThunkBufferSize);
__attribute__((dllimport))
LOGICAL

MmIsIoSpaceActive(
  PHYSICAL_ADDRESS StartAddress,
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
BOOLEAN

SeAccessCheck(
  PSECURITY_DESCRIPTOR SecurityDescriptor,
  PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
  BOOLEAN SubjectContextLocked,
  ACCESS_MASK DesiredAccess,
  ACCESS_MASK PreviouslyGrantedAccess,
  PPRIVILEGE_SET *Privileges ,
  PGENERIC_MAPPING GenericMapping,
  KPROCESSOR_MODE AccessMode,
  PACCESS_MASK GrantedAccess,
  PNTSTATUS AccessStatus);
__attribute__((dllimport))
NTSTATUS

SeAssignSecurity(
  PSECURITY_DESCRIPTOR ParentDescriptor ,
  PSECURITY_DESCRIPTOR ExplicitDescriptor ,
  PSECURITY_DESCRIPTOR *NewDescriptor,
  BOOLEAN IsDirectoryObject,
  PSECURITY_SUBJECT_CONTEXT SubjectContext,
  PGENERIC_MAPPING GenericMapping,
  POOL_TYPE PoolType);
__attribute__((dllimport))
NTSTATUS

SeAssignSecurityEx(
  PSECURITY_DESCRIPTOR ParentDescriptor ,
  PSECURITY_DESCRIPTOR ExplicitDescriptor ,
  PSECURITY_DESCRIPTOR *NewDescriptor,
  GUID *ObjectType ,
  BOOLEAN IsDirectoryObject,
  ULONG AutoInheritFlags,
  PSECURITY_SUBJECT_CONTEXT SubjectContext,
  PGENERIC_MAPPING GenericMapping,
  POOL_TYPE PoolType);
__attribute__((dllimport))
NTSTATUS

SeDeassignSecurity(
  PSECURITY_DESCRIPTOR *SecurityDescriptor);
__attribute__((dllimport))
BOOLEAN

SeValidSecurityDescriptor(
  ULONG Length,
  PSECURITY_DESCRIPTOR SecurityDescriptor);
__attribute__((dllimport))
ULONG

SeObjectCreateSaclAccessBits(
  PSECURITY_DESCRIPTOR SecurityDescriptor);
__attribute__((dllimport))
void

SeReleaseSubjectContext(
  PSECURITY_SUBJECT_CONTEXT SubjectContext);
__attribute__((dllimport))
void

SeUnlockSubjectContext(
  PSECURITY_SUBJECT_CONTEXT SubjectContext);
__attribute__((dllimport))
void

SeCaptureSubjectContext(
  PSECURITY_SUBJECT_CONTEXT SubjectContext);
__attribute__((dllimport))
void

SeLockSubjectContext(
  PSECURITY_SUBJECT_CONTEXT SubjectContext);
__attribute__((dllimport))
NTSTATUS

CmRegisterCallback(
  PEX_CALLBACK_FUNCTION Function,
  PVOID Context ,
  PLARGE_INTEGER Cookie);
__attribute__((dllimport))
NTSTATUS

CmUnRegisterCallback(
  LARGE_INTEGER Cookie);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
READ_PORT_BUFFER_UCHAR(
  PUCHAR Port,
  PUCHAR Buffer,
  ULONG Count)
{
  __inbytestring((USHORT)(ULONG_PTR)Port, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
READ_PORT_BUFFER_ULONG(
  PULONG Port,
  PULONG Buffer,
  ULONG Count)
{
  __indwordstring((USHORT)(ULONG_PTR)Port, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
READ_PORT_BUFFER_USHORT(
  PUSHORT Port,
  PUSHORT Buffer,
  ULONG Count)
{
  __inwordstring((USHORT)(ULONG_PTR)Port, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
UCHAR
READ_PORT_UCHAR(
  PUCHAR Port)
{
  return __inbyte((USHORT)(ULONG_PTR)Port);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
ULONG
READ_PORT_ULONG(
  PULONG Port)
{
  return __indword((USHORT)(ULONG_PTR)Port);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
USHORT
READ_PORT_USHORT(
  PUSHORT Port)
{
  return __inword((USHORT)(ULONG_PTR)Port);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
READ_REGISTER_BUFFER_UCHAR(
  PUCHAR Register,
  PUCHAR Buffer,
  ULONG Count)
{
  __movsb(Register, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
READ_REGISTER_BUFFER_ULONG(
  PULONG Register,
  PULONG Buffer,
  ULONG Count)
{
  __movsd(Register, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
READ_REGISTER_BUFFER_USHORT(
  PUSHORT Register,
  PUSHORT Buffer,
  ULONG Count)
{
  __movsw(Register, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
UCHAR
READ_REGISTER_UCHAR(
  volatile UCHAR *Register)
{
  return *Register;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
ULONG
READ_REGISTER_ULONG(
  volatile ULONG *Register)
{
  return *Register;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
USHORT
READ_REGISTER_USHORT(
  volatile USHORT *Register)
{
  return *Register;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_PORT_BUFFER_UCHAR(
  PUCHAR Port,
  PUCHAR Buffer,
  ULONG Count)
{
  __outbytestring((USHORT)(ULONG_PTR)Port, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_PORT_BUFFER_ULONG(
  PULONG Port,
  PULONG Buffer,
  ULONG Count)
{
  __outdwordstring((USHORT)(ULONG_PTR)Port, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_PORT_BUFFER_USHORT(
  PUSHORT Port,
  PUSHORT Buffer,
  ULONG Count)
{
  __outwordstring((USHORT)(ULONG_PTR)Port, Buffer, Count);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_PORT_UCHAR(
  PUCHAR Port,
  UCHAR Value)
{
  __outbyte((USHORT)(ULONG_PTR)Port, Value);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_PORT_ULONG(
  PULONG Port,
  ULONG Value)
{
  __outdword((USHORT)(ULONG_PTR)Port, Value);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_PORT_USHORT(
  PUSHORT Port,
  USHORT Value)
{
  __outword((USHORT)(ULONG_PTR)Port, Value);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_REGISTER_BUFFER_UCHAR(
  PUCHAR Register,
  PUCHAR Buffer,
  ULONG Count)
{
  LONG Synch;
  __movsb(Register, Buffer, Count);
  _InterlockedOr(&Synch, 1);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_REGISTER_BUFFER_ULONG(
  PULONG Register,
  PULONG Buffer,
  ULONG Count)
{
  LONG Synch;
  __movsd(Register, Buffer, Count);
  _InterlockedOr(&Synch, 1);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_REGISTER_BUFFER_USHORT(
  PUSHORT Register,
  PUSHORT Buffer,
  ULONG Count)
{
  LONG Synch;
  __movsw(Register, Buffer, Count);
  _InterlockedOr(&Synch, 1);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_REGISTER_UCHAR(
  volatile UCHAR *Register,
  UCHAR Value)
{
  LONG Synch;
  *Register = Value;
  _InterlockedOr(&Synch, 1);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_REGISTER_ULONG(
  volatile ULONG *Register,
  ULONG Value)
{
  LONG Synch;
  *Register = Value;
  _InterlockedOr(&Synch, 1);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
WRITE_REGISTER_USHORT(
  volatile USHORT *Register,
  USHORT Value)
{
  LONG Sync;
  *Register = Value;
  _InterlockedOr(&Sync, 1);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
NTSTATUS
IoAllocateAdapterChannel(
  PDMA_ADAPTER DmaAdapter,
  PDEVICE_OBJECT DeviceObject,
  ULONG NumberOfMapRegisters,
  PDRIVER_CONTROL ExecutionRoutine,
  PVOID Context)
{
  PALLOCATE_ADAPTER_CHANNEL AllocateAdapterChannel;
  AllocateAdapterChannel =
      *(DmaAdapter)->DmaOperations->AllocateAdapterChannel;
  ((void) 0);
  return AllocateAdapterChannel(DmaAdapter,
                                DeviceObject,
                                NumberOfMapRegisters,
                                ExecutionRoutine,
                                Context );
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
BOOLEAN

IoFlushAdapterBuffers(
  PDMA_ADAPTER DmaAdapter,
  PMDL Mdl,
  PVOID MapRegisterBase,
  PVOID CurrentVa,
  ULONG Length,
  BOOLEAN WriteToDevice)
{
  PFLUSH_ADAPTER_BUFFERS FlushAdapterBuffers;
  FlushAdapterBuffers = *(DmaAdapter)->DmaOperations->FlushAdapterBuffers;
  ((void) 0);
  return FlushAdapterBuffers(DmaAdapter,
                             Mdl,
                             MapRegisterBase,
                             CurrentVa,
                             Length,
                             WriteToDevice);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void

IoFreeAdapterChannel(
  PDMA_ADAPTER DmaAdapter)
{
  PFREE_ADAPTER_CHANNEL FreeAdapterChannel;
  FreeAdapterChannel = *(DmaAdapter)->DmaOperations->FreeAdapterChannel;
  ((void) 0);
  FreeAdapterChannel(DmaAdapter);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void

IoFreeMapRegisters(
  PDMA_ADAPTER DmaAdapter,
  PVOID MapRegisterBase,
  ULONG NumberOfMapRegisters)
{
  PFREE_MAP_REGISTERS FreeMapRegisters;
  FreeMapRegisters = *(DmaAdapter)->DmaOperations->FreeMapRegisters;
  ((void) 0);
  FreeMapRegisters(DmaAdapter, MapRegisterBase, NumberOfMapRegisters);
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PHYSICAL_ADDRESS

IoMapTransfer(
  PDMA_ADAPTER DmaAdapter,
  PMDL Mdl,
  PVOID MapRegisterBase,
  PVOID CurrentVa,
  PULONG Length,
  BOOLEAN WriteToDevice)
{
  PMAP_TRANSFER MapTransfer;
  MapTransfer = *(DmaAdapter)->DmaOperations->MapTransfer;
  ((void) 0);
  return MapTransfer(DmaAdapter,
                     Mdl,
                     MapRegisterBase,
                     CurrentVa,
                     Length,
                     WriteToDevice);
}
__attribute__((dllimport))
void

IoAcquireCancelSpinLock(
  PKIRQL Irql);
__attribute__((dllimport))
NTSTATUS

IoAcquireRemoveLockEx(
  PIO_REMOVE_LOCK RemoveLock,
  PVOID Tag ,
  PCSTR File,
  ULONG Line,
  ULONG RemlockSize);
__attribute__((dllimport))
NTSTATUS

IoAllocateDriverObjectExtension(
  PDRIVER_OBJECT DriverObject,
  PVOID ClientIdentificationAddress,
  ULONG DriverObjectExtensionSize,
  PVOID *DriverObjectExtension);
__attribute__((dllimport))
PVOID

IoAllocateErrorLogEntry(
  PVOID IoObject,
  UCHAR EntrySize);
__attribute__((dllimport))
PIRP

IoAllocateIrp(
  CCHAR StackSize,
  BOOLEAN ChargeQuota);
__attribute__((dllimport))
PMDL

IoAllocateMdl(
  PVOID VirtualAddress ,
  ULONG Length,
  BOOLEAN SecondaryBuffer,
  BOOLEAN ChargeQuota,
  PIRP Irp );
__attribute__((dllimport))
PIO_WORKITEM

IoAllocateWorkItem(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoAttachDevice(
  PDEVICE_OBJECT SourceDevice,
  PUNICODE_STRING TargetDevice,
  PDEVICE_OBJECT *AttachedDevice);
__attribute__((dllimport))
PDEVICE_OBJECT

IoAttachDeviceToDeviceStack(
  PDEVICE_OBJECT SourceDevice,
  PDEVICE_OBJECT TargetDevice);
__attribute__((dllimport))
PIRP

IoBuildAsynchronousFsdRequest(
  ULONG MajorFunction,
  PDEVICE_OBJECT DeviceObject,
  PVOID Buffer ,
  ULONG Length ,
  PLARGE_INTEGER StartingOffset ,
  PIO_STATUS_BLOCK IoStatusBlock );
__attribute__((dllimport))
PIRP

IoBuildDeviceIoControlRequest(
  ULONG IoControlCode,
  PDEVICE_OBJECT DeviceObject,
  PVOID InputBuffer ,
  ULONG InputBufferLength,
  PVOID OutputBuffer ,
  ULONG OutputBufferLength,
  BOOLEAN InternalDeviceIoControl,
  PKEVENT Event,
  PIO_STATUS_BLOCK IoStatusBlock);
__attribute__((dllimport))
void

IoBuildPartialMdl(
  PMDL SourceMdl,
  PMDL TargetMdl,
  PVOID VirtualAddress,
  ULONG Length);
__attribute__((dllimport))
PIRP

IoBuildSynchronousFsdRequest(
  ULONG MajorFunction,
  PDEVICE_OBJECT DeviceObject,
  PVOID Buffer ,
  ULONG Length ,
  PLARGE_INTEGER StartingOffset ,
  PKEVENT Event,
  PIO_STATUS_BLOCK IoStatusBlock);
__attribute__((dllimport))
NTSTATUS

IofCallDriver(
  PDEVICE_OBJECT DeviceObject,
  PIRP Irp);
__attribute__((dllimport))
void

IofCompleteRequest(
  PIRP Irp,
  CCHAR PriorityBoost);
__attribute__((dllimport))
BOOLEAN

IoCancelIrp(
  PIRP Irp);
__attribute__((dllimport))
NTSTATUS

IoCheckShareAccess(
  ACCESS_MASK DesiredAccess,
  ULONG DesiredShareAccess,
  PFILE_OBJECT FileObject,
  PSHARE_ACCESS ShareAccess,
  BOOLEAN Update);
__attribute__((dllimport))
void

IofCompleteRequest(
  PIRP Irp,
  CCHAR PriorityBoost);
__attribute__((dllimport))
NTSTATUS

IoConnectInterrupt(
  PKINTERRUPT *InterruptObject,
  PKSERVICE_ROUTINE ServiceRoutine,
  PVOID ServiceContext ,
  PKSPIN_LOCK SpinLock ,
  ULONG Vector,
  KIRQL Irql,
  KIRQL SynchronizeIrql,
  KINTERRUPT_MODE InterruptMode,
  BOOLEAN ShareVector,
  KAFFINITY ProcessorEnableMask,
  BOOLEAN FloatingSave);
__attribute__((dllimport))
NTSTATUS

IoCreateDevice(
  PDRIVER_OBJECT DriverObject,
  ULONG DeviceExtensionSize,
  PUNICODE_STRING DeviceName ,
  ULONG DeviceType,
  ULONG DeviceCharacteristics,
  BOOLEAN Exclusive,
  PDEVICE_OBJECT *DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoCreateFile(
  PHANDLE FileHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  PIO_STATUS_BLOCK IoStatusBlock,
  PLARGE_INTEGER AllocationSize ,
  ULONG FileAttributes,
  ULONG ShareAccess,
  ULONG Disposition,
  ULONG CreateOptions,
  PVOID EaBuffer ,
  ULONG EaLength,
  CREATE_FILE_TYPE CreateFileType,
  PVOID InternalParameters ,
  ULONG Options);
__attribute__((dllimport))
PKEVENT

IoCreateNotificationEvent(
  PUNICODE_STRING EventName,
  PHANDLE EventHandle);
__attribute__((dllimport))
NTSTATUS

IoCreateSymbolicLink(
  PUNICODE_STRING SymbolicLinkName,
  PUNICODE_STRING DeviceName);
__attribute__((dllimport))
PKEVENT

IoCreateSynchronizationEvent(
  PUNICODE_STRING EventName,
  PHANDLE EventHandle);
__attribute__((dllimport))
NTSTATUS

IoCreateUnprotectedSymbolicLink(
  PUNICODE_STRING SymbolicLinkName,
  PUNICODE_STRING DeviceName);
__attribute__((dllimport))
void

IoDeleteDevice(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoDeleteSymbolicLink(
  PUNICODE_STRING SymbolicLinkName);
__attribute__((dllimport))
void

IoDetachDevice(
  PDEVICE_OBJECT TargetDevice);
__attribute__((dllimport))
void

IoDisconnectInterrupt(
  PKINTERRUPT InterruptObject);
__attribute__((dllimport))
void

IoFreeIrp(
  PIRP Irp);
__attribute__((dllimport))
void

IoFreeMdl(
  PMDL Mdl);
__attribute__((dllimport))
void

IoFreeWorkItem(
  PIO_WORKITEM IoWorkItem);
__attribute__((dllimport))
PDEVICE_OBJECT

IoGetAttachedDevice(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
PDEVICE_OBJECT

IoGetAttachedDeviceReference(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoGetBootDiskInformation(
  PBOOTDISK_INFORMATION BootDiskInformation,
  ULONG Size);
__attribute__((dllimport))
NTSTATUS

IoGetDeviceInterfaceAlias(
  PUNICODE_STRING SymbolicLinkName,
  const GUID *AliasInterfaceClassGuid,
  PUNICODE_STRING AliasSymbolicLinkName);
__attribute__((dllimport))
PEPROCESS

IoGetCurrentProcess(void);
__attribute__((dllimport))
NTSTATUS

IoGetDeviceInterfaces(
  const GUID *InterfaceClassGuid,
  PDEVICE_OBJECT PhysicalDeviceObject ,
  ULONG Flags,
  PWSTR *SymbolicLinkList);
__attribute__((dllimport))
NTSTATUS

IoGetDeviceObjectPointer(
  PUNICODE_STRING ObjectName,
  ACCESS_MASK DesiredAccess,
  PFILE_OBJECT *FileObject,
  PDEVICE_OBJECT *DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoGetDeviceProperty(
  PDEVICE_OBJECT DeviceObject,
  DEVICE_REGISTRY_PROPERTY DeviceProperty,
  ULONG BufferLength,
  PVOID PropertyBuffer,
  PULONG ResultLength);
__attribute__((dllimport))
PDMA_ADAPTER

IoGetDmaAdapter(
  PDEVICE_OBJECT PhysicalDeviceObject ,
  PDEVICE_DESCRIPTION DeviceDescription,
  PULONG NumberOfMapRegisters);
__attribute__((dllimport))
PVOID

IoGetDriverObjectExtension(
  PDRIVER_OBJECT DriverObject,
  PVOID ClientIdentificationAddress);
__attribute__((dllimport))
PVOID

IoGetInitialStack(void);
__attribute__((dllimport))
PDEVICE_OBJECT

IoGetRelatedDeviceObject(
  PFILE_OBJECT FileObject);
__attribute__((dllimport))
void

IoQueueWorkItem(
  PIO_WORKITEM IoWorkItem,
  PIO_WORKITEM_ROUTINE WorkerRoutine,
  WORK_QUEUE_TYPE QueueType,
  PVOID Context );
__attribute__((dllimport))
void

IoInitializeIrp(
  PIRP Irp,
  USHORT PacketSize,
  CCHAR StackSize);
__attribute__((dllimport))
void

IoInitializeRemoveLockEx(
  PIO_REMOVE_LOCK Lock,
  ULONG AllocateTag,
  ULONG MaxLockedMinutes,
  ULONG HighWatermark,
  ULONG RemlockSize);
__attribute__((dllimport))
NTSTATUS

IoInitializeTimer(
  PDEVICE_OBJECT DeviceObject,
  PIO_TIMER_ROUTINE TimerRoutine,
  PVOID Context );
__attribute__((dllimport))
void

IoInvalidateDeviceRelations(
  PDEVICE_OBJECT DeviceObject,
  DEVICE_RELATION_TYPE Type);
__attribute__((dllimport))
void

IoInvalidateDeviceState(
  PDEVICE_OBJECT PhysicalDeviceObject);
__attribute__((dllimport))
BOOLEAN

IoIsWdmVersionAvailable(
  UCHAR MajorVersion,
  UCHAR MinorVersion);
__attribute__((dllimport))
NTSTATUS

IoOpenDeviceInterfaceRegistryKey(
  PUNICODE_STRING SymbolicLinkName,
  ACCESS_MASK DesiredAccess,
  PHANDLE DeviceInterfaceKey);
__attribute__((dllimport))
NTSTATUS

IoOpenDeviceRegistryKey(
  PDEVICE_OBJECT DeviceObject,
  ULONG DevInstKeyType,
  ACCESS_MASK DesiredAccess,
  PHANDLE DevInstRegKey);
__attribute__((dllimport))
NTSTATUS

IoRegisterDeviceInterface(
  PDEVICE_OBJECT PhysicalDeviceObject,
  const GUID *InterfaceClassGuid,
  PUNICODE_STRING ReferenceString ,
  PUNICODE_STRING SymbolicLinkName);
__attribute__((dllimport))
NTSTATUS

IoRegisterPlugPlayNotification(
  IO_NOTIFICATION_EVENT_CATEGORY EventCategory,
  ULONG EventCategoryFlags,
  PVOID EventCategoryData ,
  PDRIVER_OBJECT DriverObject,
  PDRIVER_NOTIFICATION_CALLBACK_ROUTINE CallbackRoutine,
  PVOID Context ,
  PVOID *NotificationEntry);
__attribute__((dllimport))
NTSTATUS

IoRegisterShutdownNotification(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
void

IoReleaseCancelSpinLock(
  KIRQL Irql);
__attribute__((dllimport))
void

IoReleaseRemoveLockAndWaitEx(
  PIO_REMOVE_LOCK RemoveLock,
  PVOID Tag ,
  ULONG RemlockSize);
__attribute__((dllimport))
void

IoReleaseRemoveLockEx(
  PIO_REMOVE_LOCK RemoveLock,
  PVOID Tag ,
  ULONG RemlockSize);
__attribute__((dllimport))
void

IoRemoveShareAccess(
  PFILE_OBJECT FileObject,
  PSHARE_ACCESS ShareAccess);
__attribute__((dllimport))
NTSTATUS

IoReportTargetDeviceChange(
  PDEVICE_OBJECT PhysicalDeviceObject,
  PVOID NotificationStructure);
__attribute__((dllimport))
NTSTATUS

IoReportTargetDeviceChangeAsynchronous(
  PDEVICE_OBJECT PhysicalDeviceObject,
  PVOID NotificationStructure,
  PDEVICE_CHANGE_COMPLETE_CALLBACK Callback ,
  PVOID Context );
__attribute__((dllimport))
void

IoRequestDeviceEject(
  PDEVICE_OBJECT PhysicalDeviceObject);
__attribute__((dllimport))
void

IoReuseIrp(
  PIRP Irp,
  NTSTATUS Status);
__attribute__((dllimport))
NTSTATUS

IoSetDeviceInterfaceState(
  PUNICODE_STRING SymbolicLinkName,
  BOOLEAN Enable);
__attribute__((dllimport))
void

IoSetShareAccess(
  ACCESS_MASK DesiredAccess,
  ULONG DesiredShareAccess,
  PFILE_OBJECT FileObject,
  PSHARE_ACCESS ShareAccess);
__attribute__((dllimport))
void

IoStartNextPacket(
  PDEVICE_OBJECT DeviceObject,
  BOOLEAN Cancelable);
__attribute__((dllimport))
void

IoStartNextPacketByKey(
  PDEVICE_OBJECT DeviceObject,
  BOOLEAN Cancelable,
  ULONG Key);
__attribute__((dllimport))
void

IoStartPacket(
  PDEVICE_OBJECT DeviceObject,
  PIRP Irp,
  PULONG Key ,
  PDRIVER_CANCEL CancelFunction );
__attribute__((dllimport))
void

IoStartTimer(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
void

IoStopTimer(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoUnregisterPlugPlayNotification(
  PVOID NotificationEntry);
__attribute__((dllimport))
void

IoUnregisterShutdownNotification(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
void

IoUpdateShareAccess(
  PFILE_OBJECT FileObject,
  PSHARE_ACCESS ShareAccess);
__attribute__((dllimport))
NTSTATUS

IoWMIAllocateInstanceIds(
  GUID *Guid,
  ULONG InstanceCount,
  ULONG *FirstInstanceId);
__attribute__((dllimport))
NTSTATUS

IoWMIQuerySingleInstanceMultiple(
  PVOID *DataBlockObjectList,
  PUNICODE_STRING InstanceNames,
  ULONG ObjectCount,
  ULONG *InOutBufferSize,
  PVOID OutBuffer);
__attribute__((dllimport))
NTSTATUS

IoWMIRegistrationControl(
  PDEVICE_OBJECT DeviceObject,
  ULONG Action);
__attribute__((dllimport))
NTSTATUS

IoWMISuggestInstanceName(
  PDEVICE_OBJECT PhysicalDeviceObject ,
  PUNICODE_STRING SymbolicLinkName ,
  BOOLEAN CombineNames,
  PUNICODE_STRING SuggestedInstanceName);
__attribute__((dllimport))
NTSTATUS

IoWMIWriteEvent(
  PVOID WnodeEventItem);
__attribute__((dllimport))
void

IoWriteErrorLogEntry(
  PVOID ElEntry);
__attribute__((dllimport))
PIRP

IoGetTopLevelIrp(void);
__attribute__((dllimport))
NTSTATUS

IoRegisterLastChanceShutdownNotification(
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
void

IoSetTopLevelIrp(
  PIRP Irp );
__attribute__((dllimport))
NTSTATUS

IoCsqInitialize(
  PIO_CSQ Csq,
  PIO_CSQ_INSERT_IRP CsqInsertIrp,
  PIO_CSQ_REMOVE_IRP CsqRemoveIrp,
  PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp,
  PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock,
  PIO_CSQ_RELEASE_LOCK CsqReleaseLock,
  PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp);
__attribute__((dllimport))
void

IoCsqInsertIrp(
  PIO_CSQ Csq,
  PIRP Irp,
  PIO_CSQ_IRP_CONTEXT Context );
__attribute__((dllimport))
PIRP

IoCsqRemoveIrp(
  PIO_CSQ Csq,
  PIO_CSQ_IRP_CONTEXT Context);
__attribute__((dllimport))
PIRP

IoCsqRemoveNextIrp(
  PIO_CSQ Csq,
  PVOID PeekContext );
__attribute__((dllimport))
BOOLEAN

IoForwardIrpSynchronously(
  PDEVICE_OBJECT DeviceObject,
  PIRP Irp);
__attribute__((dllimport))
void

IoFreeErrorLogEntry(
  PVOID ElEntry);
__attribute__((dllimport))
NTSTATUS

IoSetCompletionRoutineEx(
  PDEVICE_OBJECT DeviceObject,
  PIRP Irp,
  PIO_COMPLETION_ROUTINE CompletionRoutine,
  PVOID Context,
  BOOLEAN InvokeOnSuccess,
  BOOLEAN InvokeOnError,
  BOOLEAN InvokeOnCancel);
void

IoSetStartIoAttributes(
  PDEVICE_OBJECT DeviceObject,
  BOOLEAN DeferredStartIo,
  BOOLEAN NonCancelable);
__attribute__((dllimport))
NTSTATUS

IoWMIDeviceObjectToInstanceName(
  PVOID DataBlockObject,
  PDEVICE_OBJECT DeviceObject,
  PUNICODE_STRING InstanceName);
__attribute__((dllimport))
NTSTATUS

IoWMIExecuteMethod(
  PVOID DataBlockObject,
  PUNICODE_STRING InstanceName,
  ULONG MethodId,
  ULONG InBufferSize,
  PULONG OutBufferSize,
  PUCHAR InOutBuffer);
__attribute__((dllimport))
NTSTATUS

IoWMIHandleToInstanceName(
  PVOID DataBlockObject,
  HANDLE FileHandle,
  PUNICODE_STRING InstanceName);
__attribute__((dllimport))
NTSTATUS

IoWMIOpenBlock(
  GUID *DataBlockGuid,
  ULONG DesiredAccess,
  PVOID *DataBlockObject);
__attribute__((dllimport))
NTSTATUS

IoWMIQueryAllData(
  PVOID DataBlockObject,
  ULONG *InOutBufferSize,
  PVOID OutBuffer);
__attribute__((dllimport))
NTSTATUS

IoWMIQueryAllDataMultiple(
  PVOID *DataBlockObjectList,
  ULONG ObjectCount,
  ULONG *InOutBufferSize,
  PVOID OutBuffer);
__attribute__((dllimport))
NTSTATUS

IoWMIQuerySingleInstance(
  PVOID DataBlockObject,
  PUNICODE_STRING InstanceName,
  ULONG *InOutBufferSize,
  PVOID OutBuffer);
__attribute__((dllimport))
NTSTATUS

IoWMISetNotificationCallback(
  PVOID Object,
  WMI_NOTIFICATION_CALLBACK Callback,
  PVOID Context );
__attribute__((dllimport))
NTSTATUS

IoWMISetSingleInstance(
  PVOID DataBlockObject,
  PUNICODE_STRING InstanceName,
  ULONG Version,
  ULONG ValueBufferSize,
  PVOID ValueBuffer);
__attribute__((dllimport))
NTSTATUS

IoWMISetSingleItem(
  PVOID DataBlockObject,
  PUNICODE_STRING InstanceName,
  ULONG DataItemId,
  ULONG Version,
  ULONG ValueBufferSize,
  PVOID ValueBuffer);
__attribute__((dllimport))
NTSTATUS

IoValidateDeviceIoControlAccess(
  PIRP Irp,
  ULONG RequiredAccess);
__attribute__((dllimport))
NTSTATUS

IoCsqInitializeEx(
  PIO_CSQ Csq,
  PIO_CSQ_INSERT_IRP_EX CsqInsertIrp,
  PIO_CSQ_REMOVE_IRP CsqRemoveIrp,
  PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp,
  PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock,
  PIO_CSQ_RELEASE_LOCK CsqReleaseLock,
  PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp);
__attribute__((dllimport))
NTSTATUS

IoCsqInsertIrpEx(
  PIO_CSQ Csq,
  PIRP Irp,
  PIO_CSQ_IRP_CONTEXT Context ,
  PVOID InsertContext );
__attribute__((dllimport))
ULONG

IoWMIDeviceObjectToProviderId(
  PDEVICE_OBJECT DeviceObject);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoSkipCurrentIrpStackLocation(
  PIRP Irp)
{
  ((void) 0);
  Irp->CurrentLocation++;
  Irp->Tail.Overlay.CurrentStackLocation++;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoSetNextIrpStackLocation(
  PIRP Irp)
{
  ((void) 0);
  Irp->CurrentLocation--;
  Irp->Tail.Overlay.CurrentStackLocation--;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PIO_STACK_LOCATION
IoGetNextIrpStackLocation(
  PIRP Irp)
{
  ((void) 0);
  return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoSetCompletionRoutine(
  PIRP Irp,
  PIO_COMPLETION_ROUTINE CompletionRoutine ,
  PVOID Context ,
  BOOLEAN InvokeOnSuccess,
  BOOLEAN InvokeOnError,
  BOOLEAN InvokeOnCancel)
{
  PIO_STACK_LOCATION irpSp;
  ((void) 0);
  irpSp = IoGetNextIrpStackLocation(Irp);
  irpSp->CompletionRoutine = CompletionRoutine;
  irpSp->Context = Context;
  irpSp->Control = 0;
  if (InvokeOnSuccess) {
    irpSp->Control = 0x40;
  }
  if (InvokeOnError) {
    irpSp->Control |= 0x80;
  }
  if (InvokeOnCancel) {
    irpSp->Control |= 0x20;
  }
}
__attribute__((dllimport))
BOOLEAN
IoIs32bitProcess(
  PIRP Irp );
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PIO_STACK_LOCATION
IoGetCurrentIrpStackLocation(
  PIRP Irp)
{
  ((void) 0);
  return Irp->Tail.Overlay.CurrentStackLocation;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoMarkIrpPending(
  PIRP Irp)
{
  IoGetCurrentIrpStackLocation( (Irp) )->Control |= 0x01;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoInitializeDpcRequest(
  PDEVICE_OBJECT DeviceObject,
  PIO_DPC_ROUTINE DpcRoutine)
{
  KeInitializeDpc( &DeviceObject->Dpc,
                   (PKDEFERRED_ROUTINE) DpcRoutine,
                   DeviceObject );
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoCopyCurrentIrpStackLocationToNext(
  PIRP Irp)
{
  PIO_STACK_LOCATION irpSp;
  PIO_STACK_LOCATION nextIrpSp;
  irpSp = IoGetCurrentIrpStackLocation(Irp);
  nextIrpSp = IoGetNextIrpStackLocation(Irp);
  memcpy(nextIrpSp, irpSp, __builtin_offsetof(IO_STACK_LOCATION, CompletionRoutine));
  nextIrpSp->Control = 0;
}
__attribute__((dllimport))
void

IoGetStackLimits(
  PULONG_PTR LowLimit,
  PULONG_PTR HighLimit);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
ULONG_PTR
IoGetRemainingStackSize(void)
{
  ULONG_PTR End, Begin;
  ULONG_PTR Result;
  IoGetStackLimits(&Begin, &End);
  Result = (ULONG_PTR)(&End) - Begin;
  return Result;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
IoInitializeThreadedDpcRequest(
  PDEVICE_OBJECT DeviceObject,
  PIO_DPC_ROUTINE DpcRoutine)
{
  KeInitializeThreadedDpc(&DeviceObject->Dpc,
                          (PKDEFERRED_ROUTINE) DpcRoutine,
                          DeviceObject );
}
__attribute__((dllimport))
NTSTATUS

PoCallDriver(
  struct _DEVICE_OBJECT *DeviceObject,
  struct _IRP *Irp);
__attribute__((dllimport))
PULONG

PoRegisterDeviceForIdleDetection(
  struct _DEVICE_OBJECT *DeviceObject,
  ULONG ConservationIdleTime,
  ULONG PerformanceIdleTime,
  DEVICE_POWER_STATE State);
__attribute__((dllimport))
PVOID

PoRegisterSystemState(
  PVOID StateHandle ,
  EXECUTION_STATE Flags);
__attribute__((dllimport))
NTSTATUS

PoRequestPowerIrp(
  struct _DEVICE_OBJECT *DeviceObject,
  UCHAR MinorFunction,
  POWER_STATE PowerState,
  PREQUEST_POWER_COMPLETE CompletionFunction ,
  PVOID Context ,
  struct _IRP **Irp );
__attribute__((dllimport))
POWER_STATE

PoSetPowerState(
  struct _DEVICE_OBJECT *DeviceObject,
  POWER_STATE_TYPE Type,
  POWER_STATE State);
__attribute__((dllimport))
void

PoSetSystemState(
  EXECUTION_STATE Flags);
__attribute__((dllimport))
void

PoStartNextPowerIrp(
  struct _IRP *Irp);
__attribute__((dllimport))
void

PoUnregisterSystemState(
  PVOID StateHandle);
__attribute__((dllimport))
NTSTATUS

PoRequestShutdownEvent(
  PVOID *Event);
__attribute__((dllimport))
void

ExAcquireFastMutex(
  PFAST_MUTEX FastMutex);
__attribute__((dllimport))
void

ExReleaseFastMutex(
  PFAST_MUTEX FastMutex);
__attribute__((dllimport))
BOOLEAN

ExTryToAcquireFastMutex(
  PFAST_MUTEX FastMutex);
__attribute__((dllimport))
USHORT
ExQueryDepthSList( PSLIST_HEADER ListHead);
__attribute__((dllimport))
PSLIST_ENTRY
ExpInterlockedFlushSList(
  PSLIST_HEADER ListHead);
__attribute__((dllimport))
PSLIST_ENTRY
ExpInterlockedPopEntrySList(
  PSLIST_HEADER ListHead);
__attribute__((dllimport))
PSLIST_ENTRY
ExpInterlockedPushEntrySList(
  PSLIST_HEADER ListHead,
  PSLIST_ENTRY ListEntry);
static __inline
PVOID
ExAllocateFromPagedLookasideList(
  PPAGED_LOOKASIDE_LIST Lookaside)
{
  PVOID Entry;
  Lookaside->L.TotalAllocates++;
  Entry = ExpInterlockedPopEntrySList(&Lookaside->L.ListHead);
  if (Entry == ((void *)0)) {
    Lookaside->L.AllocateMisses++;
    Entry = (Lookaside->L.Allocate)(Lookaside->L.Type,
                                    Lookaside->L.Size,
                                    Lookaside->L.Tag);
  }
  return Entry;
}
static __inline
void
ExFreeToPagedLookasideList(
  PPAGED_LOOKASIDE_LIST Lookaside,
  PVOID Entry)
{
  Lookaside->L.TotalFrees++;
  if (ExQueryDepthSList(&Lookaside->L.ListHead) >= Lookaside->L.Depth) {
    Lookaside->L.FreeMisses++;
    (Lookaside->L.Free)(Entry);
  } else {
    ExpInterlockedPushEntrySList(&Lookaside->L.ListHead, (PSLIST_ENTRY)Entry);
  }
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void
ExInitializeFastMutex(
  PFAST_MUTEX FastMutex)
{
  FastMutex->Count = (0x1);
  FastMutex->Owner = ((void *)0);
  FastMutex->Contention = 0;
  KeInitializeEvent(&FastMutex->Event, SynchronizationEvent, 0);
  return;
}
__attribute__((dllimport))
void

ExAcquireFastMutexUnsafe(
  PFAST_MUTEX FastMutex);
__attribute__((dllimport))
void

ExReleaseFastMutexUnsafe(
  PFAST_MUTEX FastMutex);
__attribute__((dllimport))
BOOLEAN

ExAcquireResourceExclusiveLite(
  PERESOURCE Resource,
  BOOLEAN Wait);
__attribute__((dllimport))
BOOLEAN

ExAcquireResourceSharedLite(
  PERESOURCE Resource,
  BOOLEAN Wait);
__attribute__((dllimport))
BOOLEAN

ExAcquireSharedStarveExclusive(
  PERESOURCE Resource,
  BOOLEAN Wait);
__attribute__((dllimport))
BOOLEAN

ExAcquireSharedWaitForExclusive(
  PERESOURCE Resource,
  BOOLEAN Wait);
__attribute__((dllimport))
PVOID

ExAllocatePool(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
PVOID

ExAllocatePoolWithQuota(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
PVOID

ExAllocatePoolWithQuotaTag(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes,
  ULONG Tag);
__attribute__((dllimport))
PVOID

ExAllocatePoolWithTag(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes,
  ULONG Tag);
__attribute__((dllimport))
PVOID

ExAllocatePoolWithTagPriority(
  POOL_TYPE PoolType,
  SIZE_T NumberOfBytes,
  ULONG Tag,
  EX_POOL_PRIORITY Priority);
__attribute__((dllimport))
void

ExConvertExclusiveToSharedLite(
  PERESOURCE Resource);
__attribute__((dllimport))
NTSTATUS

ExCreateCallback(
  PCALLBACK_OBJECT *CallbackObject,
  POBJECT_ATTRIBUTES ObjectAttributes,
  BOOLEAN Create,
  BOOLEAN AllowMultipleCallbacks);
__attribute__((dllimport))
void

ExDeleteNPagedLookasideList(
  PNPAGED_LOOKASIDE_LIST Lookaside);
__attribute__((dllimport))
void

ExDeletePagedLookasideList(
  PPAGED_LOOKASIDE_LIST Lookaside);
__attribute__((dllimport))
NTSTATUS

ExDeleteResourceLite(
  PERESOURCE Resource);
__attribute__((dllimport))
void

ExFreePool(
  PVOID P);
__attribute__((dllimport))
void

ExFreePoolWithTag(
  PVOID P,
  ULONG Tag);
__attribute__((dllimport))
ULONG

ExGetExclusiveWaiterCount(
  PERESOURCE Resource);
__attribute__((dllimport))
KPROCESSOR_MODE

ExGetPreviousMode(void);
__attribute__((dllimport))
ULONG

ExGetSharedWaiterCount(
  PERESOURCE Resource);
__attribute__((dllimport))
void

ExInitializeNPagedLookasideList(
  PNPAGED_LOOKASIDE_LIST Lookaside,
  PALLOCATE_FUNCTION Allocate ,
  PFREE_FUNCTION Free ,
  ULONG Flags,
  SIZE_T Size,
  ULONG Tag,
  USHORT Depth);
__attribute__((dllimport))
void

ExInitializePagedLookasideList(
  PPAGED_LOOKASIDE_LIST Lookaside,
  PALLOCATE_FUNCTION Allocate ,
  PFREE_FUNCTION Free ,
  ULONG Flags,
  SIZE_T Size,
  ULONG Tag,
  USHORT Depth);
__attribute__((dllimport))
NTSTATUS

ExInitializeResourceLite(
  PERESOURCE Resource);
__attribute__((dllimport))
LARGE_INTEGER

ExInterlockedAddLargeInteger(
  PLARGE_INTEGER Addend,
  LARGE_INTEGER Increment,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
ULONG

ExInterlockedAddUlong(
  PULONG Addend,
  ULONG Increment,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
PLIST_ENTRY

ExInterlockedInsertHeadList(
  PLIST_ENTRY ListHead,
  PLIST_ENTRY ListEntry,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
PLIST_ENTRY

ExInterlockedInsertTailList(
  PLIST_ENTRY ListHead,
  PLIST_ENTRY ListEntry,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
PSINGLE_LIST_ENTRY

ExInterlockedPopEntryList(
  PSINGLE_LIST_ENTRY ListHead,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
PSINGLE_LIST_ENTRY

ExInterlockedPushEntryList(
  PSINGLE_LIST_ENTRY ListHead,
  PSINGLE_LIST_ENTRY ListEntry,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
PLIST_ENTRY

ExInterlockedRemoveHeadList(
  PLIST_ENTRY ListHead,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
BOOLEAN

ExIsProcessorFeaturePresent(
  ULONG ProcessorFeature);
__attribute__((dllimport))
BOOLEAN

ExIsResourceAcquiredExclusiveLite(
  PERESOURCE Resource);
__attribute__((dllimport))
ULONG

ExIsResourceAcquiredSharedLite(
  PERESOURCE Resource);
__attribute__((dllimport))
void

ExLocalTimeToSystemTime(
  PLARGE_INTEGER LocalTime,
  PLARGE_INTEGER SystemTime);
__attribute__((dllimport))
void

ExNotifyCallback(
  PCALLBACK_OBJECT CallbackObject,
  PVOID Argument1 ,
  PVOID Argument2 );
__attribute__((dllimport))
void

ExQueueWorkItem(
  PWORK_QUEUE_ITEM WorkItem,
  WORK_QUEUE_TYPE QueueType);
__attribute__((dllimport))
__attribute__((noreturn))
void

ExRaiseStatus(
  NTSTATUS Status);
__attribute__((dllimport))
PVOID

ExRegisterCallback(
  PCALLBACK_OBJECT CallbackObject,
  PCALLBACK_FUNCTION CallbackFunction,
  PVOID CallbackContext );
__attribute__((dllimport))
NTSTATUS

ExReinitializeResourceLite(
  PERESOURCE Resource);
__attribute__((dllimport))
void

ExReleaseResourceForThreadLite(
  PERESOURCE Resource,
  ERESOURCE_THREAD ResourceThreadId);
__attribute__((dllimport))
void

ExReleaseResourceLite(
  PERESOURCE Resource);
__attribute__((dllimport))
void

ExSetResourceOwnerPointer(
  PERESOURCE Resource,
  PVOID OwnerPointer);
__attribute__((dllimport))
ULONG

ExSetTimerResolution(
  ULONG DesiredTime,
  BOOLEAN SetResolution);
__attribute__((dllimport))
void

ExSystemTimeToLocalTime(
  PLARGE_INTEGER SystemTime,
  PLARGE_INTEGER LocalTime);
__attribute__((dllimport))
void

ExUnregisterCallback(
  PVOID CbRegistration);
__attribute__((dllimport))
BOOLEAN

ExAcquireRundownProtection(
  PEX_RUNDOWN_REF RunRef);
__attribute__((dllimport))
void

ExInitializeRundownProtection(
  PEX_RUNDOWN_REF RunRef);
__attribute__((dllimport))
void

ExReInitializeRundownProtection(
  PEX_RUNDOWN_REF RunRef);
__attribute__((dllimport))
void

ExReleaseRundownProtection(
  PEX_RUNDOWN_REF RunRef);
__attribute__((dllimport))
void

ExRundownCompleted(
  PEX_RUNDOWN_REF RunRef);
__attribute__((dllimport))
BOOLEAN

ExVerifySuite(
  SUITE_TYPE SuiteType);
__attribute__((dllimport))
void

ExWaitForRundownProtectionRelease(
  PEX_RUNDOWN_REF RunRef);
__attribute__((dllimport))
BOOLEAN

ExAcquireRundownProtectionEx(
  PEX_RUNDOWN_REF RunRef,
  ULONG Count);
__attribute__((dllimport))
void

ExReleaseRundownProtectionEx(
  PEX_RUNDOWN_REF RunRef,
  ULONG Count);
static __inline PVOID
ExAllocateFromNPagedLookasideList(
  PNPAGED_LOOKASIDE_LIST Lookaside)
{
  PVOID Entry;
  Lookaside->L.TotalAllocates++;
  Entry = ExpInterlockedPopEntrySList(&Lookaside->L.ListHead);
  if (Entry == ((void *)0)) {
    Lookaside->L.AllocateMisses++;
    Entry = (Lookaside->L.Allocate)(Lookaside->L.Type,
                                    Lookaside->L.Size,
                                    Lookaside->L.Tag);
  }
  return Entry;
}
static __inline void
ExFreeToNPagedLookasideList(
  PNPAGED_LOOKASIDE_LIST Lookaside,
  PVOID Entry)
{
  Lookaside->L.TotalFrees++;
  if (ExQueryDepthSList(&Lookaside->L.ListHead) >= Lookaside->L.Depth) {
    Lookaside->L.FreeMisses++;
    (Lookaside->L.Free)(Entry);
  } else {
      ExpInterlockedPushEntrySList(&Lookaside->L.ListHead, (PSLIST_ENTRY)Entry);
   }
}
__attribute__((dllimport))
LONG_PTR

ObfDereferenceObject(
  PVOID Object);
__attribute__((dllimport))
NTSTATUS

ObGetObjectSecurity(
  PVOID Object,
  PSECURITY_DESCRIPTOR *SecurityDescriptor,
  PBOOLEAN MemoryAllocated);
__attribute__((dllimport))
LONG_PTR

ObfReferenceObject(
  PVOID Object);
__attribute__((dllimport))
NTSTATUS

ObReferenceObjectByHandle(
  HANDLE Handle,
  ACCESS_MASK DesiredAccess,
  POBJECT_TYPE ObjectType ,
  KPROCESSOR_MODE AccessMode,
  PVOID *Object,
  POBJECT_HANDLE_INFORMATION HandleInformation );
__attribute__((dllimport))
NTSTATUS

ObReferenceObjectByPointer(
  PVOID Object,
  ACCESS_MASK DesiredAccess,
  POBJECT_TYPE ObjectType ,
  KPROCESSOR_MODE AccessMode);
__attribute__((dllimport))
void

ObReleaseObjectSecurity(
  PSECURITY_DESCRIPTOR SecurityDescriptor,
  BOOLEAN MemoryAllocated);
__attribute__((dllimport))
NTSTATUS

PsWrapApcWow64Thread(
  PVOID *ApcContext,
  PVOID *ApcRoutine);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PETHREAD

PsGetCurrentThread(void)
{
  return (PETHREAD)KeGetCurrentThread();
}
__attribute__((dllimport))
NTSTATUS

PsCreateSystemThread(
  PHANDLE ThreadHandle,
  ULONG DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes ,
  HANDLE ProcessHandle ,
  PCLIENT_ID ClientId ,
  PKSTART_ROUTINE StartRoutine,
  PVOID StartContext );
__attribute__((dllimport))
NTSTATUS

PsTerminateSystemThread(
  NTSTATUS ExitStatus);
__attribute__((dllimport))
NTSTATUS

WmiQueryTraceInformation(
  TRACE_INFORMATION_CLASS TraceInformationClass,
  PVOID TraceInformation,
  ULONG TraceInformationLength,
  PULONG RequiredLength ,
  PVOID Buffer );
__attribute__((dllimport))
NTSTATUS

WmiQueryTraceInformation(
  TRACE_INFORMATION_CLASS TraceInformationClass,
  PVOID TraceInformation,
  ULONG TraceInformationLength,
  PULONG RequiredLength ,
  PVOID Buffer );
ULONG
__attribute__((__cdecl__))
DbgPrint(
  PCSTR Format,
  ...);
__attribute__((dllimport))
ULONG
__attribute__((__cdecl__))
DbgPrintReturnControlC(
  PCCH Format,
  ...);
__attribute__((dllimport))
ULONG
__attribute__((__cdecl__))
DbgPrintEx(
  ULONG ComponentId,
  ULONG Level,
  PCSTR Format,
  ...);
__attribute__((dllimport))
ULONG

vDbgPrintEx(
  ULONG ComponentId,
  ULONG Level,
  PCCH Format,
  va_list ap);
__attribute__((dllimport))
ULONG

vDbgPrintExWithPrefix(
  PCCH Prefix,
  ULONG ComponentId,
  ULONG Level,
  PCCH Format,
  va_list ap);
__attribute__((dllimport))
NTSTATUS

DbgQueryDebugFilterState(
  ULONG ComponentId,
  ULONG Level);
__attribute__((dllimport))
NTSTATUS

DbgSetDebugFilterState(
  ULONG ComponentId,
  ULONG Level,
  BOOLEAN State);
extern __attribute__((dllimport)) BOOLEAN KdDebuggerNotPresent;
extern __attribute__((dllimport)) BOOLEAN KdDebuggerEnabled;
__attribute__((dllimport))
NTSTATUS

KdDisableDebugger(void);
__attribute__((dllimport))
NTSTATUS

KdEnableDebugger(void);
void

DbgBreakPoint(void);
__attribute__((dllimport))
void

DbgBreakPointWithStatus(
  ULONG Status);
__attribute__((dllimport))
BOOLEAN

KdRefreshDebuggerNotPresent(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PVOID

HalAllocateCommonBuffer(
  PDMA_ADAPTER DmaAdapter,
  ULONG Length,
  PPHYSICAL_ADDRESS LogicalAddress,
  BOOLEAN CacheEnabled)
{
  PALLOCATE_COMMON_BUFFER allocateCommonBuffer;
  PVOID commonBuffer;
  allocateCommonBuffer = *(DmaAdapter)->DmaOperations->AllocateCommonBuffer;
  ((void) 0);
  commonBuffer = allocateCommonBuffer( DmaAdapter, Length, LogicalAddress, CacheEnabled );
  return commonBuffer;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void

HalFreeCommonBuffer(
  PDMA_ADAPTER DmaAdapter,
  ULONG Length,
  PHYSICAL_ADDRESS LogicalAddress,
  PVOID VirtualAddress,
  BOOLEAN CacheEnabled)
{
  PFREE_COMMON_BUFFER freeCommonBuffer;
  freeCommonBuffer = *(DmaAdapter)->DmaOperations->FreeCommonBuffer;
  ((void) 0);
  freeCommonBuffer( DmaAdapter, Length, LogicalAddress, VirtualAddress, CacheEnabled );
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
ULONG

HalReadDmaCounter(
  PDMA_ADAPTER DmaAdapter)
{
  PREAD_DMA_COUNTER readDmaCounter;
  ULONG counter;
  readDmaCounter = *(DmaAdapter)->DmaOperations->ReadDmaCounter;
  ((void) 0);
  counter = readDmaCounter( DmaAdapter );
  return counter;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
ULONG
HalGetDmaAlignment(
  PDMA_ADAPTER DmaAdapter)
{
  PGET_DMA_ALIGNMENT getDmaAlignment;
  ULONG alignment;
  getDmaAlignment = *(DmaAdapter)->DmaOperations->GetDmaAlignment;
  ((void) 0);
  alignment = getDmaAlignment( DmaAdapter );
  return alignment;
}
  typedef GUID CRM_PROTOCOL_ID,*PCRM_PROTOCOL_ID;
  typedef ULONG NOTIFICATION_MASK;
  typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
  } TRANSACTION_NOTIFICATION,*PTRANSACTION_NOTIFICATION;
  typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT,*PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
  typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
  } TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT,*PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
  typedef ULONG SAVEPOINT_ID,*PSAVEPOINT_ID;
  typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
  } TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT,*PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
  typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
  } TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
  typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
  } TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT,*PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
  typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT,*PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
  typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
  } KCRM_MARSHAL_HEADER,*PKCRM_MARSHAL_HEADER,* PRKCRM_MARSHAL_HEADER;
  typedef struct _KCRM_TRANSACTION_BLOB {
    GUID UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
  } KCRM_TRANSACTION_BLOB,*PKCRM_TRANSACTION_BLOB,* PRKCRM_TRANSACTION_BLOB;
  typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
  } KCRM_PROTOCOL_BLOB,*PKCRM_PROTOCOL_BLOB,* PRKCRM_PROTOCOL_BLOB;
typedef enum _TRANSACTION_OUTCOME {
  TransactionOutcomeUndetermined = 1,
  TransactionOutcomeCommitted,
  TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;
typedef enum _TRANSACTION_STATE {
  TransactionStateNormal = 1,
  TransactionStateIndoubt,
  TransactionStateCommittedNotify,
} TRANSACTION_STATE;
typedef struct _TRANSACTION_BASIC_INFORMATION {
  GUID TransactionId;
  ULONG State;
  ULONG Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
  GUID TmIdentity;
  LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
  GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
  ULONG LogPathLength;
  WCHAR LogPath[1];
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
  ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
  ULONG IsolationLevel;
  ULONG IsolationFlags;
  LARGE_INTEGER Timeout;
  ULONG Outcome;
  ULONG DescriptionLength;
  WCHAR Description[1];
} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;
typedef struct _TRANSACTION_BIND_INFORMATION {
  HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;
typedef struct _TRANSACTION_ENLISTMENT_PAIR {
  GUID EnlistmentId;
  GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;
typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
  ULONG NumberOfEnlistments;
  TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;
typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
  TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
  GUID ResourceManagerId;
  ULONG DescriptionLength;
  WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;
typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
  HANDLE IoCompletionPortHandle;
  ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;
typedef enum _KTMOBJECT_TYPE {
  KTMOBJECT_TRANSACTION,
  KTMOBJECT_TRANSACTION_MANAGER,
  KTMOBJECT_RESOURCE_MANAGER,
  KTMOBJECT_ENLISTMENT,
  KTMOBJECT_INVALID
} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
typedef struct _KTMOBJECT_CURSOR {
  GUID LastQuery;
  ULONG ObjectIdCount;
  GUID ObjectIds[1];
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;
typedef enum _TRANSACTION_INFORMATION_CLASS {
  TransactionBasicInformation,
  TransactionPropertiesInformation,
  TransactionEnlistmentInformation,
  TransactionSuperiorEnlistmentInformation
} TRANSACTION_INFORMATION_CLASS;
typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
  TransactionManagerBasicInformation,
  TransactionManagerLogInformation,
  TransactionManagerLogPathInformation,
  TransactionManagerRecoveryInformation = 4
} TRANSACTIONMANAGER_INFORMATION_CLASS;
typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
  ResourceManagerBasicInformation,
  ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;
typedef struct _ENLISTMENT_BASIC_INFORMATION {
  GUID EnlistmentId;
  GUID TransactionId;
  GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;
typedef struct _ENLISTMENT_CRM_INFORMATION {
  GUID CrmTransactionManagerId;
  GUID CrmResourceManagerId;
  GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;
typedef enum _ENLISTMENT_INFORMATION_CLASS {
  EnlistmentBasicInformation,
  EnlistmentRecoveryInformation,
  EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;
typedef struct _TRANSACTION_LIST_ENTRY {
  GUID UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;
typedef struct _TRANSACTION_LIST_INFORMATION {
  ULONG NumberOfTransactions;
  TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;
typedef NTSTATUS
( *PFN_NT_CREATE_TRANSACTION)(
  PHANDLE TransactionHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes ,
  LPGUID Uow ,
  HANDLE TmHandle ,
  ULONG CreateOptions ,
  ULONG IsolationLevel ,
  ULONG IsolationFlags ,
  PLARGE_INTEGER Timeout ,
  PUNICODE_STRING Description );
typedef NTSTATUS
( *PFN_NT_OPEN_TRANSACTION)(
  PHANDLE TransactionHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  LPGUID Uow ,
  HANDLE TmHandle );
typedef NTSTATUS
( *PFN_NT_QUERY_INFORMATION_TRANSACTION)(
  HANDLE TransactionHandle,
  TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
  PVOID TransactionInformation,
  ULONG TransactionInformationLength,
  PULONG ReturnLength );
typedef NTSTATUS
( *PFN_NT_SET_INFORMATION_TRANSACTION)(
  HANDLE TransactionHandle,
  TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
  PVOID TransactionInformation,
  ULONG TransactionInformationLength);
typedef NTSTATUS
( *PFN_NT_COMMIT_TRANSACTION)(
  HANDLE TransactionHandle,
  BOOLEAN Wait);
typedef NTSTATUS
( *PFN_NT_ROLLBACK_TRANSACTION)(
  HANDLE TransactionHandle,
  BOOLEAN Wait);
__attribute__((dllimport))
NTSTATUS

ZwClose(
  HANDLE Handle);
__attribute__((dllimport))
NTSTATUS

ZwCreateDirectoryObject(
  PHANDLE DirectoryHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes);
__attribute__((dllimport))
NTSTATUS

ZwCreateFile(
  PHANDLE FileHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  PIO_STATUS_BLOCK IoStatusBlock,
  PLARGE_INTEGER AllocationSize ,
  ULONG FileAttributes,
  ULONG ShareAccess,
  ULONG CreateDisposition,
  ULONG CreateOptions,
  PVOID EaBuffer ,
  ULONG EaLength);
__attribute__((dllimport))
NTSTATUS

ZwCreateKey(
  PHANDLE KeyHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  ULONG TitleIndex,
  PUNICODE_STRING Class ,
  ULONG CreateOptions,
  PULONG Disposition );
__attribute__((dllimport))
NTSTATUS

ZwCreateSection(
  PHANDLE SectionHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes ,
  PLARGE_INTEGER MaximumSize ,
  ULONG SectionPageProtection,
  ULONG AllocationAttributes,
  HANDLE FileHandle );
__attribute__((dllimport))
NTSTATUS

ZwDeleteKey(
  HANDLE KeyHandle);
__attribute__((dllimport))
NTSTATUS

ZwDeleteValueKey(
  HANDLE KeyHandle,
  PUNICODE_STRING ValueName);
__attribute__((dllimport))
NTSTATUS

ZwEnumerateKey(
  HANDLE KeyHandle,
  ULONG Index,
  KEY_INFORMATION_CLASS KeyInformationClass,
  PVOID KeyInformation ,
  ULONG Length,
  PULONG ResultLength);
__attribute__((dllimport))
NTSTATUS

ZwEnumerateValueKey(
  HANDLE KeyHandle,
  ULONG Index,
  KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
  PVOID KeyValueInformation ,
  ULONG Length,
  PULONG ResultLength);
__attribute__((dllimport))
NTSTATUS

ZwFlushKey(
  HANDLE KeyHandle);
__attribute__((dllimport))
NTSTATUS

ZwLoadDriver(
  PUNICODE_STRING DriverServiceName);
__attribute__((dllimport))
NTSTATUS

ZwMakeTemporaryObject(
  HANDLE Handle);
__attribute__((dllimport))
NTSTATUS

ZwMapViewOfSection(
  HANDLE SectionHandle,
  HANDLE ProcessHandle,
  PVOID *BaseAddress,
  ULONG_PTR ZeroBits,
  SIZE_T CommitSize,
  PLARGE_INTEGER SectionOffset ,
  PSIZE_T ViewSize,
  SECTION_INHERIT InheritDisposition,
  ULONG AllocationType,
  ULONG Protect);
__attribute__((dllimport))
NTSTATUS

ZwOpenFile(
  PHANDLE FileHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  PIO_STATUS_BLOCK IoStatusBlock,
  ULONG ShareAccess,
  ULONG OpenOptions);
__attribute__((dllimport))
NTSTATUS

ZwOpenKey(
  PHANDLE KeyHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes);
__attribute__((dllimport))
NTSTATUS

ZwOpenSection(
  PHANDLE SectionHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes);
__attribute__((dllimport))
NTSTATUS

ZwOpenSymbolicLinkObject(
  PHANDLE LinkHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes);
__attribute__((dllimport))
NTSTATUS

ZwQueryInformationFile(
  HANDLE FileHandle,
  PIO_STATUS_BLOCK IoStatusBlock,
  PVOID FileInformation,
  ULONG Length,
  FILE_INFORMATION_CLASS FileInformationClass);
__attribute__((dllimport))
NTSTATUS

ZwQueryKey(
  HANDLE KeyHandle,
  KEY_INFORMATION_CLASS KeyInformationClass,
  PVOID KeyInformation ,
  ULONG Length,
  PULONG ResultLength);
__attribute__((dllimport))
NTSTATUS

ZwQuerySymbolicLinkObject(
  HANDLE LinkHandle,
  PUNICODE_STRING LinkTarget,
  PULONG ReturnedLength );
__attribute__((dllimport))
NTSTATUS

ZwQueryValueKey(
  HANDLE KeyHandle,
  PUNICODE_STRING ValueName,
  KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
  PVOID KeyValueInformation ,
  ULONG Length,
  PULONG ResultLength);
__attribute__((dllimport))
NTSTATUS

ZwReadFile(
  HANDLE FileHandle,
  HANDLE Event ,
  PIO_APC_ROUTINE ApcRoutine ,
  PVOID ApcContext ,
  PIO_STATUS_BLOCK IoStatusBlock,
  PVOID Buffer,
  ULONG Length,
  PLARGE_INTEGER ByteOffset ,
  PULONG Key );
__attribute__((dllimport))
NTSTATUS

ZwSetInformationFile(
  HANDLE FileHandle,
  PIO_STATUS_BLOCK IoStatusBlock,
  PVOID FileInformation,
  ULONG Length,
  FILE_INFORMATION_CLASS FileInformationClass);
__attribute__((dllimport))
NTSTATUS

ZwSetValueKey(
  HANDLE KeyHandle,
  PUNICODE_STRING ValueName,
  ULONG TitleIndex ,
  ULONG Type,
  PVOID Data ,
  ULONG DataSize);
__attribute__((dllimport))
NTSTATUS

ZwUnloadDriver(
  PUNICODE_STRING DriverServiceName);
__attribute__((dllimport))
NTSTATUS

ZwUnmapViewOfSection(
  HANDLE ProcessHandle,
  PVOID BaseAddress );
__attribute__((dllimport))
NTSTATUS

ZwWriteFile(
  HANDLE FileHandle,
  HANDLE Event ,
  PIO_APC_ROUTINE ApcRoutine ,
  PVOID ApcContext ,
  PIO_STATUS_BLOCK IoStatusBlock,
  PVOID Buffer,
  ULONG Length,
  PLARGE_INTEGER ByteOffset ,
  PULONG Key );
__attribute__((dllimport))
NTSTATUS

ZwQueryFullAttributesFile(
  POBJECT_ATTRIBUTES ObjectAttributes,
  PFILE_NETWORK_OPEN_INFORMATION FileInformation);
__attribute__((dllimport))
NTSTATUS

ZwOpenEvent(
  PHANDLE EventHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes);
       
typedef union _MCI_ADDR {
  __extension__ struct {
    ULONG Address;
    ULONG Reserved;
  } ;
  ULONGLONG QuadPart;
} MCI_ADDR, *PMCI_ADDR;
typedef enum {
  HAL_MCE_RECORD,
  HAL_MCA_RECORD
} MCA_EXCEPTION_TYPE;
typedef union _MCI_STATS {
  struct {
    USHORT McaErrorCode;
    USHORT ModelErrorCode;
    ULONG OtherInformation:25;
    ULONG ContextCorrupt:1;
    ULONG AddressValid:1;
    ULONG MiscValid:1;
    ULONG ErrorEnabled:1;
    ULONG UncorrectedError:1;
    ULONG StatusOverFlow:1;
    ULONG Valid:1;
  } MciStatus;
  ULONG64 QuadPart;
} MCI_STATS, *PMCI_STATS;
typedef struct _MCA_EXCEPTION {
  ULONG VersionNumber;
  MCA_EXCEPTION_TYPE ExceptionType;
  LARGE_INTEGER TimeStamp;
  ULONG ProcessorNumber;
  ULONG Reserved1;
  union {
    struct {
      UCHAR BankNumber;
      UCHAR Reserved2[7];
      MCI_STATS Status;
      MCI_ADDR Address;
      ULONGLONG Misc;
    } Mca;
    struct {
      ULONGLONG Address;
      ULONGLONG Type;
    } Mce;
  } u;
  ULONG ExtCnt;
  ULONG Reserved3;
  ULONGLONG ExtReg[24];
} MCA_EXCEPTION, *PMCA_EXCEPTION;
typedef MCA_EXCEPTION CMC_EXCEPTION, *PCMC_EXCEPTION;
typedef MCA_EXCEPTION CPE_EXCEPTION, *PCPE_EXCEPTION;
typedef UCHAR ERROR_SEVERITY, *PERROR_SEVERITY;
typedef enum _ERROR_SEVERITY_VALUE {
  ErrorRecoverable = 0,
  ErrorFatal = 1,
  ErrorCorrected = 2,
  ErrorOthers = 3,
} ERROR_SEVERITY_VALUE;
typedef unsigned long error_status_t;
typedef GUID UUID;
struct _LOADER_PARAMETER_BLOCK;
struct _CREATE_DISK;
struct _DRIVE_LAYOUT_INFORMATION_EX;
struct _SET_PARTITION_INFORMATION_EX;
struct _DISK_GEOMETRY_EX;
typedef struct _BUS_HANDLER *PBUS_HANDLER;
typedef struct _DEVICE_HANDLER_OBJECT *PDEVICE_HANDLER_OBJECT;
typedef struct _PEB *PPEB;
typedef struct _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;
typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
typedef struct _ZONE_SEGMENT_HEADER {
  SINGLE_LIST_ENTRY SegmentList;
  PVOID Reserved;
} ZONE_SEGMENT_HEADER, *PZONE_SEGMENT_HEADER;
typedef struct _ZONE_HEADER {
  SINGLE_LIST_ENTRY FreeList;
  SINGLE_LIST_ENTRY SegmentList;
  ULONG BlockSize;
  ULONG TotalSegmentSize;
} ZONE_HEADER, *PZONE_HEADER;
typedef enum _CONFIGURATION_TYPE {
  ArcSystem,
  CentralProcessor,
  FloatingPointProcessor,
  PrimaryIcache,
  PrimaryDcache,
  SecondaryIcache,
  SecondaryDcache,
  SecondaryCache,
  EisaAdapter,
  TcAdapter,
  ScsiAdapter,
  DtiAdapter,
  MultiFunctionAdapter,
  DiskController,
  TapeController,
  CdromController,
  WormController,
  SerialController,
  NetworkController,
  DisplayController,
  ParallelController,
  PointerController,
  KeyboardController,
  AudioController,
  OtherController,
  DiskPeripheral,
  FloppyDiskPeripheral,
  TapePeripheral,
  ModemPeripheral,
  MonitorPeripheral,
  PrinterPeripheral,
  PointerPeripheral,
  KeyboardPeripheral,
  TerminalPeripheral,
  OtherPeripheral,
  LinePeripheral,
  NetworkPeripheral,
  SystemMemory,
  DockingInformation,
  RealModeIrqRoutingTable,
  RealModePCIEnumeration,
  MaximumType
} CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;
typedef NTSTATUS
( *PIO_QUERY_DEVICE_ROUTINE)(
  PVOID Context,
  PUNICODE_STRING PathName,
  INTERFACE_TYPE BusType,
  ULONG BusNumber,
  PKEY_VALUE_FULL_INFORMATION *BusInformation,
  CONFIGURATION_TYPE ControllerType,
  ULONG ControllerNumber,
  PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
  CONFIGURATION_TYPE PeripheralType,
  ULONG PeripheralNumber,
  PKEY_VALUE_FULL_INFORMATION *PeripheralInformation);
typedef enum _IO_QUERY_DEVICE_DATA_FORMAT {
  IoQueryDeviceIdentifier = 0,
  IoQueryDeviceConfigurationData,
  IoQueryDeviceComponentInformation,
  IoQueryDeviceMaxData
} IO_QUERY_DEVICE_DATA_FORMAT, *PIO_QUERY_DEVICE_DATA_FORMAT;
typedef void
( *PDRIVER_REINITIALIZE)(
  struct _DRIVER_OBJECT *DriverObject,
  PVOID Context ,
  ULONG Count);
typedef struct _CONTROLLER_OBJECT {
  CSHORT Type;
  CSHORT Size;
  PVOID ControllerExtension;
  KDEVICE_QUEUE DeviceWaitQueue;
  ULONG Spare1;
  LARGE_INTEGER Spare2;
} CONTROLLER_OBJECT, *PCONTROLLER_OBJECT;
typedef struct _CONFIGURATION_INFORMATION {
  ULONG DiskCount;
  ULONG FloppyCount;
  ULONG CdRomCount;
  ULONG TapeCount;
  ULONG ScsiPortCount;
  ULONG SerialCount;
  ULONG ParallelCount;
  BOOLEAN AtDiskPrimaryAddressClaimed;
  BOOLEAN AtDiskSecondaryAddressClaimed;
  ULONG Version;
  ULONG MediumChangerCount;
} CONFIGURATION_INFORMATION, *PCONFIGURATION_INFORMATION;
typedef struct _DISK_SIGNATURE {
  ULONG PartitionStyle;
  __extension__ union {
    struct {
      ULONG Signature;
      ULONG CheckSum;
    } Mbr;
    struct {
      GUID DiskId;
    } Gpt;
  } ;
} DISK_SIGNATURE, *PDISK_SIGNATURE;
typedef struct _TXN_PARAMETER_BLOCK {
  USHORT Length;
  USHORT TxFsContext;
  PVOID TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK;
typedef struct _IO_DRIVER_CREATE_CONTEXT {
  CSHORT Size;
  struct _ECP_LIST *ExtraCreateParameter;
  PVOID DeviceObjectHint;
  PTXN_PARAMETER_BLOCK TxnParameters;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT;
typedef struct _AGP_TARGET_BUS_INTERFACE_STANDARD {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PGET_SET_DEVICE_DATA SetBusData;
  PGET_SET_DEVICE_DATA GetBusData;
  UCHAR CapabilityID;
} AGP_TARGET_BUS_INTERFACE_STANDARD, *PAGP_TARGET_BUS_INTERFACE_STANDARD;
typedef NTSTATUS
( *PGET_LOCATION_STRING)(
  PVOID Context ,
  PWCHAR *LocationStrings);
typedef struct _PNP_LOCATION_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PGET_LOCATION_STRING GetLocationString;
} PNP_LOCATION_INTERFACE, *PPNP_LOCATION_INTERFACE;
typedef enum _ARBITER_ACTION {
  ArbiterActionTestAllocation,
  ArbiterActionRetestAllocation,
  ArbiterActionCommitAllocation,
  ArbiterActionRollbackAllocation,
  ArbiterActionQueryAllocatedResources,
  ArbiterActionWriteReservedResources,
  ArbiterActionQueryConflict,
  ArbiterActionQueryArbitrate,
  ArbiterActionAddReserved,
  ArbiterActionBootAllocation
} ARBITER_ACTION, *PARBITER_ACTION;
typedef struct _ARBITER_CONFLICT_INFO {
  PDEVICE_OBJECT OwningObject;
  ULONGLONG Start;
  ULONGLONG End;
} ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO;
typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {
  PLIST_ENTRY ArbitrationList;
  ULONG AllocateFromCount;
  PCM_PARTIAL_RESOURCE_DESCRIPTOR AllocateFrom;
} ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS;
typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {
  PLIST_ENTRY ArbitrationList;
  ULONG AllocateFromCount;
  PCM_PARTIAL_RESOURCE_DESCRIPTOR AllocateFrom;
} ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS;
typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {
  PLIST_ENTRY ArbitrationList;
} ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS;
typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {
  PCM_PARTIAL_RESOURCE_LIST *AllocatedResources;
} ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {
  PDEVICE_OBJECT PhysicalDeviceObject;
  PIO_RESOURCE_DESCRIPTOR ConflictingResource;
  PULONG ConflictCount;
  PARBITER_CONFLICT_INFO *Conflicts;
} ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS;
typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {
  PLIST_ENTRY ArbitrationList;
} ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS;
typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {
  PDEVICE_OBJECT ReserveDevice;
} ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS;
typedef struct _ARBITER_PARAMETERS {
  union {
    ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
    ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
    ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
    ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
    ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
    ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
    ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
  } Parameters;
} ARBITER_PARAMETERS, *PARBITER_PARAMETERS;
typedef enum _ARBITER_REQUEST_SOURCE {
  ArbiterRequestUndefined = -1,
  ArbiterRequestLegacyReported,
  ArbiterRequestHalReported,
  ArbiterRequestLegacyAssigned,
  ArbiterRequestPnpDetected,
  ArbiterRequestPnpEnumerated
} ARBITER_REQUEST_SOURCE;
typedef enum _ARBITER_RESULT {
  ArbiterResultUndefined = -1,
  ArbiterResultSuccess,
  ArbiterResultExternalConflict,
  ArbiterResultNullRequest
} ARBITER_RESULT;
typedef struct _ARBITER_LIST_ENTRY {
  LIST_ENTRY ListEntry;
  ULONG AlternativeCount;
  PIO_RESOURCE_DESCRIPTOR Alternatives;
  PDEVICE_OBJECT PhysicalDeviceObject;
  ARBITER_REQUEST_SOURCE RequestSource;
  ULONG Flags;
  LONG_PTR WorkSpace;
  INTERFACE_TYPE InterfaceType;
  ULONG SlotNumber;
  ULONG BusNumber;
  PCM_PARTIAL_RESOURCE_DESCRIPTOR Assignment;
  PIO_RESOURCE_DESCRIPTOR SelectedAlternative;
  ARBITER_RESULT Result;
} ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY;
typedef NTSTATUS
( *PARBITER_HANDLER)(
  PVOID Context,
  ARBITER_ACTION Action,
  PARBITER_PARAMETERS Parameters);
typedef struct _ARBITER_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PARBITER_HANDLER ArbiterHandler;
  ULONG Flags;
} ARBITER_INTERFACE, *PARBITER_INTERFACE;
typedef enum _RESOURCE_TRANSLATION_DIRECTION {
  TranslateChildToParent,
  TranslateParentToChild
} RESOURCE_TRANSLATION_DIRECTION;
typedef NTSTATUS
( *PTRANSLATE_RESOURCE_HANDLER)(
  PVOID Context ,
  PCM_PARTIAL_RESOURCE_DESCRIPTOR Source,
  RESOURCE_TRANSLATION_DIRECTION Direction,
  ULONG AlternativesCount ,
  IO_RESOURCE_DESCRIPTOR Alternatives[],
  PDEVICE_OBJECT PhysicalDeviceObject,
  PCM_PARTIAL_RESOURCE_DESCRIPTOR Target);
typedef NTSTATUS
( *PTRANSLATE_RESOURCE_REQUIREMENTS_HANDLER)(
  PVOID Context ,
  PIO_RESOURCE_DESCRIPTOR Source,
  PDEVICE_OBJECT PhysicalDeviceObject,
  PULONG TargetCount,
  PIO_RESOURCE_DESCRIPTOR *Target);
typedef struct _TRANSLATOR_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PTRANSLATE_RESOURCE_HANDLER TranslateResources;
  PTRANSLATE_RESOURCE_REQUIREMENTS_HANDLER TranslateResourceRequirements;
} TRANSLATOR_INTERFACE, *PTRANSLATOR_INTERFACE;
typedef struct _PCI_AGP_CAPABILITY {
  PCI_CAPABILITIES_HEADER Header;
  USHORT Minor:4;
  USHORT Major:4;
  USHORT Rsvd1:8;
  struct _PCI_AGP_STATUS {
    ULONG Rate:3;
    ULONG Agp3Mode:1;
    ULONG FastWrite:1;
    ULONG FourGB:1;
    ULONG HostTransDisable:1;
    ULONG Gart64:1;
    ULONG ITA_Coherent:1;
    ULONG SideBandAddressing:1;
    ULONG CalibrationCycle:3;
    ULONG AsyncRequestSize:3;
    ULONG Rsvd1:1;
    ULONG Isoch:1;
    ULONG Rsvd2:6;
    ULONG RequestQueueDepthMaximum:8;
  } AGPStatus;
  struct _PCI_AGP_COMMAND {
    ULONG Rate:3;
    ULONG Rsvd1:1;
    ULONG FastWriteEnable:1;
    ULONG FourGBEnable:1;
    ULONG Rsvd2:1;
    ULONG Gart64:1;
    ULONG AGPEnable:1;
    ULONG SBAEnable:1;
    ULONG CalibrationCycle:3;
    ULONG AsyncReqSize:3;
    ULONG Rsvd3:8;
    ULONG RequestQueueDepth:8;
  } AGPCommand;
} PCI_AGP_CAPABILITY, *PPCI_AGP_CAPABILITY;
typedef enum _EXTENDED_AGP_REGISTER {
  IsochStatus,
  AgpControl,
  ApertureSize,
  AperturePageSize,
  GartLow,
  GartHigh,
  IsochCommand
} EXTENDED_AGP_REGISTER, *PEXTENDED_AGP_REGISTER;
typedef struct _PCI_AGP_ISOCH_STATUS {
  ULONG ErrorCode:2;
  ULONG Rsvd1:1;
  ULONG Isoch_L:3;
  ULONG Isoch_Y:2;
  ULONG Isoch_N:8;
  ULONG Rsvd2:16;
} PCI_AGP_ISOCH_STATUS, *PPCI_AGP_ISOCH_STATUS;
typedef struct _PCI_AGP_CONTROL {
  ULONG Rsvd1:7;
  ULONG GTLB_Enable:1;
  ULONG AP_Enable:1;
  ULONG CAL_Disable:1;
  ULONG Rsvd2:22;
} PCI_AGP_CONTROL, *PPCI_AGP_CONTROL;
typedef struct _PCI_AGP_APERTURE_PAGE_SIZE {
  USHORT PageSizeMask:11;
  USHORT Rsvd1:1;
  USHORT PageSizeSelect:4;
} PCI_AGP_APERTURE_PAGE_SIZE, *PPCI_AGP_APERTURE_PAGE_SIZE;
typedef struct _PCI_AGP_ISOCH_COMMAND {
  USHORT Rsvd1:6;
  USHORT Isoch_Y:2;
  USHORT Isoch_N:8;
} PCI_AGP_ISOCH_COMMAND, *PPCI_AGP_ISOCH_COMMAND;
typedef struct PCI_AGP_EXTENDED_CAPABILITY {
  PCI_AGP_ISOCH_STATUS IsochStatus;
  PCI_AGP_CONTROL AgpControl;
  USHORT ApertureSize;
  PCI_AGP_APERTURE_PAGE_SIZE AperturePageSize;
  ULONG GartLow;
  ULONG GartHigh;
  PCI_AGP_ISOCH_COMMAND IsochCommand;
} PCI_AGP_EXTENDED_CAPABILITY, *PPCI_AGP_EXTENDED_CAPABILITY;
typedef struct _PCIX_BRIDGE_CAPABILITY {
  PCI_CAPABILITIES_HEADER Header;
  union {
    __extension__ struct {
      USHORT Bus64Bit:1;
      USHORT Bus133MHzCapable:1;
      USHORT SplitCompletionDiscarded:1;
      USHORT UnexpectedSplitCompletion:1;
      USHORT SplitCompletionOverrun:1;
      USHORT SplitRequestDelayed:1;
      USHORT BusModeFrequency:4;
      USHORT Rsvd:2;
      USHORT Version:2;
      USHORT Bus266MHzCapable:1;
      USHORT Bus533MHzCapable:1;
    } ;
  USHORT AsUSHORT;
  } SecondaryStatus;
  union {
    __extension__ struct {
      ULONG FunctionNumber:3;
      ULONG DeviceNumber:5;
      ULONG BusNumber:8;
      ULONG Device64Bit:1;
      ULONG Device133MHzCapable:1;
      ULONG SplitCompletionDiscarded:1;
      ULONG UnexpectedSplitCompletion:1;
      ULONG SplitCompletionOverrun:1;
      ULONG SplitRequestDelayed:1;
      ULONG Rsvd:7;
      ULONG DIMCapable:1;
      ULONG Device266MHzCapable:1;
      ULONG Device533MHzCapable:1;
    } ;
    ULONG AsULONG;
  } BridgeStatus;
  USHORT UpstreamSplitTransactionCapacity;
  USHORT UpstreamSplitTransactionLimit;
  USHORT DownstreamSplitTransactionCapacity;
  USHORT DownstreamSplitTransactionLimit;
  union {
    __extension__ struct {
      ULONG SelectSecondaryRegisters:1;
      ULONG ErrorPresentInOtherBank:1;
      ULONG AdditionalCorrectableError:1;
      ULONG AdditionalUncorrectableError:1;
      ULONG ErrorPhase:3;
      ULONG ErrorCorrected:1;
      ULONG Syndrome:8;
      ULONG ErrorFirstCommand:4;
      ULONG ErrorSecondCommand:4;
      ULONG ErrorUpperAttributes:4;
      ULONG ControlUpdateEnable:1;
      ULONG Rsvd:1;
      ULONG DisableSingleBitCorrection:1;
      ULONG EccMode:1;
    } ;
  ULONG AsULONG;
  } EccControlStatus;
  ULONG EccFirstAddress;
  ULONG EccSecondAddress;
  ULONG EccAttribute;
} PCIX_BRIDGE_CAPABILITY, *PPCIX_BRIDGE_CAPABILITY;
typedef struct _PCI_SUBSYSTEM_IDS_CAPABILITY {
  PCI_CAPABILITIES_HEADER Header;
  USHORT Reserved;
  USHORT SubVendorID;
  USHORT SubSystemID;
} PCI_SUBSYSTEM_IDS_CAPABILITY, *PPCI_SUBSYSTEM_IDS_CAPABILITY;
typedef struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD {
  union {
    __extension__ struct {
      ULONG ExtendedConfigOpRegions:1;
      ULONG ActiveStatePowerManagement:1;
      ULONG ClockPowerManagement:1;
      ULONG SegmentGroups:1;
      ULONG MessageSignaledInterrupts:1;
      ULONG WindowsHardwareErrorArchitecture:1;
      ULONG Reserved:26;
    } ;
    ULONG AsULONG;
  } u;
} PCI_ROOT_BUS_OSC_SUPPORT_FIELD, *PPCI_ROOT_BUS_OSC_SUPPORT_FIELD;
typedef struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD {
  union {
    __extension__ struct {
      ULONG ExpressNativeHotPlug:1;
      ULONG ShpcNativeHotPlug:1;
      ULONG ExpressNativePME:1;
      ULONG ExpressAdvancedErrorReporting:1;
      ULONG ExpressCapabilityStructure:1;
      ULONG Reserved:27;
    } ;
  ULONG AsULONG;
  } u;
} PCI_ROOT_BUS_OSC_CONTROL_FIELD, *PPCI_ROOT_BUS_OSC_CONTROL_FIELD;
typedef enum _PCI_HARDWARE_INTERFACE {
  PciConventional,
  PciXMode1,
  PciXMode2,
  PciExpress
} PCI_HARDWARE_INTERFACE, *PPCI_HARDWARE_INTERFACE;
typedef enum {
  BusWidth32Bits,
  BusWidth64Bits
} PCI_BUS_WIDTH;
typedef struct _PCI_ROOT_BUS_HARDWARE_CAPABILITY {
  PCI_HARDWARE_INTERFACE SecondaryInterface;
  __extension__ struct {
    BOOLEAN BusCapabilitiesFound;
    ULONG CurrentSpeedAndMode;
    ULONG SupportedSpeedsAndModes;
    BOOLEAN DeviceIDMessagingCapable;
    PCI_BUS_WIDTH SecondaryBusWidth;
  } ;
  PCI_ROOT_BUS_OSC_SUPPORT_FIELD OscFeatureSupport;
  PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlRequest;
  PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlGranted;
} PCI_ROOT_BUS_HARDWARE_CAPABILITY, *PPCI_ROOT_BUS_HARDWARE_CAPABILITY;
typedef union _PCI_EXPRESS_CAPABILITIES_REGISTER {
  __extension__ struct {
    USHORT CapabilityVersion:4;
    USHORT DeviceType:4;
    USHORT SlotImplemented:1;
    USHORT InterruptMessageNumber:5;
    USHORT Rsvd:2;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_CAPABILITIES_REGISTER, *PPCI_EXPRESS_CAPABILITIES_REGISTER;
typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER {
  __extension__ struct {
    ULONG MaxPayloadSizeSupported:3;
    ULONG PhantomFunctionsSupported:2;
    ULONG ExtendedTagSupported:1;
    ULONG L0sAcceptableLatency:3;
    ULONG L1AcceptableLatency:3;
    ULONG Undefined:3;
    ULONG RoleBasedErrorReporting:1;
    ULONG Rsvd1:2;
    ULONG CapturedSlotPowerLimit:8;
    ULONG CapturedSlotPowerLimitScale:2;
    ULONG Rsvd2:4;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER, *PPCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER;
typedef union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER {
  __extension__ struct {
    USHORT CorrectableErrorEnable:1;
    USHORT NonFatalErrorEnable:1;
    USHORT FatalErrorEnable:1;
    USHORT UnsupportedRequestErrorEnable:1;
    USHORT EnableRelaxedOrder:1;
    USHORT MaxPayloadSize:3;
    USHORT ExtendedTagEnable:1;
    USHORT PhantomFunctionsEnable:1;
    USHORT AuxPowerEnable:1;
    USHORT NoSnoopEnable:1;
    USHORT MaxReadRequestSize:3;
    USHORT BridgeConfigRetryEnable:1;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_DEVICE_CONTROL_REGISTER, *PPCI_EXPRESS_DEVICE_CONTROL_REGISTER;
typedef union _PCI_EXPRESS_DEVICE_STATUS_REGISTER {
  __extension__ struct {
    USHORT CorrectableErrorDetected:1;
    USHORT NonFatalErrorDetected:1;
    USHORT FatalErrorDetected:1;
    USHORT UnsupportedRequestDetected:1;
    USHORT AuxPowerDetected:1;
    USHORT TransactionsPending:1;
    USHORT Rsvd:10;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_DEVICE_STATUS_REGISTER, *PPCI_EXPRESS_DEVICE_STATUS_REGISTER;
typedef union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER {
  __extension__ struct {
    ULONG MaximumLinkSpeed:4;
    ULONG MaximumLinkWidth:6;
    ULONG ActiveStatePMSupport:2;
    ULONG L0sExitLatency:3;
    ULONG L1ExitLatency:3;
    ULONG ClockPowerManagement:1;
    ULONG SurpriseDownErrorReportingCapable:1;
    ULONG DataLinkLayerActiveReportingCapable:1;
    ULONG Rsvd:3;
    ULONG PortNumber:8;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_LINK_CAPABILITIES_REGISTER, *PPCI_EXPRESS_LINK_CAPABILITIES_REGISTER;
typedef union _PCI_EXPRESS_LINK_CONTROL_REGISTER {
  __extension__ struct {
    USHORT ActiveStatePMControl:2;
    USHORT Rsvd1:1;
    USHORT ReadCompletionBoundary:1;
    USHORT LinkDisable:1;
    USHORT RetrainLink:1;
    USHORT CommonClockConfig:1;
    USHORT ExtendedSynch:1;
    USHORT EnableClockPowerManagement:1;
    USHORT Rsvd2:7;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_LINK_CONTROL_REGISTER, *PPCI_EXPRESS_LINK_CONTROL_REGISTER;
typedef union _PCI_EXPRESS_LINK_STATUS_REGISTER {
  __extension__ struct {
    USHORT LinkSpeed:4;
    USHORT LinkWidth:6;
    USHORT Undefined:1;
    USHORT LinkTraining:1;
    USHORT SlotClockConfig:1;
    USHORT DataLinkLayerActive:1;
    USHORT Rsvd:2;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_LINK_STATUS_REGISTER, *PPCI_EXPRESS_LINK_STATUS_REGISTER;
typedef union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER {
  __extension__ struct {
    ULONG AttentionButtonPresent:1;
    ULONG PowerControllerPresent:1;
    ULONG MRLSensorPresent:1;
    ULONG AttentionIndicatorPresent:1;
    ULONG PowerIndicatorPresent:1;
    ULONG HotPlugSurprise:1;
    ULONG HotPlugCapable:1;
    ULONG SlotPowerLimit:8;
    ULONG SlotPowerLimitScale:2;
    ULONG ElectromechanicalLockPresent:1;
    ULONG NoCommandCompletedSupport:1;
    ULONG PhysicalSlotNumber:13;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER, *PPCI_EXPRESS_SLOT_CAPABILITIES_REGISTER;
typedef union _PCI_EXPRESS_SLOT_CONTROL_REGISTER {
  __extension__ struct {
    USHORT AttentionButtonEnable:1;
    USHORT PowerFaultDetectEnable:1;
    USHORT MRLSensorEnable:1;
    USHORT PresenceDetectEnable:1;
    USHORT CommandCompletedEnable:1;
    USHORT HotPlugInterruptEnable:1;
    USHORT AttentionIndicatorControl:2;
    USHORT PowerIndicatorControl:2;
    USHORT PowerControllerControl:1;
    USHORT ElectromechanicalLockControl:1;
    USHORT DataLinkStateChangeEnable:1;
    USHORT Rsvd:3;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_SLOT_CONTROL_REGISTER, *PPCI_EXPRESS_SLOT_CONTROL_REGISTER;
typedef union _PCI_EXPRESS_SLOT_STATUS_REGISTER {
  __extension__ struct {
    USHORT AttentionButtonPressed:1;
    USHORT PowerFaultDetected:1;
    USHORT MRLSensorChanged:1;
    USHORT PresenceDetectChanged:1;
    USHORT CommandCompleted:1;
    USHORT MRLSensorState:1;
    USHORT PresenceDetectState:1;
    USHORT ElectromechanicalLockEngaged:1;
    USHORT DataLinkStateChanged:1;
    USHORT Rsvd:7;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_SLOT_STATUS_REGISTER, *PPCI_EXPRESS_SLOT_STATUS_REGISTER;
typedef union _PCI_EXPRESS_ROOT_CONTROL_REGISTER {
  __extension__ struct {
    USHORT CorrectableSerrEnable:1;
    USHORT NonFatalSerrEnable:1;
    USHORT FatalSerrEnable:1;
    USHORT PMEInterruptEnable:1;
    USHORT CRSSoftwareVisibilityEnable:1;
    USHORT Rsvd:11;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_ROOT_CONTROL_REGISTER, *PPCI_EXPRESS_ROOT_CONTROL_REGISTER;
typedef union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER {
  __extension__ struct {
    USHORT CRSSoftwareVisibility:1;
    USHORT Rsvd:15;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER, *PPCI_EXPRESS_ROOT_CAPABILITIES_REGISTER;
typedef union _PCI_EXPRESS_ROOT_STATUS_REGISTER {
  __extension__ struct {
    ULONG PMERequestorId:16;
    ULONG PMEStatus:1;
    ULONG PMEPending:1;
    ULONG Rsvd:14;
  } ;
  ULONG AsULONG;
} PCI_EXPRESS_ROOT_STATUS_REGISTER, *PPCI_EXPRESS_ROOT_STATUS_REGISTER;
typedef struct _PCI_EXPRESS_CAPABILITY {
  PCI_CAPABILITIES_HEADER Header;
  PCI_EXPRESS_CAPABILITIES_REGISTER ExpressCapabilities;
  PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER DeviceCapabilities;
  PCI_EXPRESS_DEVICE_CONTROL_REGISTER DeviceControl;
  PCI_EXPRESS_DEVICE_STATUS_REGISTER DeviceStatus;
  PCI_EXPRESS_LINK_CAPABILITIES_REGISTER LinkCapabilities;
  PCI_EXPRESS_LINK_CONTROL_REGISTER LinkControl;
  PCI_EXPRESS_LINK_STATUS_REGISTER LinkStatus;
  PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER SlotCapabilities;
  PCI_EXPRESS_SLOT_CONTROL_REGISTER SlotControl;
  PCI_EXPRESS_SLOT_STATUS_REGISTER SlotStatus;
  PCI_EXPRESS_ROOT_CONTROL_REGISTER RootControl;
  PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER RootCapabilities;
  PCI_EXPRESS_ROOT_STATUS_REGISTER RootStatus;
} PCI_EXPRESS_CAPABILITY, *PPCI_EXPRESS_CAPABILITY;
typedef enum {
  MRLClosed = 0,
  MRLOpen
} PCI_EXPRESS_MRL_STATE;
typedef enum {
  SlotEmpty = 0,
  CardPresent
} PCI_EXPRESS_CARD_PRESENCE;
typedef enum {
  IndicatorOn = 1,
  IndicatorBlink,
  IndicatorOff
} PCI_EXPRESS_INDICATOR_STATE;
typedef enum {
  PowerOn = 0,
  PowerOff
} PCI_EXPRESS_POWER_STATE;
typedef enum {
  L0sEntrySupport = 1,
  L0sAndL1EntrySupport = 3
} PCI_EXPRESS_ASPM_SUPPORT;
typedef enum {
  L0sAndL1EntryDisabled,
  L0sEntryEnabled,
  L1EntryEnabled,
  L0sAndL1EntryEnabled
} PCI_EXPRESS_ASPM_CONTROL;
typedef enum {
  L0s_Below64ns = 0,
  L0s_64ns_128ns,
  L0s_128ns_256ns,
  L0s_256ns_512ns,
  L0s_512ns_1us,
  L0s_1us_2us,
  L0s_2us_4us,
  L0s_Above4us
} PCI_EXPRESS_L0s_EXIT_LATENCY;
typedef enum {
  L1_Below1us = 0,
  L1_1us_2us,
  L1_2us_4us,
  L1_4us_8us,
  L1_8us_16us,
  L1_16us_32us,
  L1_32us_64us,
  L1_Above64us
} PCI_EXPRESS_L1_EXIT_LATENCY;
typedef enum {
  PciExpressEndpoint = 0,
  PciExpressLegacyEndpoint,
  PciExpressRootPort = 4,
  PciExpressUpstreamSwitchPort,
  PciExpressDownstreamSwitchPort,
  PciExpressToPciXBridge,
  PciXToExpressBridge,
  PciExpressRootComplexIntegratedEndpoint,
  PciExpressRootComplexEventCollector
} PCI_EXPRESS_DEVICE_TYPE;
typedef enum {
  MaxPayload128Bytes = 0,
  MaxPayload256Bytes,
  MaxPayload512Bytes,
  MaxPayload1024Bytes,
  MaxPayload2048Bytes,
  MaxPayload4096Bytes
} PCI_EXPRESS_MAX_PAYLOAD_SIZE;
typedef union _PCI_EXPRESS_PME_REQUESTOR_ID {
  __extension__ struct {
    USHORT FunctionNumber:3;
    USHORT DeviceNumber:5;
    USHORT BusNumber:8;
  } ;
  USHORT AsUSHORT;
} PCI_EXPRESS_PME_REQUESTOR_ID, *PPCI_EXPRESS_PME_REQUESTOR_ID;
typedef enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE {
  ResourceTypeSingle = 0,
  ResourceTypeRange,
  ResourceTypeExtendedCounterConfiguration,
  ResourceTypeOverflow,
  ResourceTypeMax
} PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE;
typedef struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR {
  PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE Type;
  ULONG Flags;
  union {
    ULONG CounterIndex;
    ULONG ExtendedRegisterAddress;
    struct {
      ULONG Begin;
      ULONG End;
    } Range;
  } u;
} PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR, *PPHYSICAL_COUNTER_RESOURCE_DESCRIPTOR;
typedef struct _PHYSICAL_COUNTER_RESOURCE_LIST {
  ULONG Count;
  PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR Descriptors[1];
} PHYSICAL_COUNTER_RESOURCE_LIST, *PPHYSICAL_COUNTER_RESOURCE_LIST;
typedef void
( *PciPin2Line)(
  struct _BUS_HANDLER *BusHandler,
  struct _BUS_HANDLER *RootHandler,
  PCI_SLOT_NUMBER SlotNumber,
  PPCI_COMMON_CONFIG PciData);
typedef void
( *PciLine2Pin)(
  struct _BUS_HANDLER *BusHandler,
  struct _BUS_HANDLER *RootHandler,
  PCI_SLOT_NUMBER SlotNumber,
  PPCI_COMMON_CONFIG PciNewData,
  PPCI_COMMON_CONFIG PciOldData);
typedef void
( *PciReadWriteConfig)(
  struct _BUS_HANDLER *BusHandler,
  PCI_SLOT_NUMBER Slot,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef struct _PCIBUSDATA {
  ULONG Tag;
  ULONG Version;
  PciReadWriteConfig ReadConfig;
  PciReadWriteConfig WriteConfig;
  PciPin2Line Pin2Line;
  PciLine2Pin Line2Pin;
  PCI_SLOT_NUMBER ParentSlot;
  PVOID Reserved[4];
} PCIBUSDATA, *PPCIBUSDATA;
typedef ULONG
( *PCI_READ_WRITE_CONFIG)(
  PVOID Context,
  ULONG BusOffset,
  ULONG Slot,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef void
( *PCI_PIN_TO_LINE)(
  PVOID Context,
  PPCI_COMMON_CONFIG PciData);
typedef void
( *PCI_LINE_TO_PIN)(
  PVOID Context,
  PPCI_COMMON_CONFIG PciNewData,
  PPCI_COMMON_CONFIG PciOldData);
typedef void
( *PCI_ROOT_BUS_CAPABILITY)(
  PVOID Context,
  PPCI_ROOT_BUS_HARDWARE_CAPABILITY HardwareCapability);
typedef void
( *PCI_EXPRESS_WAKE_CONTROL)(
  PVOID Context,
  BOOLEAN EnableWake);
typedef struct _PCI_BUS_INTERFACE_STANDARD {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PCI_READ_WRITE_CONFIG ReadConfig;
  PCI_READ_WRITE_CONFIG WriteConfig;
  PCI_PIN_TO_LINE PinToLine;
  PCI_LINE_TO_PIN LineToPin;
  PCI_ROOT_BUS_CAPABILITY RootBusCapability;
  PCI_EXPRESS_WAKE_CONTROL ExpressWakeControl;
} PCI_BUS_INTERFACE_STANDARD, *PPCI_BUS_INTERFACE_STANDARD;
typedef struct _FILE_ALIGNMENT_INFORMATION {
  ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFORMATION, *PFILE_ALIGNMENT_INFORMATION;
typedef struct _FILE_NAME_INFORMATION {
  ULONG FileNameLength;
  WCHAR FileName[1];
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;
typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION {
  ULONG FileAttributes;
  ULONG ReparseTag;
} FILE_ATTRIBUTE_TAG_INFORMATION, *PFILE_ATTRIBUTE_TAG_INFORMATION;
typedef struct _FILE_DISPOSITION_INFORMATION {
  BOOLEAN DeleteFile;
} FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION;
typedef struct _FILE_END_OF_FILE_INFORMATION {
  LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION;
typedef struct _FILE_VALID_DATA_LENGTH_INFORMATION {
  LARGE_INTEGER ValidDataLength;
} FILE_VALID_DATA_LENGTH_INFORMATION, *PFILE_VALID_DATA_LENGTH_INFORMATION;
typedef struct _FILE_FS_LABEL_INFORMATION {
  ULONG VolumeLabelLength;
  WCHAR VolumeLabel[1];
} FILE_FS_LABEL_INFORMATION, *PFILE_FS_LABEL_INFORMATION;
typedef struct _FILE_FS_VOLUME_INFORMATION {
  LARGE_INTEGER VolumeCreationTime;
  ULONG VolumeSerialNumber;
  ULONG VolumeLabelLength;
  BOOLEAN SupportsObjects;
  WCHAR VolumeLabel[1];
} FILE_FS_VOLUME_INFORMATION, *PFILE_FS_VOLUME_INFORMATION;
typedef struct _FILE_FS_SIZE_INFORMATION {
  LARGE_INTEGER TotalAllocationUnits;
  LARGE_INTEGER AvailableAllocationUnits;
  ULONG SectorsPerAllocationUnit;
  ULONG BytesPerSector;
} FILE_FS_SIZE_INFORMATION, *PFILE_FS_SIZE_INFORMATION;
typedef struct _FILE_FS_FULL_SIZE_INFORMATION {
  LARGE_INTEGER TotalAllocationUnits;
  LARGE_INTEGER CallerAvailableAllocationUnits;
  LARGE_INTEGER ActualAvailableAllocationUnits;
  ULONG SectorsPerAllocationUnit;
  ULONG BytesPerSector;
} FILE_FS_FULL_SIZE_INFORMATION, *PFILE_FS_FULL_SIZE_INFORMATION;
typedef struct _FILE_FS_OBJECTID_INFORMATION {
  UCHAR ObjectId[16];
  UCHAR ExtendedInfo[48];
} FILE_FS_OBJECTID_INFORMATION, *PFILE_FS_OBJECTID_INFORMATION;
typedef union _FILE_SEGMENT_ELEMENT {
  PVOID64 Buffer;
  ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
typedef enum _BUS_DATA_TYPE {
  ConfigurationSpaceUndefined = -1,
  Cmos,
  EisaConfiguration,
  Pos,
  CbusConfiguration,
  PCIConfiguration,
  VMEConfiguration,
  NuBusConfiguration,
  PCMCIAConfiguration,
  MPIConfiguration,
  MPSAConfiguration,
  PNPISAConfiguration,
  SgiInternalConfiguration,
  MaximumBusDataType
} BUS_DATA_TYPE, *PBUS_DATA_TYPE;
typedef NTSTATUS
( *PLEGACY_DEVICE_DETECTION_HANDLER)(
  PVOID Context,
  INTERFACE_TYPE LegacyBusType,
  ULONG BusNumber,
  ULONG SlotNumber,
  PDEVICE_OBJECT *PhysicalDeviceObject);
typedef struct _ROUTING_TOKEN {
  PVOID LinkNode;
  ULONG StaticVector;
  UCHAR Flags;
} ROUTING_TOKEN, *PROUTING_TOKEN;
typedef NTSTATUS
( *PGET_INTERRUPT_ROUTING)(
  PDEVICE_OBJECT Pdo,
  ULONG *Bus,
  ULONG *PciSlot,
  UCHAR *InterruptLine,
  UCHAR *InterruptPin,
  UCHAR *ClassCode,
  UCHAR *SubClassCode,
  PDEVICE_OBJECT *ParentPdo,
  ROUTING_TOKEN *RoutingToken,
  UCHAR *Flags);
typedef NTSTATUS
( *PSET_INTERRUPT_ROUTING_TOKEN)(
  PDEVICE_OBJECT Pdo,
  PROUTING_TOKEN RoutingToken);
typedef void
( *PUPDATE_INTERRUPT_LINE)(
  PDEVICE_OBJECT Pdo,
  UCHAR LineRegister);
typedef struct _INT_ROUTE_INTERFACE_STANDARD {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PGET_INTERRUPT_ROUTING GetInterruptRouting;
  PSET_INTERRUPT_ROUTING_TOKEN SetInterruptRoutingToken;
  PUPDATE_INTERRUPT_LINE UpdateInterruptLine;
} INT_ROUTE_INTERFACE_STANDARD, *PINT_ROUTE_INTERFACE_STANDARD;
typedef struct _LEGACY_DEVICE_DETECTION_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PLEGACY_DEVICE_DETECTION_HANDLER LegacyDeviceDetection;
} LEGACY_DEVICE_DETECTION_INTERFACE, *PLEGACY_DEVICE_DETECTION_INTERFACE;
extern const GUID GUID_PCI_CARDBUS_INTERFACE_PRIVATE;
extern const GUID GUID_PCI_PME_INTERFACE;
typedef NTSTATUS
( *PCARDBUSADD)(
  PDEVICE_OBJECT DeviceObject,
  PVOID *DeviceContext);
typedef NTSTATUS
( *PCARDBUSDELETE)(
  PVOID DeviceContext);
typedef NTSTATUS
( *PCARDBUSPCIDISPATCH)(
  PVOID DeviceContext,
  PIRP Irp);
typedef void
( *PPME_SET_PME_ENABLE)(
  PDEVICE_OBJECT Pdo,
  BOOLEAN PmeEnable);
typedef void
( *PPME_CLEAR_PME_STATUS)(
  PDEVICE_OBJECT Pdo);
typedef void
( *PPME_GET_INFORMATION)(
  PDEVICE_OBJECT Pdo,
  PBOOLEAN PmeCapable,
  PBOOLEAN PmeStatus,
  PBOOLEAN PmeEnable);
typedef struct _PCI_CARDBUS_INTERFACE_PRIVATE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PDRIVER_OBJECT DriverObject;
  PCARDBUSADD AddCardBus;
  PCARDBUSDELETE DeleteCardBus;
  PCARDBUSPCIDISPATCH DispatchPnp;
} PCI_CARDBUS_INTERFACE_PRIVATE, *PPCI_CARDBUS_INTERFACE_PRIVATE;
typedef struct _PCI_PME_INTERFACE {
  USHORT Size;
  USHORT Version;
  PVOID Context;
  PINTERFACE_REFERENCE InterfaceReference;
  PINTERFACE_DEREFERENCE InterfaceDereference;
  PPME_GET_INFORMATION GetPmeInformation;
  PPME_CLEAR_PME_STATUS ClearPmeStatus;
  PPME_SET_PME_ENABLE UpdateEnable;
} PCI_PME_INTERFACE, *PPCI_PME_INTERFACE;
typedef BOOLEAN
( *PHAL_RESET_DISPLAY_PARAMETERS)(
  ULONG Columns,
  ULONG Rows);
typedef PBUS_HANDLER
( *pHalHandlerForBus)(
  INTERFACE_TYPE InterfaceType,
  ULONG BusNumber);
typedef void
( *pHalReferenceBusHandler)(
  PBUS_HANDLER BusHandler);
typedef enum _HAL_QUERY_INFORMATION_CLASS {
  HalInstalledBusInformation,
  HalProfileSourceInformation,
  HalInformationClassUnused1,
  HalPowerInformation,
  HalProcessorSpeedInformation,
  HalCallbackInformation,
  HalMapRegisterInformation,
  HalMcaLogInformation,
  HalFrameBufferCachingInformation,
  HalDisplayBiosInformation,
  HalProcessorFeatureInformation,
  HalNumaTopologyInterface,
  HalErrorInformation,
  HalCmcLogInformation,
  HalCpeLogInformation,
  HalQueryMcaInterface,
  HalQueryAMLIIllegalIOPortAddresses,
  HalQueryMaxHotPlugMemoryAddress,
  HalPartitionIpiInterface,
  HalPlatformInformation,
  HalQueryProfileSourceList,
  HalInitLogInformation,
  HalFrequencyInformation,
  HalProcessorBrandString,
  HalHypervisorInformation,
  HalPlatformTimerInformation,
  HalAcpiAuditInformation
} HAL_QUERY_INFORMATION_CLASS, *PHAL_QUERY_INFORMATION_CLASS;
typedef enum _HAL_SET_INFORMATION_CLASS {
  HalProfileSourceInterval,
  HalProfileSourceInterruptHandler,
  HalMcaRegisterDriver,
  HalKernelErrorHandler,
  HalCmcRegisterDriver,
  HalCpeRegisterDriver,
  HalMcaLog,
  HalCmcLog,
  HalCpeLog,
  HalGenerateCmcInterrupt,
  HalProfileSourceTimerHandler,
  HalEnlightenment,
  HalProfileDpgoSourceInterruptHandler
} HAL_SET_INFORMATION_CLASS, *PHAL_SET_INFORMATION_CLASS;
typedef NTSTATUS
( *pHalQuerySystemInformation)(
  HAL_QUERY_INFORMATION_CLASS InformationClass,
  ULONG BufferSize,
  PVOID Buffer,
  PULONG ReturnedLength);
typedef NTSTATUS
( *pHalSetSystemInformation)(
  HAL_SET_INFORMATION_CLASS InformationClass,
  ULONG BufferSize,
  PVOID Buffer);
typedef void
( *pHalExamineMBR)(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  ULONG MBRTypeIdentifier,
  PVOID *Buffer);
typedef NTSTATUS
( *pHalIoReadPartitionTable)(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  BOOLEAN ReturnRecognizedPartitions,
  struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer);
typedef NTSTATUS
( *pHalIoSetPartitionInformation)(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  ULONG PartitionNumber,
  ULONG PartitionType);
typedef NTSTATUS
( *pHalIoWritePartitionTable)(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  ULONG SectorsPerTrack,
  ULONG NumberOfHeads,
  struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer);
typedef NTSTATUS
( *pHalQueryBusSlots)(
  PBUS_HANDLER BusHandler,
  ULONG BufferSize,
  PULONG SlotNumbers,
  PULONG ReturnedLength);
typedef NTSTATUS
( *pHalInitPnpDriver)(
  void);
typedef struct _PM_DISPATCH_TABLE {
  ULONG Signature;
  ULONG Version;
  PVOID Function[1];
} PM_DISPATCH_TABLE, *PPM_DISPATCH_TABLE;
typedef NTSTATUS
( *pHalInitPowerManagement)(
  PPM_DISPATCH_TABLE PmDriverDispatchTable,
  PPM_DISPATCH_TABLE *PmHalDispatchTable);
typedef struct _DMA_ADAPTER*
( *pHalGetDmaAdapter)(
  PVOID Context,
  struct _DEVICE_DESCRIPTION *DeviceDescriptor,
  PULONG NumberOfMapRegisters);
typedef NTSTATUS
( *pHalGetInterruptTranslator)(
  INTERFACE_TYPE ParentInterfaceType,
  ULONG ParentBusNumber,
  INTERFACE_TYPE BridgeInterfaceType,
  USHORT Size,
  USHORT Version,
  PTRANSLATOR_INTERFACE Translator,
  PULONG BridgeBusNumber);
typedef NTSTATUS
( *pHalStartMirroring)(
  void);
typedef NTSTATUS
( *pHalEndMirroring)(
  ULONG PassNumber);
typedef NTSTATUS
( *pHalMirrorPhysicalMemory)(
  PHYSICAL_ADDRESS PhysicalAddress,
  LARGE_INTEGER NumberOfBytes);
typedef NTSTATUS
( *pHalMirrorVerify)(
  PHYSICAL_ADDRESS PhysicalAddress,
  LARGE_INTEGER NumberOfBytes);
typedef BOOLEAN
( *pHalTranslateBusAddress)(
  INTERFACE_TYPE InterfaceType,
  ULONG BusNumber,
  PHYSICAL_ADDRESS BusAddress,
  PULONG AddressSpace,
  PPHYSICAL_ADDRESS TranslatedAddress);
typedef NTSTATUS
( *pHalAssignSlotResources)(
  PUNICODE_STRING RegistryPath,
  PUNICODE_STRING DriverClassName ,
  PDRIVER_OBJECT DriverObject,
  PDEVICE_OBJECT DeviceObject,
  INTERFACE_TYPE BusType,
  ULONG BusNumber,
  ULONG SlotNumber,
  PCM_RESOURCE_LIST *AllocatedResources);
typedef void
( *pHalHaltSystem)(
  void);
typedef BOOLEAN
( *pHalResetDisplay)(
  void);
typedef struct _MAP_REGISTER_ENTRY {
  PVOID MapRegister;
  BOOLEAN WriteToDevice;
} MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY;
typedef UCHAR
( *pHalVectorToIDTEntry)(
  ULONG Vector);
typedef BOOLEAN
( *pHalFindBusAddressTranslation)(
  PHYSICAL_ADDRESS BusAddress,
  PULONG AddressSpace,
  PPHYSICAL_ADDRESS TranslatedAddress,
  PULONG_PTR Context,
  BOOLEAN NextBus);
typedef void
( *pHalEndOfBoot)(
  void);
typedef PVOID
( *pHalGetAcpiTable)(
  ULONG Signature,
  PCSTR OemId ,
  PCSTR OemTableId );
typedef void
( *PCI_ERROR_HANDLER_CALLBACK)(
  void);
typedef void
( *pHalSetPciErrorHandlerCallback)(
  PCI_ERROR_HANDLER_CALLBACK Callback);
typedef void
( *pHalIoAssignDriveLetters)(
  struct _LOADER_PARAMETER_BLOCK *LoaderBlock,
  PSTRING NtDeviceName,
  PUCHAR NtSystemPath,
  PSTRING NtSystemPathString);
typedef struct {
  ULONG Version;
  pHalQuerySystemInformation HalQuerySystemInformation;
  pHalSetSystemInformation HalSetSystemInformation;
  pHalQueryBusSlots HalQueryBusSlots;
  ULONG Spare1;
  pHalExamineMBR HalExamineMBR;
  pHalIoAssignDriveLetters HalIoAssignDriveLetters;
  pHalIoReadPartitionTable HalIoReadPartitionTable;
  pHalIoSetPartitionInformation HalIoSetPartitionInformation;
  pHalIoWritePartitionTable HalIoWritePartitionTable;
  pHalHandlerForBus HalReferenceHandlerForBus;
  pHalReferenceBusHandler HalReferenceBusHandler;
  pHalReferenceBusHandler HalDereferenceBusHandler;
  pHalInitPnpDriver HalInitPnpDriver;
  pHalInitPowerManagement HalInitPowerManagement;
  pHalGetDmaAdapter HalGetDmaAdapter;
  pHalGetInterruptTranslator HalGetInterruptTranslator;
  pHalStartMirroring HalStartMirroring;
  pHalEndMirroring HalEndMirroring;
  pHalMirrorPhysicalMemory HalMirrorPhysicalMemory;
  pHalEndOfBoot HalEndOfBoot;
  pHalMirrorVerify HalMirrorVerify;
  pHalGetAcpiTable HalGetCachedAcpiTable;
  pHalSetPciErrorHandlerCallback HalSetPciErrorHandlerCallback;
} HAL_DISPATCH, *PHAL_DISPATCH;
extern __attribute__((dllimport)) HAL_DISPATCH HalDispatchTable;
typedef struct _HAL_BUS_INFORMATION {
  INTERFACE_TYPE BusType;
  BUS_DATA_TYPE ConfigurationType;
  ULONG BusNumber;
  ULONG Reserved;
} HAL_BUS_INFORMATION, *PHAL_BUS_INFORMATION;
typedef struct _HAL_PROFILE_SOURCE_INFORMATION {
  KPROFILE_SOURCE Source;
  BOOLEAN Supported;
  ULONG Interval;
} HAL_PROFILE_SOURCE_INFORMATION, *PHAL_PROFILE_SOURCE_INFORMATION;
typedef struct _HAL_PROFILE_SOURCE_INFORMATION_EX {
  KPROFILE_SOURCE Source;
  BOOLEAN Supported;
  ULONG_PTR Interval;
  ULONG_PTR DefInterval;
  ULONG_PTR MaxInterval;
  ULONG_PTR MinInterval;
} HAL_PROFILE_SOURCE_INFORMATION_EX, *PHAL_PROFILE_SOURCE_INFORMATION_EX;
typedef struct _HAL_PROFILE_SOURCE_INTERVAL {
  KPROFILE_SOURCE Source;
  ULONG_PTR Interval;
} HAL_PROFILE_SOURCE_INTERVAL, *PHAL_PROFILE_SOURCE_INTERVAL;
typedef struct _HAL_PROFILE_SOURCE_LIST {
  KPROFILE_SOURCE Source;
  PWSTR Description;
} HAL_PROFILE_SOURCE_LIST, *PHAL_PROFILE_SOURCE_LIST;
typedef enum _HAL_DISPLAY_BIOS_INFORMATION {
  HalDisplayInt10Bios,
  HalDisplayEmulatedBios,
  HalDisplayNoBios
} HAL_DISPLAY_BIOS_INFORMATION, *PHAL_DISPLAY_BIOS_INFORMATION;
typedef struct _HAL_POWER_INFORMATION {
  ULONG TBD;
} HAL_POWER_INFORMATION, *PHAL_POWER_INFORMATION;
typedef struct _HAL_PROCESSOR_SPEED_INFO {
  ULONG ProcessorSpeed;
} HAL_PROCESSOR_SPEED_INFORMATION, *PHAL_PROCESSOR_SPEED_INFORMATION;
typedef struct _HAL_CALLBACKS {
  PCALLBACK_OBJECT SetSystemInformation;
  PCALLBACK_OBJECT BusCheck;
} HAL_CALLBACKS, *PHAL_CALLBACKS;
typedef struct _HAL_PROCESSOR_FEATURE {
  ULONG UsableFeatureBits;
} HAL_PROCESSOR_FEATURE;
typedef NTSTATUS
( *PHALIOREADWRITEHANDLER)(
  BOOLEAN fRead,
  ULONG dwAddr,
  ULONG dwSize,
  PULONG pdwData);
typedef struct _HAL_AMLI_BAD_IO_ADDRESS_LIST {
  ULONG BadAddrBegin;
  ULONG BadAddrSize;
  ULONG OSVersionTrigger;
  PHALIOREADWRITEHANDLER IOHandler;
} HAL_AMLI_BAD_IO_ADDRESS_LIST, *PHAL_AMLI_BAD_IO_ADDRESS_LIST;
typedef void
( *PHALMCAINTERFACELOCK)(
  void);
typedef void
( *PHALMCAINTERFACEUNLOCK)(
  void);
typedef NTSTATUS
( *PHALMCAINTERFACEREADREGISTER)(
  UCHAR BankNumber,
  PVOID Exception);
typedef struct _HAL_MCA_INTERFACE {
  PHALMCAINTERFACELOCK Lock;
  PHALMCAINTERFACEUNLOCK Unlock;
  PHALMCAINTERFACEREADREGISTER ReadRegister;
} HAL_MCA_INTERFACE;
typedef enum {
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat,
  ApicDestinationModeLogicalClustered,
  ApicDestinationModeUnknown
} HAL_APIC_DESTINATION_MODE, *PHAL_APIC_DESTINATION_MODE;
struct _KTRAP_FRAME;
struct _KEXCEPTION_FRAME;
typedef ERROR_SEVERITY
( *PDRIVER_EXCPTN_CALLBACK)(
  PVOID Context,
  struct _KTRAP_FRAME *TrapFrame,
  struct _KEXCEPTION_FRAME *ExceptionFrame,
  PMCA_EXCEPTION Exception);
typedef PDRIVER_EXCPTN_CALLBACK PDRIVER_MCA_EXCEPTION_CALLBACK;
typedef struct _MCA_DRIVER_INFO {
  PDRIVER_MCA_EXCEPTION_CALLBACK ExceptionCallback;
  PKDEFERRED_ROUTINE DpcCallback;
  PVOID DeviceContext;
} MCA_DRIVER_INFO, *PMCA_DRIVER_INFO;
typedef struct _HAL_ERROR_INFO {
  ULONG Version;
  ULONG InitMaxSize;
  ULONG McaMaxSize;
  ULONG McaPreviousEventsCount;
  ULONG McaCorrectedEventsCount;
  ULONG McaKernelDeliveryFails;
  ULONG McaDriverDpcQueueFails;
  ULONG McaReserved;
  ULONG CmcMaxSize;
  ULONG CmcPollingInterval;
  ULONG CmcInterruptsCount;
  ULONG CmcKernelDeliveryFails;
  ULONG CmcDriverDpcQueueFails;
  ULONG CmcGetStateFails;
  ULONG CmcClearStateFails;
  ULONG CmcReserved;
  ULONGLONG CmcLogId;
  ULONG CpeMaxSize;
  ULONG CpePollingInterval;
  ULONG CpeInterruptsCount;
  ULONG CpeKernelDeliveryFails;
  ULONG CpeDriverDpcQueueFails;
  ULONG CpeGetStateFails;
  ULONG CpeClearStateFails;
  ULONG CpeInterruptSources;
  ULONGLONG CpeLogId;
  ULONGLONG KernelReserved[4];
} HAL_ERROR_INFO, *PHAL_ERROR_INFO;
typedef void
( *PDRIVER_CMC_EXCEPTION_CALLBACK)(
  PVOID Context,
  PCMC_EXCEPTION CmcLog);
typedef void
( *PDRIVER_CPE_EXCEPTION_CALLBACK)(
  PVOID Context,
  PCPE_EXCEPTION CmcLog);
typedef struct _CMC_DRIVER_INFO {
  PDRIVER_CMC_EXCEPTION_CALLBACK ExceptionCallback;
  PKDEFERRED_ROUTINE DpcCallback;
  PVOID DeviceContext;
} CMC_DRIVER_INFO, *PCMC_DRIVER_INFO;
typedef struct _CPE_DRIVER_INFO {
  PDRIVER_CPE_EXCEPTION_CALLBACK ExceptionCallback;
  PKDEFERRED_ROUTINE DpcCallback;
  PVOID DeviceContext;
} CPE_DRIVER_INFO, *PCPE_DRIVER_INFO;
typedef struct _HAL_PLATFORM_INFORMATION {
  ULONG PlatformFlags;
} HAL_PLATFORM_INFORMATION, *PHAL_PLATFORM_INFORMATION;
typedef void
( *PEXPAND_STACK_CALLOUT)(
  PVOID Parameter );
typedef void
( *PTIMER_APC_ROUTINE)(
  PVOID TimerContext,
  ULONG TimerLowValue,
  LONG TimerHighValue);
typedef enum _TIMER_SET_INFORMATION_CLASS {
  TimerSetCoalescableTimer,
  MaxTimerInfoClass
} TIMER_SET_INFORMATION_CLASS;
typedef struct _XSTATE_FEATURE {
  ULONG Offset;
  ULONG Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;
typedef struct _XSTATE_CONFIGURATION {
  ULONG64 EnabledFeatures;
  ULONG Size;
  ULONG OptimizedSave:1;
  XSTATE_FEATURE Features[64];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;
typedef struct _KUSER_SHARED_DATA {
  ULONG TickCountLowDeprecated;
  ULONG TickCountMultiplier;
  volatile KSYSTEM_TIME InterruptTime;
  volatile KSYSTEM_TIME SystemTime;
  volatile KSYSTEM_TIME TimeZoneBias;
  USHORT ImageNumberLow;
  USHORT ImageNumberHigh;
  WCHAR NtSystemRoot[260];
  ULONG MaxStackTraceDepth;
  ULONG CryptoExponent;
  ULONG TimeZoneId;
  ULONG LargePageMinimum;
  ULONG Reserved2[7];
  NT_PRODUCT_TYPE NtProductType;
  BOOLEAN ProductTypeIsValid;
  ULONG NtMajorVersion;
  ULONG NtMinorVersion;
  BOOLEAN ProcessorFeatures[64];
  ULONG Reserved1;
  ULONG Reserved3;
  volatile ULONG TimeSlip;
  ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  ULONG AltArchitecturePad[1];
  LARGE_INTEGER SystemExpirationDate;
  ULONG SuiteMask;
  BOOLEAN KdDebuggerEnabled;
  UCHAR NXSupportPolicy;
  volatile ULONG ActiveConsoleId;
  volatile ULONG DismountCount;
  ULONG ComPlusPackage;
  ULONG LastSystemRITEventTickCount;
  ULONG NumberOfPhysicalPages;
  BOOLEAN SafeBootMode;
  ULONG TraceLogging;
  ULONG DataFlagsPad[1];
  ULONGLONG TestRetInstruction;
  ULONG SystemCall;
  ULONG SystemCallReturn;
  ULONGLONG SystemCallPad[3];
  __extension__ union {
    volatile KSYSTEM_TIME TickCount;
    volatile ULONG64 TickCountQuad;
    __extension__ struct {
      ULONG ReservedTickCountOverlay[3];
      ULONG TickCountPad[1];
    } ;
  } ;
  ULONG Cookie;
  ULONG CookiePad[1];
  LONGLONG ConsoleSessionForegroundProcessId;
  ULONG Wow64SharedInformation[16];
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA;
extern __attribute__((dllimport)) CCHAR KeNumberProcessors;
typedef struct _DEBUG_DEVICE_ADDRESS {
  UCHAR Type;
  BOOLEAN Valid;
  UCHAR Reserved[2];
  PUCHAR TranslatedAddress;
  ULONG Length;
} DEBUG_DEVICE_ADDRESS, *PDEBUG_DEVICE_ADDRESS;
typedef struct _DEBUG_MEMORY_REQUIREMENTS {
  PHYSICAL_ADDRESS Start;
  PHYSICAL_ADDRESS MaxEnd;
  PVOID VirtualAddress;
  ULONG Length;
  BOOLEAN Cached;
  BOOLEAN Aligned;
} DEBUG_MEMORY_REQUIREMENTS, *PDEBUG_MEMORY_REQUIREMENTS;
typedef struct _DEBUG_DEVICE_DESCRIPTOR {
  ULONG Bus;
  ULONG Slot;
  USHORT Segment;
  USHORT VendorID;
  USHORT DeviceID;
  UCHAR BaseClass;
  UCHAR SubClass;
  UCHAR ProgIf;
  BOOLEAN Initialized;
  BOOLEAN Configured;
  DEBUG_DEVICE_ADDRESS BaseAddress[6];
  DEBUG_MEMORY_REQUIREMENTS Memory;
} DEBUG_DEVICE_DESCRIPTOR, *PDEBUG_DEVICE_DESCRIPTOR;
typedef NTSTATUS
( *pKdSetupPciDeviceForDebugging)(
  PVOID LoaderBlock ,
  PDEBUG_DEVICE_DESCRIPTOR PciDevice);
typedef NTSTATUS
( *pKdReleasePciDeviceForDebugging)(
  PDEBUG_DEVICE_DESCRIPTOR PciDevice);
typedef PVOID
( *pKdGetAcpiTablePhase0)(
  struct _LOADER_PARAMETER_BLOCK *LoaderBlock,
  ULONG Signature);
typedef void
( *pKdCheckPowerButton)(
  void);
typedef PVOID
( *pKdMapPhysicalMemory64)(
  PHYSICAL_ADDRESS PhysicalAddress,
  ULONG NumberPages);
typedef void
( *pKdUnmapVirtualAddress)(
  PVOID VirtualAddress,
  ULONG NumberPages);
typedef ULONG
( *pKdGetPciDataByOffset)(
  ULONG BusNumber,
  ULONG SlotNumber,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef ULONG
( *pKdSetPciDataByOffset)(
  ULONG BusNumber,
  ULONG SlotNumber,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
typedef struct _PHYSICAL_MEMORY_RANGE {
  PHYSICAL_ADDRESS BaseAddress;
  LARGE_INTEGER NumberOfBytes;
} PHYSICAL_MEMORY_RANGE, *PPHYSICAL_MEMORY_RANGE;
typedef NTSTATUS
( *PMM_ROTATE_COPY_CALLBACK_FUNCTION)(
  PMDL DestinationMdl,
  PMDL SourceMdl,
  PVOID Context);
typedef enum _MM_ROTATE_DIRECTION {
  MmToFrameBuffer,
  MmToFrameBufferNoCopy,
  MmToRegularMemory,
  MmToRegularMemoryNoCopy,
  MmMaximumRotateDirection
} MM_ROTATE_DIRECTION, *PMM_ROTATE_DIRECTION;
typedef struct _QUOTA_LIMITS {
  SIZE_T PagedPoolLimit;
  SIZE_T NonPagedPoolLimit;
  SIZE_T MinimumWorkingSetSize;
  SIZE_T MaximumWorkingSetSize;
  SIZE_T PagefileLimit;
  LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;
typedef union _RATE_QUOTA_LIMIT {
  ULONG RateData;
  __extension__ struct {
    ULONG RatePercent:7;
    ULONG Reserved0:25;
  } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;
typedef struct _QUOTA_LIMITS_EX {
  SIZE_T PagedPoolLimit;
  SIZE_T NonPagedPoolLimit;
  SIZE_T MinimumWorkingSetSize;
  SIZE_T MaximumWorkingSetSize;
  SIZE_T PagefileLimit;
  LARGE_INTEGER TimeLimit;
  SIZE_T WorkingSetLimit;
  SIZE_T Reserved2;
  SIZE_T Reserved3;
  SIZE_T Reserved4;
  ULONG Flags;
  RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;
typedef struct _IO_COUNTERS {
  ULONGLONG ReadOperationCount;
  ULONGLONG WriteOperationCount;
  ULONGLONG OtherOperationCount;
  ULONGLONG ReadTransferCount;
  ULONGLONG WriteTransferCount;
  ULONGLONG OtherTransferCount;
} IO_COUNTERS, *PIO_COUNTERS;
typedef struct _VM_COUNTERS {
  SIZE_T PeakVirtualSize;
  SIZE_T VirtualSize;
  ULONG PageFaultCount;
  SIZE_T PeakWorkingSetSize;
  SIZE_T WorkingSetSize;
  SIZE_T QuotaPeakPagedPoolUsage;
  SIZE_T QuotaPagedPoolUsage;
  SIZE_T QuotaPeakNonPagedPoolUsage;
  SIZE_T QuotaNonPagedPoolUsage;
  SIZE_T PagefileUsage;
  SIZE_T PeakPagefileUsage;
} VM_COUNTERS, *PVM_COUNTERS;
typedef struct _VM_COUNTERS_EX {
  SIZE_T PeakVirtualSize;
  SIZE_T VirtualSize;
  ULONG PageFaultCount;
  SIZE_T PeakWorkingSetSize;
  SIZE_T WorkingSetSize;
  SIZE_T QuotaPeakPagedPoolUsage;
  SIZE_T QuotaPagedPoolUsage;
  SIZE_T QuotaPeakNonPagedPoolUsage;
  SIZE_T QuotaNonPagedPoolUsage;
  SIZE_T PagefileUsage;
  SIZE_T PeakPagefileUsage;
  SIZE_T PrivateUsage;
} VM_COUNTERS_EX, *PVM_COUNTERS_EX;
typedef enum _HARDWARE_COUNTER_TYPE {
  PMCCounter,
  MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef struct _HARDWARE_COUNTER {
  HARDWARE_COUNTER_TYPE Type;
  ULONG Reserved;
  ULONG64 Index;
} HARDWARE_COUNTER, *PHARDWARE_COUNTER;
typedef struct _POOLED_USAGE_AND_LIMITS {
  SIZE_T PeakPagedPoolUsage;
  SIZE_T PagedPoolUsage;
  SIZE_T PagedPoolLimit;
  SIZE_T PeakNonPagedPoolUsage;
  SIZE_T NonPagedPoolUsage;
  SIZE_T NonPagedPoolLimit;
  SIZE_T PeakPagefileUsage;
  SIZE_T PagefileUsage;
  SIZE_T PagefileLimit;
} POOLED_USAGE_AND_LIMITS, *PPOOLED_USAGE_AND_LIMITS;
typedef struct _PROCESS_ACCESS_TOKEN {
  HANDLE Token;
  HANDLE Thread;
} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;
typedef struct _PROCESS_EXCEPTION_PORT {
  HANDLE ExceptionPortHandle;
  ULONG StateFlags;
} PROCESS_EXCEPTION_PORT, *PPROCESS_EXCEPTION_PORT;
typedef void
( *PCREATE_PROCESS_NOTIFY_ROUTINE)(
  HANDLE ParentId,
  HANDLE ProcessId,
  BOOLEAN Create);
typedef struct _PS_CREATE_NOTIFY_INFO {
  SIZE_T Size;
  __extension__ union {
    ULONG Flags;
    __extension__ struct {
      ULONG FileOpenNameAvailable:1;
      ULONG Reserved:31;
    } ;
  } ;
  HANDLE ParentProcessId;
  CLIENT_ID CreatingThreadId;
  struct _FILE_OBJECT *FileObject;
  PCUNICODE_STRING ImageFileName;
  PCUNICODE_STRING CommandLine ;
  NTSTATUS CreationStatus;
} PS_CREATE_NOTIFY_INFO, *PPS_CREATE_NOTIFY_INFO;
typedef void
( *PCREATE_PROCESS_NOTIFY_ROUTINE_EX)(
  PEPROCESS Process,
  HANDLE ProcessId,
  PPS_CREATE_NOTIFY_INFO CreateInfo );
typedef void
( *PCREATE_THREAD_NOTIFY_ROUTINE)(
  HANDLE ProcessId,
  HANDLE ThreadId,
  BOOLEAN Create);
typedef struct _IMAGE_INFO {
  __extension__ union {
    ULONG Properties;
    __extension__ struct {
      ULONG ImageAddressingMode:8;
      ULONG SystemModeImage:1;
      ULONG ImageMappedToAllPids:1;
      ULONG ExtendedInfoPresent:1;
      ULONG Reserved:21;
    } ;
  } ;
  PVOID ImageBase;
  ULONG ImageSelector;
  SIZE_T ImageSize;
  ULONG ImageSectionNumber;
} IMAGE_INFO, *PIMAGE_INFO;
typedef struct _IMAGE_INFO_EX {
  SIZE_T Size;
  IMAGE_INFO ImageInfo;
  struct _FILE_OBJECT *FileObject;
} IMAGE_INFO_EX, *PIMAGE_INFO_EX;
typedef void
( *PLOAD_IMAGE_NOTIFY_ROUTINE)(
  PUNICODE_STRING FullImageName,
  HANDLE ProcessId,
  PIMAGE_INFO ImageInfo);
typedef struct _NT_TIB {
  struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  PVOID StackBase;
  PVOID StackLimit;
  PVOID SubSystemTib;
  __extension__ union {
    PVOID FiberData;
    ULONG Version;
  } ;
  PVOID ArbitraryUserPointer;
  struct _NT_TIB *Self;
} NT_TIB, *PNT_TIB;
typedef struct _NT_TIB32 {
  ULONG ExceptionList;
  ULONG StackBase;
  ULONG StackLimit;
  ULONG SubSystemTib;
  __extension__ union {
    ULONG FiberData;
    ULONG Version;
  } ;
  ULONG ArbitraryUserPointer;
  ULONG Self;
} NT_TIB32,*PNT_TIB32;
typedef struct _NT_TIB64 {
  ULONG64 ExceptionList;
  ULONG64 StackBase;
  ULONG64 StackLimit;
  ULONG64 SubSystemTib;
  __extension__ union {
    ULONG64 FiberData;
    ULONG Version;
  } ;
  ULONG64 ArbitraryUserPointer;
  ULONG64 Self;
} NT_TIB64,*PNT_TIB64;
typedef enum _PROCESSINFOCLASS {
  ProcessBasicInformation,
  ProcessQuotaLimits,
  ProcessIoCounters,
  ProcessVmCounters,
  ProcessTimes,
  ProcessBasePriority,
  ProcessRaisePriority,
  ProcessDebugPort,
  ProcessExceptionPort,
  ProcessAccessToken,
  ProcessLdtInformation,
  ProcessLdtSize,
  ProcessDefaultHardErrorMode,
  ProcessIoPortHandlers,
  ProcessPooledUsageAndLimits,
  ProcessWorkingSetWatch,
  ProcessUserModeIOPL,
  ProcessEnableAlignmentFaultFixup,
  ProcessPriorityClass,
  ProcessWx86Information,
  ProcessHandleCount,
  ProcessAffinityMask,
  ProcessPriorityBoost,
  ProcessDeviceMap,
  ProcessSessionInformation,
  ProcessForegroundInformation,
  ProcessWow64Information,
  ProcessImageFileName,
  ProcessLUIDDeviceMapsEnabled,
  ProcessBreakOnTermination,
  ProcessDebugObjectHandle,
  ProcessDebugFlags,
  ProcessHandleTracing,
  ProcessIoPriority,
  ProcessExecuteFlags,
  ProcessTlsInformation,
  ProcessCookie,
  ProcessImageInformation,
  ProcessCycleTime,
  ProcessPagePriority,
  ProcessInstrumentationCallback,
  ProcessThreadStackAllocation,
  ProcessWorkingSetWatchEx,
  ProcessImageFileNameWin32,
  ProcessImageFileMapping,
  ProcessAffinityUpdateMode,
  ProcessMemoryAllocationMode,
  ProcessGroupInformation,
  ProcessTokenVirtualizationEnabled,
  ProcessConsoleHostProcess,
  ProcessWindowInformation,
  MaxProcessInfoClass
} PROCESSINFOCLASS;
typedef enum _THREADINFOCLASS {
  ThreadBasicInformation,
  ThreadTimes,
  ThreadPriority,
  ThreadBasePriority,
  ThreadAffinityMask,
  ThreadImpersonationToken,
  ThreadDescriptorTableEntry,
  ThreadEnableAlignmentFaultFixup,
  ThreadEventPair_Reusable,
  ThreadQuerySetWin32StartAddress,
  ThreadZeroTlsCell,
  ThreadPerformanceCount,
  ThreadAmILastThread,
  ThreadIdealProcessor,
  ThreadPriorityBoost,
  ThreadSetTlsArrayAddress,
  ThreadIsIoPending,
  ThreadHideFromDebugger,
  ThreadBreakOnTermination,
  ThreadSwitchLegacyState,
  ThreadIsTerminated,
  ThreadLastSystemCall,
  ThreadIoPriority,
  ThreadCycleTime,
  ThreadPagePriority,
  ThreadActualBasePriority,
  ThreadTebInformation,
  ThreadCSwitchMon,
  ThreadCSwitchPmu,
  ThreadWow64Context,
  ThreadGroupInformation,
  ThreadUmsInformation,
  ThreadCounterProfiling,
  ThreadIdealProcessorEx,
  MaxThreadInfoClass
} THREADINFOCLASS;
typedef struct _PAGE_PRIORITY_INFORMATION {
  ULONG PagePriority;
} PAGE_PRIORITY_INFORMATION, *PPAGE_PRIORITY_INFORMATION;
typedef struct _PROCESS_WS_WATCH_INFORMATION {
  PVOID FaultingPc;
  PVOID FaultingVa;
} PROCESS_WS_WATCH_INFORMATION, *PPROCESS_WS_WATCH_INFORMATION;
typedef struct _PROCESS_BASIC_INFORMATION {
  NTSTATUS ExitStatus;
  struct _PEB *PebBaseAddress;
  ULONG_PTR AffinityMask;
  KPRIORITY BasePriority;
  ULONG_PTR UniqueProcessId;
  ULONG_PTR InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION,*PPROCESS_BASIC_INFORMATION;
typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION {
  SIZE_T Size;
  PROCESS_BASIC_INFORMATION BasicInfo;
  __extension__ union {
    ULONG Flags;
    __extension__ struct {
      ULONG IsProtectedProcess:1;
      ULONG IsWow64Process:1;
      ULONG IsProcessDeleting:1;
      ULONG IsCrossSessionCreate:1;
      ULONG SpareBits:28;
    } ;
  } ;
} PROCESS_EXTENDED_BASIC_INFORMATION, *PPROCESS_EXTENDED_BASIC_INFORMATION;
typedef struct _PROCESS_DEVICEMAP_INFORMATION {
  __extension__ union {
    struct {
      HANDLE DirectoryHandle;
    } Set;
    struct {
      ULONG DriveMap;
      UCHAR DriveType[32];
    } Query;
  } ;
} PROCESS_DEVICEMAP_INFORMATION, *PPROCESS_DEVICEMAP_INFORMATION;
typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX {
  __extension__ union {
    struct {
      HANDLE DirectoryHandle;
    } Set;
    struct {
      ULONG DriveMap;
      UCHAR DriveType[32];
    } Query;
  } ;
  ULONG Flags;
} PROCESS_DEVICEMAP_INFORMATION_EX, *PPROCESS_DEVICEMAP_INFORMATION_EX;
typedef struct _PROCESS_SESSION_INFORMATION {
  ULONG SessionId;
} PROCESS_SESSION_INFORMATION, *PPROCESS_SESSION_INFORMATION;
typedef struct _PROCESS_HANDLE_TRACING_ENABLE {
  ULONG Flags;
} PROCESS_HANDLE_TRACING_ENABLE, *PPROCESS_HANDLE_TRACING_ENABLE;
typedef struct _PROCESS_HANDLE_TRACING_ENABLE_EX {
  ULONG Flags;
  ULONG TotalSlots;
} PROCESS_HANDLE_TRACING_ENABLE_EX, *PPROCESS_HANDLE_TRACING_ENABLE_EX;
typedef struct _PROCESS_HANDLE_TRACING_ENTRY {
  HANDLE Handle;
  CLIENT_ID ClientId;
  ULONG Type;
  PVOID Stacks[16];
} PROCESS_HANDLE_TRACING_ENTRY, *PPROCESS_HANDLE_TRACING_ENTRY;
typedef struct _PROCESS_HANDLE_TRACING_QUERY {
  HANDLE Handle;
  ULONG TotalTraces;
  PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
} PROCESS_HANDLE_TRACING_QUERY, *PPROCESS_HANDLE_TRACING_QUERY;
extern __attribute__((dllimport)) PEPROCESS PsInitialSystemProcess;
typedef union _RTL_RUN_ONCE {
  PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;
typedef ULONG
( *PRTL_RUN_ONCE_INIT_FN) (
  PRTL_RUN_ONCE RunOnce,
  PVOID Parameter ,
  PVOID *Context );
typedef enum _TABLE_SEARCH_RESULT {
  TableEmptyTree,
  TableFoundNode,
  TableInsertAsLeft,
  TableInsertAsRight
} TABLE_SEARCH_RESULT;
typedef enum _RTL_GENERIC_COMPARE_RESULTS {
  GenericLessThan,
  GenericGreaterThan,
  GenericEqual
} RTL_GENERIC_COMPARE_RESULTS;
// Forwarder
struct _RTL_AVL_TABLE;
typedef RTL_GENERIC_COMPARE_RESULTS
( *PRTL_AVL_COMPARE_ROUTINE) (
  struct _RTL_AVL_TABLE *Table,
  PVOID FirstStruct,
  PVOID SecondStruct);
typedef PVOID
( *PRTL_AVL_ALLOCATE_ROUTINE) (
  struct _RTL_AVL_TABLE *Table,
  CLONG ByteSize);
typedef void
( *PRTL_AVL_FREE_ROUTINE) (
  struct _RTL_AVL_TABLE *Table,
  PVOID Buffer);
typedef NTSTATUS
( *PRTL_AVL_MATCH_FUNCTION) (
  struct _RTL_AVL_TABLE *Table,
  PVOID UserData,
  PVOID MatchData);
typedef struct _RTL_BALANCED_LINKS {
  struct _RTL_BALANCED_LINKS *Parent;
  struct _RTL_BALANCED_LINKS *LeftChild;
  struct _RTL_BALANCED_LINKS *RightChild;
  CHAR Balance;
  UCHAR Reserved[3];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS;
typedef struct _RTL_AVL_TABLE {
  RTL_BALANCED_LINKS BalancedRoot;
  PVOID OrderedPointer;
  ULONG WhichOrderedElement;
  ULONG NumberGenericTableElements;
  ULONG DepthOfTree;
  PRTL_BALANCED_LINKS RestartKey;
  ULONG DeleteCount;
  PRTL_AVL_COMPARE_ROUTINE CompareRoutine;
  PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine;
  PRTL_AVL_FREE_ROUTINE FreeRoutine;
  PVOID TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE;
struct _RTL_GENERIC_TABLE;
typedef RTL_GENERIC_COMPARE_RESULTS
( *PRTL_GENERIC_COMPARE_ROUTINE) (
  struct _RTL_GENERIC_TABLE *Table,
  PVOID FirstStruct,
  PVOID SecondStruct);
typedef PVOID
( *PRTL_GENERIC_ALLOCATE_ROUTINE) (
  struct _RTL_GENERIC_TABLE *Table,
  CLONG ByteSize);
typedef void
( *PRTL_GENERIC_FREE_ROUTINE) (
  struct _RTL_GENERIC_TABLE *Table,
  PVOID Buffer);
typedef struct _RTL_SPLAY_LINKS {
  struct _RTL_SPLAY_LINKS *Parent;
  struct _RTL_SPLAY_LINKS *LeftChild;
  struct _RTL_SPLAY_LINKS *RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS;
typedef struct _RTL_GENERIC_TABLE {
  PRTL_SPLAY_LINKS TableRoot;
  LIST_ENTRY InsertOrderList;
  PLIST_ENTRY OrderedPointer;
  ULONG WhichOrderedElement;
  ULONG NumberGenericTableElements;
  PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine;
  PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine;
  PRTL_GENERIC_FREE_ROUTINE FreeRoutine;
  PVOID TableContext;
} RTL_GENERIC_TABLE, *PRTL_GENERIC_TABLE;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
  LIST_ENTRY Linkage;
  ULONG_PTR Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
  PLIST_ENTRY ChainHead;
  PLIST_ENTRY PrevLinkage;
  ULONG_PTR Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
  RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  PLIST_ENTRY ChainHead;
  ULONG BucketIndex;
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef struct _RTL_DYNAMIC_HASH_TABLE {
  ULONG Flags;
  ULONG Shift;
  ULONG TableSize;
  ULONG Pivot;
  ULONG DivisorMask;
  ULONG NumEntries;
  ULONG NonEmptyBuckets;
  ULONG NumEnumerators;
  PVOID Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE;
typedef struct _OSVERSIONINFOA {
  ULONG dwOSVersionInfoSize;
  ULONG dwMajorVersion;
  ULONG dwMinorVersion;
  ULONG dwBuildNumber;
  ULONG dwPlatformId;
  CHAR szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
  ULONG dwOSVersionInfoSize;
  ULONG dwMajorVersion;
  ULONG dwMinorVersion;
  ULONG dwBuildNumber;
  ULONG dwPlatformId;
  WCHAR szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;
typedef struct _OSVERSIONINFOEXA {
  ULONG dwOSVersionInfoSize;
  ULONG dwMajorVersion;
  ULONG dwMinorVersion;
  ULONG dwBuildNumber;
  ULONG dwPlatformId;
  CHAR szCSDVersion[128];
  USHORT wServicePackMajor;
  USHORT wServicePackMinor;
  USHORT wSuiteMask;
  UCHAR wProductType;
  UCHAR wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
  ULONG dwOSVersionInfoSize;
  ULONG dwMajorVersion;
  ULONG dwMinorVersion;
  ULONG dwBuildNumber;
  ULONG dwPlatformId;
  WCHAR szCSDVersion[128];
  USHORT wServicePackMajor;
  USHORT wServicePackMinor;
  USHORT wSuiteMask;
  UCHAR wProductType;
  UCHAR wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef enum _WELL_KNOWN_SID_TYPE {
  WinNullSid = 0,
  WinWorldSid = 1,
  WinLocalSid = 2,
  WinCreatorOwnerSid = 3,
  WinCreatorGroupSid = 4,
  WinCreatorOwnerServerSid = 5,
  WinCreatorGroupServerSid = 6,
  WinNtAuthoritySid = 7,
  WinDialupSid = 8,
  WinNetworkSid = 9,
  WinBatchSid = 10,
  WinInteractiveSid = 11,
  WinServiceSid = 12,
  WinAnonymousSid = 13,
  WinProxySid = 14,
  WinEnterpriseControllersSid = 15,
  WinSelfSid = 16,
  WinAuthenticatedUserSid = 17,
  WinRestrictedCodeSid = 18,
  WinTerminalServerSid = 19,
  WinRemoteLogonIdSid = 20,
  WinLogonIdsSid = 21,
  WinLocalSystemSid = 22,
  WinLocalServiceSid = 23,
  WinNetworkServiceSid = 24,
  WinBuiltinDomainSid = 25,
  WinBuiltinAdministratorsSid = 26,
  WinBuiltinUsersSid = 27,
  WinBuiltinGuestsSid = 28,
  WinBuiltinPowerUsersSid = 29,
  WinBuiltinAccountOperatorsSid = 30,
  WinBuiltinSystemOperatorsSid = 31,
  WinBuiltinPrintOperatorsSid = 32,
  WinBuiltinBackupOperatorsSid = 33,
  WinBuiltinReplicatorSid = 34,
  WinBuiltinPreWindows2000CompatibleAccessSid = 35,
  WinBuiltinRemoteDesktopUsersSid = 36,
  WinBuiltinNetworkConfigurationOperatorsSid = 37,
  WinAccountAdministratorSid = 38,
  WinAccountGuestSid = 39,
  WinAccountKrbtgtSid = 40,
  WinAccountDomainAdminsSid = 41,
  WinAccountDomainUsersSid = 42,
  WinAccountDomainGuestsSid = 43,
  WinAccountComputersSid = 44,
  WinAccountControllersSid = 45,
  WinAccountCertAdminsSid = 46,
  WinAccountSchemaAdminsSid = 47,
  WinAccountEnterpriseAdminsSid = 48,
  WinAccountPolicyAdminsSid = 49,
  WinAccountRasAndIasServersSid = 50,
  WinNTLMAuthenticationSid = 51,
  WinDigestAuthenticationSid = 52,
  WinSChannelAuthenticationSid = 53,
  WinThisOrganizationSid = 54,
  WinOtherOrganizationSid = 55,
  WinBuiltinIncomingForestTrustBuildersSid = 56,
  WinBuiltinPerfMonitoringUsersSid = 57,
  WinBuiltinPerfLoggingUsersSid = 58,
  WinBuiltinAuthorizationAccessSid = 59,
  WinBuiltinTerminalServerLicenseServersSid = 60,
  WinBuiltinDCOMUsersSid = 61,
  WinBuiltinIUsersSid = 62,
  WinIUserSid = 63,
  WinBuiltinCryptoOperatorsSid = 64,
  WinUntrustedLabelSid = 65,
  WinLowLabelSid = 66,
  WinMediumLabelSid = 67,
  WinHighLabelSid = 68,
  WinSystemLabelSid = 69,
  WinWriteRestrictedCodeSid = 70,
  WinCreatorOwnerRightsSid = 71,
  WinCacheablePrincipalsGroupSid = 72,
  WinNonCacheablePrincipalsGroupSid = 73,
  WinEnterpriseReadonlyControllersSid = 74,
  WinAccountReadonlyControllersSid = 75,
  WinBuiltinEventLogReadersGroup = 76,
  WinNewEnterpriseReadonlyControllersSid = 77,
  WinBuiltinCertSvcDComAccessGroup = 78,
  WinMediumPlusLabelSid = 79,
  WinLocalLogonSid = 80,
  WinConsoleLogonSid = 81,
  WinThisOrganizationCertificateSid = 82,
} WELL_KNOWN_SID_TYPE;
typedef struct __attribute__ ((__aligned__ (16))) _CONTEXT {
  ULONG64 P1Home;
  ULONG64 P2Home;
  ULONG64 P3Home;
  ULONG64 P4Home;
  ULONG64 P5Home;
  ULONG64 P6Home;
  ULONG ContextFlags;
  ULONG MxCsr;
  USHORT SegCs;
  USHORT SegDs;
  USHORT SegEs;
  USHORT SegFs;
  USHORT SegGs;
  USHORT SegSs;
  ULONG EFlags;
  ULONG64 Dr0;
  ULONG64 Dr1;
  ULONG64 Dr2;
  ULONG64 Dr3;
  ULONG64 Dr6;
  ULONG64 Dr7;
  ULONG64 Rax;
  ULONG64 Rcx;
  ULONG64 Rdx;
  ULONG64 Rbx;
  ULONG64 Rsp;
  ULONG64 Rbp;
  ULONG64 Rsi;
  ULONG64 Rdi;
  ULONG64 R8;
  ULONG64 R9;
  ULONG64 R10;
  ULONG64 R11;
  ULONG64 R12;
  ULONG64 R13;
  ULONG64 R14;
  ULONG64 R15;
  ULONG64 Rip;
  __extension__ union {
    XMM_SAVE_AREA32 FltSave;
    __extension__ struct {
      M128A Header[2];
      M128A Legacy[8];
      M128A Xmm0;
      M128A Xmm1;
      M128A Xmm2;
      M128A Xmm3;
      M128A Xmm4;
      M128A Xmm5;
      M128A Xmm6;
      M128A Xmm7;
      M128A Xmm8;
      M128A Xmm9;
      M128A Xmm10;
      M128A Xmm11;
      M128A Xmm12;
      M128A Xmm13;
      M128A Xmm14;
      M128A Xmm15;
    } ;
  } ;
  M128A VectorRegister[26];
  ULONG64 VectorControl;
  ULONG64 DebugControl;
  ULONG64 LastBranchToRip;
  ULONG64 LastBranchFromRip;
  ULONG64 LastExceptionToRip;
  ULONG64 LastExceptionFromRip;
} CONTEXT;
typedef struct _KPCR {
  __extension__ union {
    NT_TIB NtTib;
    __extension__ struct {
      union _KGDTENTRY64 *GdtBase;
      struct _KTSS64 *TssBase;
      ULONG64 UserRsp;
      struct _KPCR *Self;
      struct _KPRCB *CurrentPrcb;
      PKSPIN_LOCK_QUEUE LockArray;
      PVOID Used_Self;
    };
  };
  union _KIDTENTRY64 *IdtBase;
  ULONG64 Unused[2];
  KIRQL Irql;
  UCHAR SecondLevelCacheAssociativity;
  UCHAR ObsoleteNumber;
  UCHAR Fill0;
  ULONG Unused0[3];
  USHORT MajorVersion;
  USHORT MinorVersion;
  ULONG StallScaleFactor;
  PVOID Unused1[3];
  ULONG KernelReserved[15];
  ULONG SecondLevelCacheSize;
  ULONG HalReserved[16];
  ULONG Unused2;
  PVOID KdVersionBlock;
  PVOID Unused3;
  ULONG PcrAlign1[24];
} KPCR, *PKPCR;
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
PKPCR
KeGetPcr(void)
{
    return (PKPCR)__readgsqword(__builtin_offsetof(KPCR, Self));
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
ULONG
KeGetCurrentProcessorNumber(void)
{
    return (ULONG)__readgsword(0x184);
}
extern __attribute__((dllimport)) PVOID MmHighestUserAddress;
extern __attribute__((dllimport)) PVOID MmSystemRangeStart;
extern __attribute__((dllimport)) ULONG64 MmUserProbeAddress;
static __inline PVOID
ExAllocateFromZone(
  PZONE_HEADER Zone)
{
  PVOID Result = (PVOID)Zone->FreeList.Next;
  if (Zone->FreeList.Next)
    Zone->FreeList.Next = Zone->FreeList.Next->Next;
  return Result;
}
static __inline PVOID
ExFreeToZone(
  PZONE_HEADER Zone,
  PVOID Block)
{
  ((PSINGLE_LIST_ENTRY) Block)->Next = Zone->FreeList.Next;
  Zone->FreeList.Next = ((PSINGLE_LIST_ENTRY) Block);
  return ((PSINGLE_LIST_ENTRY) Block)->Next;
}
typedef enum _INTERLOCKED_RESULT {
  ResultNegative = 1,
  ResultZero = 0,
  ResultPositive = 2
} INTERLOCKED_RESULT;
__attribute__((dllimport))
NTSTATUS

ExExtendZone(
  PZONE_HEADER Zone,
  PVOID Segment,
  ULONG SegmentSize);
__attribute__((dllimport))
NTSTATUS

ExInitializeZone(
  PZONE_HEADER Zone,
  ULONG BlockSize,
  PVOID InitialSegment,
  ULONG InitialSegmentSize);
__attribute__((dllimport))
NTSTATUS

ExInterlockedExtendZone(
  PZONE_HEADER Zone,
  PVOID Segment,
  ULONG SegmentSize,
  PKSPIN_LOCK Lock);
__attribute__((dllimport))
NTSTATUS

ExUuidCreate(
  UUID *Uuid);
__attribute__((dllimport))
__attribute__((noreturn))
void

ExRaiseAccessViolation(void);
__attribute__((dllimport))
__attribute__((noreturn))
void

ExRaiseDatatypeMisalignment(void);
__attribute__((dllimport))
PADAPTER_OBJECT

HalGetAdapter(
  PDEVICE_DESCRIPTION DeviceDescription,
  PULONG NumberOfMapRegisters);
void

HalPutDmaAdapter(
  PADAPTER_OBJECT DmaAdapter);
__attribute__((dllimport))
void

HalAcquireDisplayOwnership(
  PHAL_RESET_DISPLAY_PARAMETERS ResetDisplayParameters);
__attribute__((dllimport))
ULONG

HalGetBusDataByOffset(
  BUS_DATA_TYPE BusDataType,
  ULONG BusNumber,
  ULONG SlotNumber,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
__attribute__((dllimport))
ULONG

HalSetBusDataByOffset(
  BUS_DATA_TYPE BusDataType,
  ULONG BusNumber,
  ULONG SlotNumber,
  PVOID Buffer,
  ULONG Offset,
  ULONG Length);
__attribute__((dllimport))
BOOLEAN

HalTranslateBusAddress(
  INTERFACE_TYPE InterfaceType,
  ULONG BusNumber,
  PHYSICAL_ADDRESS BusAddress,
  PULONG AddressSpace,
  PPHYSICAL_ADDRESS TranslatedAddress);
__attribute__((dllimport))
PVOID

HalAllocateCrashDumpRegisters(
  PADAPTER_OBJECT AdapterObject,
  PULONG NumberOfMapRegisters);
NTSTATUS

HalGetScatterGatherList(
  PADAPTER_OBJECT DmaAdapter,
  PDEVICE_OBJECT DeviceObject,
  PMDL Mdl,
  PVOID CurrentVa,
  ULONG Length,
  PDRIVER_LIST_CONTROL ExecutionRoutine,
  PVOID Context,
  BOOLEAN WriteToDevice);
void

HalPutScatterGatherList(
  PADAPTER_OBJECT DmaAdapter,
  PSCATTER_GATHER_LIST ScatterGather,
  BOOLEAN WriteToDevice);
__attribute__((dllimport))
void

HalExamineMBR(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  ULONG MBRTypeIdentifier,
  PVOID *Buffer);
typedef struct _WHEA_ERROR_RECORD *PWHEA_ERROR_RECORD;
__attribute__((dllimport))
void

HalBugCheckSystem(
  PWHEA_ERROR_RECORD ErrorRecord);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
void

IoInitializeDriverCreateContext(
  PIO_DRIVER_CREATE_CONTEXT DriverContext)
{
  memset(DriverContext, 0, sizeof(IO_DRIVER_CREATE_CONTEXT));
  DriverContext->Size = sizeof(IO_DRIVER_CREATE_CONTEXT);
}
__attribute__((dllimport))
void

IoAllocateController(
  PCONTROLLER_OBJECT ControllerObject,
  PDEVICE_OBJECT DeviceObject,
  PDRIVER_CONTROL ExecutionRoutine,
  PVOID Context );
__attribute__((dllimport))
PCONTROLLER_OBJECT

IoCreateController(
  ULONG Size);
__attribute__((dllimport))
void

IoDeleteController(
  PCONTROLLER_OBJECT ControllerObject);
__attribute__((dllimport))
void

IoFreeController(
  PCONTROLLER_OBJECT ControllerObject);
__attribute__((dllimport))
PCONFIGURATION_INFORMATION

IoGetConfigurationInformation(void);
__attribute__((dllimport))
PDEVICE_OBJECT

IoGetDeviceToVerify(
  PETHREAD Thread);
__attribute__((dllimport))
void

IoCancelFileOpen(
  PDEVICE_OBJECT DeviceObject,
  PFILE_OBJECT FileObject);
__attribute__((dllimport))
PGENERIC_MAPPING

IoGetFileObjectGenericMapping(void);
__attribute__((dllimport))
PIRP

IoMakeAssociatedIrp(
  PIRP Irp,
  CCHAR StackSize);
__attribute__((dllimport))
NTSTATUS

IoQueryDeviceDescription(
  PINTERFACE_TYPE BusType ,
  PULONG BusNumber ,
  PCONFIGURATION_TYPE ControllerType ,
  PULONG ControllerNumber ,
  PCONFIGURATION_TYPE PeripheralType ,
  PULONG PeripheralNumber ,
  PIO_QUERY_DEVICE_ROUTINE CalloutRoutine,
  PVOID Context );
__attribute__((dllimport))
void

IoRaiseHardError(
  PIRP Irp,
  PVPB Vpb ,
  PDEVICE_OBJECT RealDeviceObject);
__attribute__((dllimport))
BOOLEAN

IoRaiseInformationalHardError(
  NTSTATUS ErrorStatus,
  PUNICODE_STRING String ,
  PKTHREAD Thread );
__attribute__((dllimport))
void

IoRegisterBootDriverReinitialization(
  PDRIVER_OBJECT DriverObject,
  PDRIVER_REINITIALIZE DriverReinitializationRoutine,
  PVOID Context );
__attribute__((dllimport))
void

IoRegisterDriverReinitialization(
  PDRIVER_OBJECT DriverObject,
  PDRIVER_REINITIALIZE DriverReinitializationRoutine,
  PVOID Context );
__attribute__((dllimport))
NTSTATUS

IoAttachDeviceByPointer(
  PDEVICE_OBJECT SourceDevice,
  PDEVICE_OBJECT TargetDevice);
__attribute__((dllimport))
NTSTATUS

IoReportDetectedDevice(
  PDRIVER_OBJECT DriverObject,
  INTERFACE_TYPE LegacyBusType,
  ULONG BusNumber,
  ULONG SlotNumber,
  PCM_RESOURCE_LIST ResourceList ,
  PIO_RESOURCE_REQUIREMENTS_LIST ResourceRequirements ,
  BOOLEAN ResourceAssigned,
  PDEVICE_OBJECT *DeviceObject );
__attribute__((dllimport))
NTSTATUS

IoReportResourceForDetection(
  PDRIVER_OBJECT DriverObject,
  PCM_RESOURCE_LIST DriverList ,
  ULONG DriverListSize ,
  PDEVICE_OBJECT DeviceObject ,
  PCM_RESOURCE_LIST DeviceList ,
  ULONG DeviceListSize ,
  PBOOLEAN ConflictDetected);
__attribute__((dllimport))
NTSTATUS

IoReportResourceUsage(
  PUNICODE_STRING DriverClassName ,
  PDRIVER_OBJECT DriverObject,
  PCM_RESOURCE_LIST DriverList ,
  ULONG DriverListSize ,
  PDEVICE_OBJECT DeviceObject,
  PCM_RESOURCE_LIST DeviceList ,
  ULONG DeviceListSize ,
  BOOLEAN OverrideConflict,
  PBOOLEAN ConflictDetected);
__attribute__((dllimport))
void

IoSetHardErrorOrVerifyDevice(
  PIRP Irp,
  PDEVICE_OBJECT DeviceObject);
__attribute__((dllimport))
NTSTATUS

IoAssignResources(
  PUNICODE_STRING RegistryPath,
  PUNICODE_STRING DriverClassName ,
  PDRIVER_OBJECT DriverObject,
  PDEVICE_OBJECT DeviceObject ,
  PIO_RESOURCE_REQUIREMENTS_LIST RequestedResources ,
  PCM_RESOURCE_LIST *AllocatedResources);
__attribute__((dllimport))
BOOLEAN

IoSetThreadHardErrorMode(
  BOOLEAN EnableHardErrors);
__attribute__((dllimport))
BOOLEAN

IoIsFileOriginRemote(
  PFILE_OBJECT FileObject);
__attribute__((dllimport))
NTSTATUS

IoSetFileOrigin(
  PFILE_OBJECT FileObject,
  BOOLEAN Remote);
__attribute__((dllimport))
NTSTATUS

IoReadPartitionTable(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  BOOLEAN ReturnRecognizedPartitions,
  struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer);
__attribute__((dllimport))
NTSTATUS

IoSetPartitionInformation(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  ULONG PartitionNumber,
  ULONG PartitionType);
__attribute__((dllimport))
NTSTATUS

IoWritePartitionTable(
  PDEVICE_OBJECT DeviceObject,
  ULONG SectorSize,
  ULONG SectorsPerTrack,
  ULONG NumberOfHeads,
  struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer);
__attribute__((dllimport))
NTSTATUS

IoCreateDisk(
  PDEVICE_OBJECT DeviceObject,
  struct _CREATE_DISK* Disk );
__attribute__((dllimport))
NTSTATUS

IoReadDiskSignature(
  PDEVICE_OBJECT DeviceObject,
  ULONG BytesPerSector,
  PDISK_SIGNATURE Signature);
__attribute__((dllimport))
NTSTATUS

IoReadPartitionTableEx(
  PDEVICE_OBJECT DeviceObject,
  struct _DRIVE_LAYOUT_INFORMATION_EX **PartitionBuffer);
__attribute__((dllimport))
NTSTATUS

IoSetPartitionInformationEx(
  PDEVICE_OBJECT DeviceObject,
  ULONG PartitionNumber,
  struct _SET_PARTITION_INFORMATION_EX *PartitionInfo);
__attribute__((dllimport))
NTSTATUS

IoSetSystemPartition(
  PUNICODE_STRING VolumeNameString);
__attribute__((dllimport))
NTSTATUS

IoVerifyPartitionTable(
  PDEVICE_OBJECT DeviceObject,
  BOOLEAN FixErrors);
__attribute__((dllimport))
NTSTATUS

IoVolumeDeviceToDosName(
  PVOID VolumeDeviceObject,
  PUNICODE_STRING DosName);
__attribute__((dllimport))
NTSTATUS

IoWritePartitionTableEx(
  PDEVICE_OBJECT DeviceObject,
  struct _DRIVE_LAYOUT_INFORMATION_EX *DriveLayout);
__attribute__((dllimport))
NTSTATUS

IoCreateFileSpecifyDeviceObjectHint(
  PHANDLE FileHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  PIO_STATUS_BLOCK IoStatusBlock,
  PLARGE_INTEGER AllocationSize ,
  ULONG FileAttributes,
  ULONG ShareAccess,
  ULONG Disposition,
  ULONG CreateOptions,
  PVOID EaBuffer ,
  ULONG EaLength,
  CREATE_FILE_TYPE CreateFileType,
  PVOID InternalParameters ,
  ULONG Options,
  PVOID DeviceObject );
__attribute__((dllimport))
NTSTATUS

IoAttachDeviceToDeviceStackSafe(
  PDEVICE_OBJECT SourceDevice,
  PDEVICE_OBJECT TargetDevice,
  PDEVICE_OBJECT *AttachedToDeviceObject);
__attribute__((dllimport))
IO_PAGING_PRIORITY

IoGetPagingIoPriority(
  PIRP Irp);
__attribute__((dllimport))
ULONG

DbgPrompt(
  PCCH Prompt,
  PCH Response,
  ULONG MaximumResponseLength);
__attribute__((dllimport))
void

KeInvalidateRangeAllCaches(
  PVOID BaseAddress,
  ULONG Length);
__attribute__((dllimport))
void

KeSetImportanceDpc(
  PRKDPC Dpc,
  KDPC_IMPORTANCE Importance);
__attribute__((dllimport))
LONG

KePulseEvent(
  PRKEVENT Event,
  KPRIORITY Increment,
  BOOLEAN Wait);
__attribute__((dllimport))
LONG

KeSetBasePriorityThread(
  PRKTHREAD Thread,
  LONG Increment);
__attribute__((dllimport))
void

KeEnterCriticalRegion(void);
__attribute__((dllimport))
void

KeLeaveCriticalRegion(void);
__attribute__((dllimport))
__attribute__((noreturn))
void

KeBugCheck(
  ULONG BugCheckCode);
__attribute__((dllimport))
void

KeSetTargetProcessorDpc(
  PRKDPC Dpc,
  CCHAR Number);
__attribute__((dllimport))
KAFFINITY

KeQueryActiveProcessors(void);
__attribute__((dllimport))
BOOLEAN

KeAreApcsDisabled(void);
__attribute__((dllimport))
BOOLEAN

KeInvalidateAllCaches(void);
__attribute__((dllimport))
PPHYSICAL_MEMORY_RANGE

MmGetPhysicalMemoryRanges(void);
__attribute__((dllimport))
PHYSICAL_ADDRESS

MmGetPhysicalAddress(
  PVOID BaseAddress);
__attribute__((dllimport))
BOOLEAN

MmIsNonPagedSystemAddressValid(
  PVOID VirtualAddress);
__attribute__((dllimport))
PVOID

MmAllocateNonCachedMemory(
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
void

MmFreeNonCachedMemory(
  PVOID BaseAddress,
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
PVOID

MmGetVirtualForPhysical(
  PHYSICAL_ADDRESS PhysicalAddress);
__attribute__((dllimport))
NTSTATUS

MmMapUserAddressesToPage(
  PVOID BaseAddress,
  SIZE_T NumberOfBytes,
  PVOID PageAddress);
__attribute__((dllimport))
PVOID

MmMapVideoDisplay(
  PHYSICAL_ADDRESS PhysicalAddress,
  SIZE_T NumberOfBytes,
  MEMORY_CACHING_TYPE CacheType);
__attribute__((dllimport))
NTSTATUS

MmMapViewInSessionSpace(
  PVOID Section,
  PVOID *MappedBase,
  PSIZE_T ViewSize);
__attribute__((dllimport))
NTSTATUS

MmMapViewInSystemSpace(
  PVOID Section,
  PVOID *MappedBase,
  PSIZE_T ViewSize);
__attribute__((dllimport))
BOOLEAN

MmIsAddressValid(
  PVOID VirtualAddress);
__attribute__((dllimport))
BOOLEAN

MmIsThisAnNtAsSystem(void);
__attribute__((dllimport))
void

MmLockPagableSectionByHandle(
  PVOID ImageSectionHandle);
__attribute__((dllimport))
NTSTATUS

MmUnmapViewInSessionSpace(
  PVOID MappedBase);
__attribute__((dllimport))
NTSTATUS

MmUnmapViewInSystemSpace(
  PVOID MappedBase);
__attribute__((dllimport))
void

MmUnsecureVirtualMemory(
  HANDLE SecureHandle);
__attribute__((dllimport))
NTSTATUS

MmRemovePhysicalMemory(
  PPHYSICAL_ADDRESS StartAddress,
  PLARGE_INTEGER NumberOfBytes);
__attribute__((dllimport))
HANDLE

MmSecureVirtualMemory(
  PVOID Address,
  SIZE_T Size,
  ULONG ProbeMode);
__attribute__((dllimport))
void

MmUnmapVideoDisplay(
  PVOID BaseAddress,
  SIZE_T NumberOfBytes);
__attribute__((dllimport))
NTSTATUS

MmAddPhysicalMemory(
  PPHYSICAL_ADDRESS StartAddress,
  PLARGE_INTEGER NumberOfBytes);
__attribute__((dllimport))
PVOID

MmAllocateContiguousMemory(
  SIZE_T NumberOfBytes,
  PHYSICAL_ADDRESS HighestAcceptableAddress);
__attribute__((dllimport))
PVOID

MmAllocateContiguousMemorySpecifyCache(
  SIZE_T NumberOfBytes,
  PHYSICAL_ADDRESS LowestAcceptableAddress,
  PHYSICAL_ADDRESS HighestAcceptableAddress,
  PHYSICAL_ADDRESS BoundaryAddressMultiple ,
  MEMORY_CACHING_TYPE CacheType);
__attribute__((dllimport))
PVOID

MmAllocateContiguousMemorySpecifyCacheNode(
  SIZE_T NumberOfBytes,
  PHYSICAL_ADDRESS LowestAcceptableAddress,
  PHYSICAL_ADDRESS HighestAcceptableAddress,
  PHYSICAL_ADDRESS BoundaryAddressMultiple ,
  MEMORY_CACHING_TYPE CacheType,
  NODE_REQUIREMENT PreferredNode);
__attribute__((dllimport))
void

MmFreeContiguousMemory(
  PVOID BaseAddress);
__attribute__((dllimport))
void

MmFreeContiguousMemorySpecifyCache(
  PVOID BaseAddress,
  SIZE_T NumberOfBytes,
  MEMORY_CACHING_TYPE CacheType);
__attribute__((dllimport))
NTSTATUS

MmCreateMirror(void);
__attribute__((dllimport))
NTSTATUS

NtOpenProcess(
  PHANDLE ProcessHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  PCLIENT_ID ClientId );
__attribute__((dllimport))
NTSTATUS

NtQueryInformationProcess(
  HANDLE ProcessHandle,
  PROCESSINFOCLASS ProcessInformationClass,
  PVOID ProcessInformation ,
  ULONG ProcessInformationLength,
  PULONG ReturnLength );
__attribute__((dllimport))
NTSTATUS

PsSetCreateProcessNotifyRoutine(
  PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine,
  BOOLEAN Remove);
__attribute__((dllimport))
NTSTATUS

PsSetCreateThreadNotifyRoutine(
  PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
__attribute__((dllimport))
NTSTATUS

PsSetLoadImageNotifyRoutine(
  PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
__attribute__((dllimport))
HANDLE

PsGetCurrentProcessId(void);
__attribute__((dllimport))
HANDLE

PsGetCurrentThreadId(void);
__attribute__((dllimport))
BOOLEAN

PsGetVersion(
  PULONG MajorVersion ,
  PULONG MinorVersion ,
  PULONG BuildNumber ,
  PUNICODE_STRING CSDVersion );
__attribute__((dllimport))
HANDLE

PsGetProcessId(
  PEPROCESS Process);
__attribute__((dllimport))
HANDLE

PsGetThreadId(
  PETHREAD Thread);
__attribute__((dllimport))
NTSTATUS

PsRemoveCreateThreadNotifyRoutine(
  PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
__attribute__((dllimport))
NTSTATUS

PsRemoveLoadImageNotifyRoutine(
  PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
__attribute__((dllimport))
LONGLONG

PsGetProcessCreateTimeQuadPart(
  PEPROCESS Process);
__attribute__((dllimport))
HANDLE

PsGetThreadProcessId(
  PETHREAD Thread);
__attribute__((dllimport))
void

RtlInitializeGenericTable(
  PRTL_GENERIC_TABLE Table,
  PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine,
  PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine,
  PRTL_GENERIC_FREE_ROUTINE FreeRoutine,
  PVOID TableContext );
__attribute__((dllimport))
PVOID

RtlInsertElementGenericTable(
  PRTL_GENERIC_TABLE Table,
  PVOID Buffer,
  CLONG BufferSize,
  PBOOLEAN NewElement );
__attribute__((dllimport))
PVOID

RtlInsertElementGenericTableFull(
  PRTL_GENERIC_TABLE Table,
  PVOID Buffer,
  CLONG BufferSize,
  PBOOLEAN NewElement ,
  PVOID NodeOrParent,
  TABLE_SEARCH_RESULT SearchResult);
__attribute__((dllimport))
BOOLEAN

RtlDeleteElementGenericTable(
  PRTL_GENERIC_TABLE Table,
  PVOID Buffer);
__attribute__((dllimport))
PVOID

RtlLookupElementGenericTable(
  PRTL_GENERIC_TABLE Table,
  PVOID Buffer);
__attribute__((dllimport))
PVOID

RtlLookupElementGenericTableFull(
  PRTL_GENERIC_TABLE Table,
  PVOID Buffer,
  PVOID *NodeOrParent,
  TABLE_SEARCH_RESULT *SearchResult);
__attribute__((dllimport))
PVOID

RtlEnumerateGenericTable(
  PRTL_GENERIC_TABLE Table,
  BOOLEAN Restart);
__attribute__((dllimport))
PVOID

RtlEnumerateGenericTableWithoutSplaying(
  PRTL_GENERIC_TABLE Table,
  PVOID *RestartKey);
__attribute__((dllimport))
PVOID

RtlGetElementGenericTable(
  PRTL_GENERIC_TABLE Table,
  ULONG I);
__attribute__((dllimport))
ULONG

RtlNumberGenericTableElements(
  PRTL_GENERIC_TABLE Table);
__attribute__((dllimport))
BOOLEAN

RtlIsGenericTableEmpty(
  PRTL_GENERIC_TABLE Table);
__attribute__((dllimport))
PRTL_SPLAY_LINKS

RtlSplay(
  PRTL_SPLAY_LINKS Links);
__attribute__((dllimport))
PRTL_SPLAY_LINKS

RtlDelete(
  PRTL_SPLAY_LINKS Links);
__attribute__((dllimport))
void

RtlDeleteNoSplay(
  PRTL_SPLAY_LINKS Links,
  PRTL_SPLAY_LINKS *Root);
__attribute__((dllimport))
PRTL_SPLAY_LINKS

RtlSubtreeSuccessor(
  PRTL_SPLAY_LINKS Links);
__attribute__((dllimport))
PRTL_SPLAY_LINKS

RtlSubtreePredecessor(
  PRTL_SPLAY_LINKS Links);
__attribute__((dllimport))
PRTL_SPLAY_LINKS

RtlRealSuccessor(
  PRTL_SPLAY_LINKS Links);
__attribute__((dllimport))
PRTL_SPLAY_LINKS

RtlRealPredecessor(
  PRTL_SPLAY_LINKS Links);
__attribute__((dllimport))
BOOLEAN

RtlPrefixUnicodeString(
  PCUNICODE_STRING String1,
  PCUNICODE_STRING String2,
  BOOLEAN CaseInSensitive);
__attribute__((dllimport))
void

RtlUpperString(
  PSTRING DestinationString,
  const PSTRING SourceString);
__attribute__((dllimport))
NTSTATUS

RtlUpcaseUnicodeString(
  PUNICODE_STRING DestinationString,
  PCUNICODE_STRING SourceString,
  BOOLEAN AllocateDestinationString);
__attribute__((dllimport))
void

RtlMapGenericMask(
  PACCESS_MASK AccessMask,
  PGENERIC_MAPPING GenericMapping);
__attribute__((dllimport))
NTSTATUS

RtlVolumeDeviceToDosName(
  PVOID VolumeDeviceObject,
  PUNICODE_STRING DosName);
__attribute__((dllimport))
NTSTATUS

RtlGetVersion(
  PRTL_OSVERSIONINFOW lpVersionInformation);
__attribute__((dllimport))
NTSTATUS

RtlVerifyVersionInfo(
  PRTL_OSVERSIONINFOEXW VersionInfo,
  ULONG TypeMask,
  ULONGLONG ConditionMask);
__attribute__((dllimport))
LONG

RtlCompareString(
  const PSTRING String1,
  const PSTRING String2,
  BOOLEAN CaseInSensitive);
__attribute__((dllimport))
void

RtlCopyString(
  PSTRING DestinationString,
  const PSTRING SourceString );
__attribute__((dllimport))
BOOLEAN

RtlEqualString(
  const PSTRING String1,
  const PSTRING String2,
  BOOLEAN CaseInSensitive);
__attribute__((dllimport))
NTSTATUS

RtlCharToInteger(
  PCSZ String,
  ULONG Base ,
  PULONG Value);
__attribute__((dllimport))
CHAR

RtlUpperChar(
  CHAR Character);
__attribute__((dllimport))
ULONG

RtlWalkFrameChain(
  PVOID *Callers,
  ULONG Count,
  ULONG Flags);
__attribute__((dllimport))
void

RtlInitializeGenericTableAvl(
  PRTL_AVL_TABLE Table,
  PRTL_AVL_COMPARE_ROUTINE CompareRoutine,
  PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine,
  PRTL_AVL_FREE_ROUTINE FreeRoutine,
  PVOID TableContext );
__attribute__((dllimport))
PVOID

RtlInsertElementGenericTableAvl(
  PRTL_AVL_TABLE Table,
  PVOID Buffer,
  CLONG BufferSize,
  PBOOLEAN NewElement );
__attribute__((dllimport))
PVOID

RtlInsertElementGenericTableFullAvl(
  PRTL_AVL_TABLE Table,
  PVOID Buffer,
  CLONG BufferSize,
  PBOOLEAN NewElement ,
  PVOID NodeOrParent,
  TABLE_SEARCH_RESULT SearchResult);
__attribute__((dllimport))
BOOLEAN

RtlDeleteElementGenericTableAvl(
  PRTL_AVL_TABLE Table,
  PVOID Buffer);
__attribute__((dllimport))
PVOID

RtlLookupElementGenericTableAvl(
  PRTL_AVL_TABLE Table,
  PVOID Buffer);
__attribute__((dllimport))
PVOID

RtlLookupElementGenericTableFullAvl(
  PRTL_AVL_TABLE Table,
  PVOID Buffer,
  PVOID *NodeOrParent,
  TABLE_SEARCH_RESULT *SearchResult);
__attribute__((dllimport))
PVOID

RtlEnumerateGenericTableAvl(
  PRTL_AVL_TABLE Table,
  BOOLEAN Restart);
__attribute__((dllimport))
PVOID

RtlEnumerateGenericTableWithoutSplayingAvl(
  PRTL_AVL_TABLE Table,
  PVOID *RestartKey);
__attribute__((dllimport))
PVOID

RtlLookupFirstMatchingElementGenericTableAvl(
  PRTL_AVL_TABLE Table,
  PVOID Buffer,
  PVOID *RestartKey);
__attribute__((dllimport))
PVOID

RtlEnumerateGenericTableLikeADirectory(
  PRTL_AVL_TABLE Table,
  PRTL_AVL_MATCH_FUNCTION MatchFunction ,
  PVOID MatchData ,
  ULONG NextFlag,
  PVOID *RestartKey,
  PULONG DeleteCount,
  PVOID Buffer);
__attribute__((dllimport))
PVOID

RtlGetElementGenericTableAvl(
  PRTL_AVL_TABLE Table,
  ULONG I);
__attribute__((dllimport))
ULONG

RtlNumberGenericTableElementsAvl(
  PRTL_AVL_TABLE Table);
__attribute__((dllimport))
BOOLEAN

RtlIsGenericTableEmptyAvl(
  PRTL_AVL_TABLE Table);
//DECLSPEC_DEPRECATED_DDK_WINXP
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
LARGE_INTEGER

RtlLargeIntegerDivide(
  LARGE_INTEGER Dividend,
  LARGE_INTEGER Divisor,
  PLARGE_INTEGER Remainder )
{
  LARGE_INTEGER ret;
  ret.QuadPart = Dividend.QuadPart / Divisor.QuadPart;
  if (Remainder)
    Remainder->QuadPart = Dividend.QuadPart % Divisor.QuadPart;
  return ret;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
LUID

RtlConvertLongToLuid(
  LONG Val)
{
  LUID Luid;
  LARGE_INTEGER Temp;
  Temp.QuadPart = Val;
  Luid.LowPart = Temp.u.LowPart;
  Luid.HighPart = Temp.u.HighPart;
  return Luid;
}
extern __inline__ __attribute__((__always_inline__,__gnu_inline__))
LUID

RtlConvertUlongToLuid(
  ULONG Val)
{
  LUID Luid;
  Luid.LowPart = Val;
  Luid.HighPart = 0;
  return Luid;
}
__attribute__((dllimport))
BOOLEAN

SeSinglePrivilegeCheck(
  LUID PrivilegeValue,
  KPROCESSOR_MODE PreviousMode);
__attribute__((dllimport))
NTSTATUS

ZwAllocateLocallyUniqueId(
  PLUID Luid);
__attribute__((dllimport))
NTSTATUS

ZwTerminateProcess(
  HANDLE ProcessHandle ,
  NTSTATUS ExitStatus);
__attribute__((dllimport))
NTSTATUS

ZwOpenProcess(
  PHANDLE ProcessHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes,
  PCLIENT_ID ClientId );
NTSTATUS

ZwCancelTimer(
  HANDLE TimerHandle,
  PBOOLEAN CurrentState );
NTSTATUS

ZwCreateTimer(
  PHANDLE TimerHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes ,
  TIMER_TYPE TimerType);
NTSTATUS

ZwOpenTimer(
  PHANDLE TimerHandle,
  ACCESS_MASK DesiredAccess,
  POBJECT_ATTRIBUTES ObjectAttributes);
__attribute__((dllimport))
NTSTATUS

ZwSetInformationThread(
  HANDLE ThreadHandle,
  THREADINFOCLASS ThreadInformationClass,
  PVOID ThreadInformation,
  ULONG ThreadInformationLength);
NTSTATUS

ZwSetTimer(
  HANDLE TimerHandle,
  PLARGE_INTEGER DueTime,
  PTIMER_APC_ROUTINE TimerApcRoutine ,
  PVOID TimerContext ,
  BOOLEAN ResumeTimer,
  LONG Period ,
  PBOOLEAN PreviousState );
__attribute__((dllimport))
NTSTATUS

ZwDisplayString(
  PUNICODE_STRING String);
__attribute__((dllimport))
NTSTATUS

ZwPowerInformation(
  POWER_INFORMATION_LEVEL PowerInformationLevel,
  PVOID InputBuffer ,
  ULONG InputBufferLength,
  PVOID OutputBuffer ,
  ULONG OutputBufferLength);
__attribute__((dllimport))
NTSTATUS

ZwQueryVolumeInformationFile(
  HANDLE FileHandle,
  PIO_STATUS_BLOCK IoStatusBlock,
  PVOID FsInformation,
  ULONG Length,
  FS_INFORMATION_CLASS FsInformationClass);
__attribute__((dllimport))
NTSTATUS

ZwDeviceIoControlFile(
  HANDLE FileHandle,
  HANDLE Event ,
  PIO_APC_ROUTINE ApcRoutine ,
  PVOID ApcContext ,
  PIO_STATUS_BLOCK IoStatusBlock,
  ULONG IoControlCode,
  PVOID InputBuffer ,
  ULONG InputBufferLength,
  PVOID OutputBuffer ,
  ULONG OutputBufferLength);
__attribute__((dllimport))
ULONGLONG

VerSetConditionMask(
  ULONGLONG ConditionMask,
  ULONG TypeMask,
  UCHAR Condition);
typedef struct _KERNEL_USER_TIMES {
  LARGE_INTEGER CreateTime;
  LARGE_INTEGER ExitTime;
  LARGE_INTEGER KernelTime;
  LARGE_INTEGER UserTime;
} KERNEL_USER_TIMES, *PKERNEL_USER_TIMES;
typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION {
  SystemFirmwareTable_Enumerate,
  SystemFirmwareTable_Get
} SYSTEM_FIRMWARE_TABLE_ACTION;
typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION {
  ULONG ProviderSignature;
  SYSTEM_FIRMWARE_TABLE_ACTION Action;
  ULONG TableID;
  ULONG TableBufferLength;
  UCHAR TableBuffer[1];
} SYSTEM_FIRMWARE_TABLE_INFORMATION, *PSYSTEM_FIRMWARE_TABLE_INFORMATION;
typedef NTSTATUS
(__attribute__((__cdecl__)) *PFNFTH)(
  PSYSTEM_FIRMWARE_TABLE_INFORMATION SystemFirmwareTableInfo);
typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER {
  ULONG ProviderSignature;
  BOOLEAN Register;
  PFNFTH FirmwareTableHandler;
  PVOID DriverObject;
} SYSTEM_FIRMWARE_TABLE_HANDLER, *PSYSTEM_FIRMWARE_TABLE_HANDLER;
typedef ULONG_PTR
( *PDRIVER_VERIFIER_THUNK_ROUTINE)(
  PVOID Context);
typedef struct _DRIVER_VERIFIER_THUNK_PAIRS {
  PDRIVER_VERIFIER_THUNK_ROUTINE PristineRoutine;
  PDRIVER_VERIFIER_THUNK_ROUTINE NewRoutine;
} DRIVER_VERIFIER_THUNK_PAIRS, *PDRIVER_VERIFIER_THUNK_PAIRS;
__attribute__((dllimport))
BOOLEAN

FsRtlIsTotalDeviceFailure(
  NTSTATUS Status);
